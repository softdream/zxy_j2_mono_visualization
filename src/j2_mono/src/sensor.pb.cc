// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSFrame_sensor_2eproto;
namespace SensorProto {
class IMUFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMUFrame> _instance;
} _IMUFrame_default_instance_;
class GPSFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSFrame> _instance;
} _GPSFrame_default_instance_;
class GPSFrameRawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSFrameRaw> _instance;
} _GPSFrameRaw_default_instance_;
}  // namespace SensorProto
static void InitDefaultsscc_info_GPSFrame_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SensorProto::_GPSFrame_default_instance_;
    new (ptr) ::SensorProto::GPSFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSFrame_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPSFrame_sensor_2eproto}, {}};

static void InitDefaultsscc_info_GPSFrameRaw_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SensorProto::_GPSFrameRaw_default_instance_;
    new (ptr) ::SensorProto::GPSFrameRaw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPSFrameRaw_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GPSFrameRaw_sensor_2eproto}, {
      &scc_info_GPSFrame_sensor_2eproto.base,}};

static void InitDefaultsscc_info_IMUFrame_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SensorProto::_IMUFrame_default_instance_;
    new (ptr) ::SensorProto::IMUFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMUFrame_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMUFrame_sensor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensor_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sensor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, acc_x_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, acc_y_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, acc_z_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, gyro_x_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, gyro_y_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, gyro_z_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, temperature_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::IMUFrame, time_stamp_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, longitude_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, latitude_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, longitude_cent_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, longitude_dir_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, latitude_cent_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, latitude_dir_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, ground_speed_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, ground_course_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, gps_time_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, altitude_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrame, accuracy_),
  2,
  3,
  4,
  5,
  0,
  6,
  1,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrameRaw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrameRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrameRaw, info_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrameRaw, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::SensorProto::GPSFrameRaw, parsed_),
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::SensorProto::IMUFrame)},
  { 21, 38, sizeof(::SensorProto::GPSFrame)},
  { 50, 58, sizeof(::SensorProto::GPSFrameRaw)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SensorProto::_IMUFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SensorProto::_GPSFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SensorProto::_GPSFrameRaw_default_instance_),
};

const char descriptor_table_protodef_sensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sensor.proto\022\013SensorProto\"\220\001\n\010IMUFrame"
  "\022\r\n\005acc_x\030\001 \001(\002\022\r\n\005acc_y\030\002 \001(\002\022\r\n\005acc_z\030"
  "\003 \001(\002\022\016\n\006gyro_x\030\004 \001(\002\022\016\n\006gyro_y\030\005 \001(\002\022\016\n"
  "\006gyro_z\030\006 \001(\002\022\023\n\013temperature\030\007 \001(\002\022\022\n\nti"
  "me_stamp\030\010 \002(\003\"\202\002\n\010GPSFrame\022\021\n\tlongitude"
  "\030\001 \002(\002\022\020\n\010latitude\030\002 \002(\002\022\022\n\ntime_stamp\030\003"
  " \002(\003\022\026\n\016longitude_cent\030\004 \001(\002\022\025\n\rlongitud"
  "e_dir\030\005 \001(\t\022\025\n\rlatitude_cent\030\006 \001(\002\022\024\n\014la"
  "titude_dir\030\007 \001(\t\022\024\n\014ground_speed\030\010 \001(\002\022\025"
  "\n\rground_course\030\t \001(\002\022\020\n\010gps_time\030\n \001(\003\022"
  "\020\n\010altitude\030\013 \001(\002\022\020\n\010accuracy\030\014 \001(\002\"V\n\013G"
  "PSFrameRaw\022\014\n\004info\030\001 \001(\t\022\022\n\ntime_stamp\030\002"
  " \002(\003\022%\n\006parsed\030\003 \001(\0132\025.SensorProto.GPSFr"
  "ame"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensor_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sensor_2eproto_sccs[3] = {
  &scc_info_GPSFrame_sensor_2eproto.base,
  &scc_info_GPSFrameRaw_sensor_2eproto.base,
  &scc_info_IMUFrame_sensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_2eproto = {
  false, false, descriptor_table_protodef_sensor_2eproto, "sensor.proto", 523,
  &descriptor_table_sensor_2eproto_once, descriptor_table_sensor_2eproto_sccs, descriptor_table_sensor_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_sensor_2eproto::offsets,
  file_level_metadata_sensor_2eproto, 3, file_level_enum_descriptors_sensor_2eproto, file_level_service_descriptors_sensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sensor_2eproto)), true);
namespace SensorProto {

// ===================================================================

class IMUFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<IMUFrame>()._has_bits_);
  static void set_has_acc_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acc_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gyro_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gyro_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gyro_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000040) ^ 0x00000040) != 0;
  }
};

IMUFrame::IMUFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SensorProto.IMUFrame)
}
IMUFrame::IMUFrame(const IMUFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acc_x_, &from.acc_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&temperature_) -
    reinterpret_cast<char*>(&acc_x_)) + sizeof(temperature_));
  // @@protoc_insertion_point(copy_constructor:SensorProto.IMUFrame)
}

void IMUFrame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&acc_x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&temperature_) -
      reinterpret_cast<char*>(&acc_x_)) + sizeof(temperature_));
}

IMUFrame::~IMUFrame() {
  // @@protoc_insertion_point(destructor:SensorProto.IMUFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IMUFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IMUFrame::ArenaDtor(void* object) {
  IMUFrame* _this = reinterpret_cast< IMUFrame* >(object);
  (void)_this;
}
void IMUFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMUFrame& IMUFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMUFrame_sensor_2eproto.base);
  return *internal_default_instance();
}


void IMUFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorProto.IMUFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&acc_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temperature_) -
        reinterpret_cast<char*>(&acc_x_)) + sizeof(temperature_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float acc_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_acc_x(&has_bits);
          acc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acc_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_acc_y(&has_bits);
          acc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acc_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_acc_z(&has_bits);
          acc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gyro_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_gyro_x(&has_bits);
          gyro_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gyro_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_gyro_y(&has_bits);
          gyro_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gyro_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_gyro_z(&has_bits);
          gyro_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float temperature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int64 time_stamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMUFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorProto.IMUFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float acc_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_acc_x(), target);
  }

  // optional float acc_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_acc_y(), target);
  }

  // optional float acc_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_acc_z(), target);
  }

  // optional float gyro_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_gyro_x(), target);
  }

  // optional float gyro_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_gyro_y(), target);
  }

  // optional float gyro_z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_gyro_z(), target);
  }

  // optional float temperature = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_temperature(), target);
  }

  // required int64 time_stamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorProto.IMUFrame)
  return target;
}

size_t IMUFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorProto.IMUFrame)
  size_t total_size = 0;

  // required int64 time_stamp = 8;
  if (_internal_has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float acc_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float acc_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float acc_z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float gyro_x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float gyro_y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float gyro_z = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  // optional float temperature = 7;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorProto.IMUFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMUFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorProto.IMUFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorProto.IMUFrame)
    MergeFrom(*source);
  }
}

void IMUFrame::MergeFrom(const IMUFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorProto.IMUFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      acc_x_ = from.acc_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_y_ = from.acc_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_z_ = from.acc_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      gyro_x_ = from.gyro_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      gyro_y_ = from.gyro_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      gyro_z_ = from.gyro_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      temperature_ = from.temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IMUFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorProto.IMUFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUFrame::CopyFrom(const IMUFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorProto.IMUFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IMUFrame::InternalSwap(IMUFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUFrame, temperature_)
      + sizeof(IMUFrame::temperature_)
      - PROTOBUF_FIELD_OFFSET(IMUFrame, acc_x_)>(
          reinterpret_cast<char*>(&acc_x_),
          reinterpret_cast<char*>(&other->acc_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GPSFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<GPSFrame>()._has_bits_);
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude_cent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_longitude_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude_cent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latitude_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ground_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ground_course(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gps_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

GPSFrame::GPSFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SensorProto.GPSFrame)
}
GPSFrame::GPSFrame(const GPSFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  longitude_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_longitude_dir()) {
    longitude_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_longitude_dir(), 
      GetArena());
  }
  latitude_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_latitude_dir()) {
    latitude_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latitude_dir(), 
      GetArena());
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(accuracy_));
  // @@protoc_insertion_point(copy_constructor:SensorProto.GPSFrame)
}

void GPSFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPSFrame_sensor_2eproto.base);
  longitude_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latitude_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(accuracy_));
}

GPSFrame::~GPSFrame() {
  // @@protoc_insertion_point(destructor:SensorProto.GPSFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPSFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  longitude_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latitude_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPSFrame::ArenaDtor(void* object) {
  GPSFrame* _this = reinterpret_cast< GPSFrame* >(object);
  (void)_this;
}
void GPSFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPSFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSFrame& GPSFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSFrame_sensor_2eproto.base);
  return *internal_default_instance();
}


void GPSFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorProto.GPSFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_dir_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ground_speed_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(ground_speed_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&ground_course_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accuracy_) -
        reinterpret_cast<char*>(&ground_course_)) + sizeof(accuracy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPSFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int64 time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float longitude_cent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_longitude_cent(&has_bits);
          longitude_cent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string longitude_dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_longitude_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SensorProto.GPSFrame.longitude_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float latitude_cent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_latitude_cent(&has_bits);
          latitude_cent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string latitude_dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_latitude_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SensorProto.GPSFrame.latitude_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ground_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ground_speed(&has_bits);
          ground_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ground_course = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ground_course(&has_bits);
          ground_course_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 gps_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gps_time(&has_bits);
          gps_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float altitude = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accuracy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_accuracy(&has_bits);
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorProto.GPSFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float longitude = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude(), target);
  }

  // required float latitude = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  // required int64 time_stamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // optional float longitude_cent = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_longitude_cent(), target);
  }

  // optional string longitude_dir = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_longitude_dir().data(), static_cast<int>(this->_internal_longitude_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SensorProto.GPSFrame.longitude_dir");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_longitude_dir(), target);
  }

  // optional float latitude_cent = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_latitude_cent(), target);
  }

  // optional string latitude_dir = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_latitude_dir().data(), static_cast<int>(this->_internal_latitude_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SensorProto.GPSFrame.latitude_dir");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_latitude_dir(), target);
  }

  // optional float ground_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_ground_speed(), target);
  }

  // optional float ground_course = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_ground_course(), target);
  }

  // optional int64 gps_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_gps_time(), target);
  }

  // optional float altitude = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_altitude(), target);
  }

  // optional float accuracy = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_accuracy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorProto.GPSFrame)
  return target;
}

size_t GPSFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SensorProto.GPSFrame)
  size_t total_size = 0;

  if (_internal_has_longitude()) {
    // required float longitude = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_latitude()) {
    // required float latitude = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_time_stamp()) {
    // required int64 time_stamp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  return total_size;
}
size_t GPSFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorProto.GPSFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required float longitude = 1;
    total_size += 1 + 4;

    // required float latitude = 2;
    total_size += 1 + 4;

    // required int64 time_stamp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string longitude_dir = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_longitude_dir());
    }

    // optional string latitude_dir = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_latitude_dir());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional float longitude_cent = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float latitude_cent = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float ground_speed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float ground_course = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int64 gps_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_gps_time());
    }

    // optional float altitude = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float accuracy = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorProto.GPSFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorProto.GPSFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorProto.GPSFrame)
    MergeFrom(*source);
  }
}

void GPSFrame::MergeFrom(const GPSFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorProto.GPSFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_longitude_dir(from._internal_longitude_dir());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_latitude_dir(from._internal_latitude_dir());
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_cent_ = from.longitude_cent_;
    }
    if (cached_has_bits & 0x00000040u) {
      latitude_cent_ = from.latitude_cent_;
    }
    if (cached_has_bits & 0x00000080u) {
      ground_speed_ = from.ground_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ground_course_ = from.ground_course_;
    }
    if (cached_has_bits & 0x00000200u) {
      gps_time_ = from.gps_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000800u) {
      accuracy_ = from.accuracy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GPSFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorProto.GPSFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFrame::CopyFrom(const GPSFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorProto.GPSFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GPSFrame::InternalSwap(GPSFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  longitude_dir_.Swap(&other->longitude_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latitude_dir_.Swap(&other->latitude_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPSFrame, accuracy_)
      + sizeof(GPSFrame::accuracy_)
      - PROTOBUF_FIELD_OFFSET(GPSFrame, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GPSFrameRaw::_Internal {
 public:
  using HasBits = decltype(std::declval<GPSFrameRaw>()._has_bits_);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SensorProto::GPSFrame& parsed(const GPSFrameRaw* msg);
  static void set_has_parsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::SensorProto::GPSFrame&
GPSFrameRaw::_Internal::parsed(const GPSFrameRaw* msg) {
  return *msg->parsed_;
}
GPSFrameRaw::GPSFrameRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SensorProto.GPSFrameRaw)
}
GPSFrameRaw::GPSFrameRaw(const GPSFrameRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_info()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArena());
  }
  if (from._internal_has_parsed()) {
    parsed_ = new ::SensorProto::GPSFrame(*from.parsed_);
  } else {
    parsed_ = nullptr;
  }
  time_stamp_ = from.time_stamp_;
  // @@protoc_insertion_point(copy_constructor:SensorProto.GPSFrameRaw)
}

void GPSFrameRaw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPSFrameRaw_sensor_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parsed_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&parsed_)) + sizeof(time_stamp_));
}

GPSFrameRaw::~GPSFrameRaw() {
  // @@protoc_insertion_point(destructor:SensorProto.GPSFrameRaw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPSFrameRaw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parsed_;
}

void GPSFrameRaw::ArenaDtor(void* object) {
  GPSFrameRaw* _this = reinterpret_cast< GPSFrameRaw* >(object);
  (void)_this;
}
void GPSFrameRaw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPSFrameRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSFrameRaw& GPSFrameRaw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSFrameRaw_sensor_2eproto.base);
  return *internal_default_instance();
}


void GPSFrameRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorProto.GPSFrameRaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parsed_ != nullptr);
      parsed_->Clear();
    }
  }
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPSFrameRaw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SensorProto.GPSFrameRaw.info");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SensorProto.GPSFrame parsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parsed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSFrameRaw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorProto.GPSFrameRaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SensorProto.GPSFrameRaw.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // required int64 time_stamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_stamp(), target);
  }

  // optional .SensorProto.GPSFrame parsed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::parsed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorProto.GPSFrameRaw)
  return target;
}

size_t GPSFrameRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorProto.GPSFrameRaw)
  size_t total_size = 0;

  // required int64 time_stamp = 2;
  if (_internal_has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_info());
    }

    // optional .SensorProto.GPSFrame parsed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parsed_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSFrameRaw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorProto.GPSFrameRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSFrameRaw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSFrameRaw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorProto.GPSFrameRaw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorProto.GPSFrameRaw)
    MergeFrom(*source);
  }
}

void GPSFrameRaw::MergeFrom(const GPSFrameRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorProto.GPSFrameRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parsed()->::SensorProto::GPSFrame::MergeFrom(from._internal_parsed());
    }
    if (cached_has_bits & 0x00000004u) {
      time_stamp_ = from.time_stamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GPSFrameRaw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorProto.GPSFrameRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFrameRaw::CopyFrom(const GPSFrameRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorProto.GPSFrameRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFrameRaw::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_parsed()) {
    if (!parsed_->IsInitialized()) return false;
  }
  return true;
}

void GPSFrameRaw::InternalSwap(GPSFrameRaw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPSFrameRaw, time_stamp_)
      + sizeof(GPSFrameRaw::time_stamp_)
      - PROTOBUF_FIELD_OFFSET(GPSFrameRaw, parsed_)>(
          reinterpret_cast<char*>(&parsed_),
          reinterpret_cast<char*>(&other->parsed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSFrameRaw::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SensorProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SensorProto::IMUFrame* Arena::CreateMaybeMessage< ::SensorProto::IMUFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorProto::IMUFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::SensorProto::GPSFrame* Arena::CreateMaybeMessage< ::SensorProto::GPSFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorProto::GPSFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::SensorProto::GPSFrameRaw* Arena::CreateMaybeMessage< ::SensorProto::GPSFrameRaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorProto::GPSFrameRaw >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
