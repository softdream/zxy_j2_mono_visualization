// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_data.proto

#include "meta_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_can_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CANFrame_can_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_can_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CANFrameRaw_can_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Box3D_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraMatrix_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CameraParam_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataDescriptor_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FreeSpacePoints_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lines_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionFrame_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleRaws_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacles_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OdometryFrame_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParsingSetting_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_meta_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SensorFrame_meta_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_meta_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_StructurePerception_meta_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSFrame_sensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPSFrameRaw_sensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMUFrame_sensor_2eproto;
namespace MetaData {
class Box3DResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box3DResult> _instance;
} _Box3DResult_default_instance_;
class SensorFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorFrame> _instance;
} _SensorFrame_default_instance_;
class StructurePerceptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StructurePerception> _instance;
} _StructurePerception_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data> _instance;
} _Data_default_instance_;
}  // namespace MetaData
static void InitDefaultsscc_info_Box3DResult_meta_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MetaData::_Box3DResult_default_instance_;
    new (ptr) ::MetaData::Box3DResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Box3DResult_meta_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Box3DResult_meta_5fdata_2eproto}, {
      &scc_info_Box3D_common_2eproto.base,}};

static void InitDefaultsscc_info_Data_meta_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MetaData::_Data_default_instance_;
    new (ptr) ::MetaData::Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Data_meta_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Data_meta_5fdata_2eproto}, {
      &scc_info_Image_common_2eproto.base,
      &scc_info_DataDescriptor_common_2eproto.base,
      &scc_info_CameraParam_common_2eproto.base,
      &scc_info_CameraMatrix_common_2eproto.base,
      &scc_info_SensorFrame_meta_5fdata_2eproto.base,
      &scc_info_MotionFrame_common_2eproto.base,
      &scc_info_OdometryFrame_common_2eproto.base,
      &scc_info_StructurePerception_meta_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_SensorFrame_meta_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MetaData::_SensorFrame_default_instance_;
    new (ptr) ::MetaData::SensorFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SensorFrame_meta_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SensorFrame_meta_5fdata_2eproto}, {
      &scc_info_CANFrameRaw_can_2eproto.base,
      &scc_info_CANFrame_can_2eproto.base,
      &scc_info_IMUFrame_sensor_2eproto.base,
      &scc_info_GPSFrameRaw_sensor_2eproto.base,
      &scc_info_GPSFrame_sensor_2eproto.base,}};

static void InitDefaultsscc_info_StructurePerception_meta_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MetaData::_StructurePerception_default_instance_;
    new (ptr) ::MetaData::StructurePerception();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_StructurePerception_meta_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_StructurePerception_meta_5fdata_2eproto}, {
      &scc_info_ObstacleRaws_common_2eproto.base,
      &scc_info_Obstacles_common_2eproto.base,
      &scc_info_Lines_common_2eproto.base,
      &scc_info_Image_common_2eproto.base,
      &scc_info_FreeSpacePoints_common_2eproto.base,
      &scc_info_ParsingSetting_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_meta_5fdata_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_meta_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_meta_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_meta_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::MetaData::Box3DResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Box3DResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetaData::Box3DResult, id_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Box3DResult, box_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, can_frames_raw_),
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, can_frames_),
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, imu_frames_raw_),
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, imu_frame_),
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, imu_offset_),
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, gps_frames_raw_),
  PROTOBUF_FIELD_OFFSET(::MetaData::SensorFrame, gps_frame_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MetaData::StructurePerception, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetaData::StructurePerception, obstacles_raws_),
  PROTOBUF_FIELD_OFFSET(::MetaData::StructurePerception, obstacles_),
  PROTOBUF_FIELD_OFFSET(::MetaData::StructurePerception, lines_),
  PROTOBUF_FIELD_OFFSET(::MetaData::StructurePerception, parsing_),
  PROTOBUF_FIELD_OFFSET(::MetaData::StructurePerception, depth_),
  PROTOBUF_FIELD_OFFSET(::MetaData::StructurePerception, scan_pts_),
  PROTOBUF_FIELD_OFFSET(::MetaData::StructurePerception, parsing_settings_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, version_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, frame_id_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, image_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, data_descriptor_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, camera_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, camera_default_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, camera_matrix_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, sensor_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, motion_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, odometry_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, structure_perception_),
  PROTOBUF_FIELD_OFFSET(::MetaData::Data, lane_camera_matrix_),
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::MetaData::Box3DResult)},
  { 9, 21, sizeof(::MetaData::SensorFrame)},
  { 28, -1, sizeof(::MetaData::StructurePerception)},
  { 40, 57, sizeof(::MetaData::Data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MetaData::_Box3DResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MetaData::_SensorFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MetaData::_StructurePerception_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MetaData::_Data_default_instance_),
};

const char descriptor_table_protodef_meta_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017meta_data.proto\022\010MetaData\032\014common.prot"
  "o\032\tcan.proto\032\014sensor.proto\":\n\013Box3DResul"
  "t\022\n\n\002id\030\001 \002(\005\022\037\n\003box\030\002 \002(\0132\022.CommonProto"
  ".Box3D\"\304\002\n\013SensorFrame\022-\n\016can_frames_raw"
  "\030\001 \003(\0132\025.CANProto.CANFrameRaw\022&\n\ncan_fra"
  "mes\030\002 \001(\0132\022.CANProto.CANFrame\022-\n\016imu_fra"
  "mes_raw\030\013 \003(\0132\025.SensorProto.IMUFrame\022(\n\t"
  "imu_frame\030\014 \001(\0132\025.SensorProto.IMUFrame\022)"
  "\n\nimu_offset\030\r \001(\0132\025.SensorProto.IMUFram"
  "e\0220\n\016gps_frames_raw\030\025 \003(\0132\030.SensorProto."
  "GPSFrameRaw\022(\n\tgps_frame\030\026 \001(\0132\025.SensorP"
  "roto.GPSFrame\"\305\002\n\023StructurePerception\0221\n"
  "\016obstacles_raws\030\001 \003(\0132\031.CommonProto.Obst"
  "acleRaws\022)\n\tobstacles\030\n \003(\0132\026.CommonProt"
  "o.Obstacles\022!\n\005lines\030\013 \003(\0132\022.CommonProto"
  ".Lines\022#\n\007parsing\030\024 \003(\0132\022.CommonProto.Im"
  "age\022!\n\005depth\030\025 \003(\0132\022.CommonProto.Image\022."
  "\n\010scan_pts\030\036 \003(\0132\034.CommonProto.FreeSpace"
  "Points\0225\n\020parsing_settings\030( \003(\0132\033.Commo"
  "nProto.ParsingSetting\"\204\004\n\004Data\022\017\n\007versio"
  "n\030\001 \002(\005\022\020\n\010frame_id\030\002 \002(\005\022!\n\005image\030\003 \003(\013"
  "2\022.CommonProto.Image\0224\n\017data_descriptor\030"
  "\004 \003(\0132\033.CommonProto.DataDescriptor\022(\n\006ca"
  "mera\030\n \003(\0132\030.CommonProto.CameraParam\0220\n\016"
  "camera_default\030\013 \003(\0132\030.CommonProto.Camer"
  "aParam\0220\n\rcamera_matrix\030\014 \003(\0132\031.CommonPr"
  "oto.CameraMatrix\022%\n\006sensor\030\024 \001(\0132\025.MetaD"
  "ata.SensorFrame\022(\n\006motion\030\025 \001(\0132\030.Common"
  "Proto.MotionFrame\022,\n\010odometry\030\026 \001(\0132\032.Co"
  "mmonProto.OdometryFrame\022;\n\024structure_per"
  "ception\030\036 \001(\0132\035.MetaData.StructurePercep"
  "tion\0226\n\022lane_camera_matrix\030\240\001 \003(\0132\031.Comm"
  "onProto.CameraMatrix"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_meta_5fdata_2eproto_deps[3] = {
  &::descriptor_table_can_2eproto,
  &::descriptor_table_common_2eproto,
  &::descriptor_table_sensor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_meta_5fdata_2eproto_sccs[4] = {
  &scc_info_Box3DResult_meta_5fdata_2eproto.base,
  &scc_info_Data_meta_5fdata_2eproto.base,
  &scc_info_SensorFrame_meta_5fdata_2eproto.base,
  &scc_info_StructurePerception_meta_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_meta_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_meta_5fdata_2eproto = {
  false, false, descriptor_table_protodef_meta_5fdata_2eproto, "meta_data.proto", 1300,
  &descriptor_table_meta_5fdata_2eproto_once, descriptor_table_meta_5fdata_2eproto_sccs, descriptor_table_meta_5fdata_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_meta_5fdata_2eproto::offsets,
  file_level_metadata_meta_5fdata_2eproto, 4, file_level_enum_descriptors_meta_5fdata_2eproto, file_level_service_descriptors_meta_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_meta_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_meta_5fdata_2eproto)), true);
namespace MetaData {

// ===================================================================

class Box3DResult::_Internal {
 public:
  using HasBits = decltype(std::declval<Box3DResult>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CommonProto::Box3D& box(const Box3DResult* msg);
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::CommonProto::Box3D&
Box3DResult::_Internal::box(const Box3DResult* msg) {
  return *msg->box_;
}
void Box3DResult::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Box3DResult::Box3DResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetaData.Box3DResult)
}
Box3DResult::Box3DResult(const Box3DResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_box()) {
    box_ = new ::CommonProto::Box3D(*from.box_);
  } else {
    box_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MetaData.Box3DResult)
}

void Box3DResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Box3DResult_meta_5fdata_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&box_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&box_)) + sizeof(id_));
}

Box3DResult::~Box3DResult() {
  // @@protoc_insertion_point(destructor:MetaData.Box3DResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box3DResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete box_;
}

void Box3DResult::ArenaDtor(void* object) {
  Box3DResult* _this = reinterpret_cast< Box3DResult* >(object);
  (void)_this;
}
void Box3DResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box3DResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box3DResult& Box3DResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box3DResult_meta_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Box3DResult::Clear() {
// @@protoc_insertion_point(message_clear_start:MetaData.Box3DResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(box_ != nullptr);
    box_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box3DResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CommonProto.Box3D box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box3DResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetaData.Box3DResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required .CommonProto.Box3D box = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::box(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetaData.Box3DResult)
  return target;
}

size_t Box3DResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MetaData.Box3DResult)
  size_t total_size = 0;

  if (_internal_has_box()) {
    // required .CommonProto.Box3D box = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t Box3DResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetaData.Box3DResult)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .CommonProto.Box3D box = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box3DResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetaData.Box3DResult)
  GOOGLE_DCHECK_NE(&from, this);
  const Box3DResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box3DResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetaData.Box3DResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetaData.Box3DResult)
    MergeFrom(*source);
  }
}

void Box3DResult::MergeFrom(const Box3DResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetaData.Box3DResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_box()->::CommonProto::Box3D::MergeFrom(from._internal_box());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Box3DResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetaData.Box3DResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box3DResult::CopyFrom(const Box3DResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetaData.Box3DResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3DResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_box()) {
    if (!box_->IsInitialized()) return false;
  }
  return true;
}

void Box3DResult::InternalSwap(Box3DResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box3DResult, id_)
      + sizeof(Box3DResult::id_)
      - PROTOBUF_FIELD_OFFSET(Box3DResult, box_)>(
          reinterpret_cast<char*>(&box_),
          reinterpret_cast<char*>(&other->box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box3DResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SensorFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorFrame>()._has_bits_);
  static const ::CANProto::CANFrame& can_frames(const SensorFrame* msg);
  static void set_has_can_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SensorProto::IMUFrame& imu_frame(const SensorFrame* msg);
  static void set_has_imu_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SensorProto::IMUFrame& imu_offset(const SensorFrame* msg);
  static void set_has_imu_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SensorProto::GPSFrame& gps_frame(const SensorFrame* msg);
  static void set_has_gps_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CANProto::CANFrame&
SensorFrame::_Internal::can_frames(const SensorFrame* msg) {
  return *msg->can_frames_;
}
const ::SensorProto::IMUFrame&
SensorFrame::_Internal::imu_frame(const SensorFrame* msg) {
  return *msg->imu_frame_;
}
const ::SensorProto::IMUFrame&
SensorFrame::_Internal::imu_offset(const SensorFrame* msg) {
  return *msg->imu_offset_;
}
const ::SensorProto::GPSFrame&
SensorFrame::_Internal::gps_frame(const SensorFrame* msg) {
  return *msg->gps_frame_;
}
void SensorFrame::clear_can_frames_raw() {
  can_frames_raw_.Clear();
}
void SensorFrame::clear_can_frames() {
  if (can_frames_ != nullptr) can_frames_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SensorFrame::clear_imu_frames_raw() {
  imu_frames_raw_.Clear();
}
void SensorFrame::clear_imu_frame() {
  if (imu_frame_ != nullptr) imu_frame_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SensorFrame::clear_imu_offset() {
  if (imu_offset_ != nullptr) imu_offset_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SensorFrame::clear_gps_frames_raw() {
  gps_frames_raw_.Clear();
}
void SensorFrame::clear_gps_frame() {
  if (gps_frame_ != nullptr) gps_frame_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SensorFrame::SensorFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  can_frames_raw_(arena),
  imu_frames_raw_(arena),
  gps_frames_raw_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetaData.SensorFrame)
}
SensorFrame::SensorFrame(const SensorFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      can_frames_raw_(from.can_frames_raw_),
      imu_frames_raw_(from.imu_frames_raw_),
      gps_frames_raw_(from.gps_frames_raw_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_can_frames()) {
    can_frames_ = new ::CANProto::CANFrame(*from.can_frames_);
  } else {
    can_frames_ = nullptr;
  }
  if (from._internal_has_imu_frame()) {
    imu_frame_ = new ::SensorProto::IMUFrame(*from.imu_frame_);
  } else {
    imu_frame_ = nullptr;
  }
  if (from._internal_has_imu_offset()) {
    imu_offset_ = new ::SensorProto::IMUFrame(*from.imu_offset_);
  } else {
    imu_offset_ = nullptr;
  }
  if (from._internal_has_gps_frame()) {
    gps_frame_ = new ::SensorProto::GPSFrame(*from.gps_frame_);
  } else {
    gps_frame_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MetaData.SensorFrame)
}

void SensorFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorFrame_meta_5fdata_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&can_frames_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gps_frame_) -
      reinterpret_cast<char*>(&can_frames_)) + sizeof(gps_frame_));
}

SensorFrame::~SensorFrame() {
  // @@protoc_insertion_point(destructor:MetaData.SensorFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete can_frames_;
  if (this != internal_default_instance()) delete imu_frame_;
  if (this != internal_default_instance()) delete imu_offset_;
  if (this != internal_default_instance()) delete gps_frame_;
}

void SensorFrame::ArenaDtor(void* object) {
  SensorFrame* _this = reinterpret_cast< SensorFrame* >(object);
  (void)_this;
}
void SensorFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorFrame& SensorFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorFrame_meta_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SensorFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:MetaData.SensorFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_frames_raw_.Clear();
  imu_frames_raw_.Clear();
  gps_frames_raw_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(can_frames_ != nullptr);
      can_frames_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(imu_frame_ != nullptr);
      imu_frame_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(imu_offset_ != nullptr);
      imu_offset_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gps_frame_ != nullptr);
      gps_frame_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_can_frames_raw(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CANProto.CANFrame can_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_frames(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imu_frames_raw(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .SensorProto.IMUFrame imu_frame = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SensorProto.IMUFrame imu_offset = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gps_frames_raw(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .SensorProto.GPSFrame gps_frame = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetaData.SensorFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_can_frames_raw_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_can_frames_raw(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CANProto.CANFrame can_frames = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::can_frames(this), target, stream);
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imu_frames_raw_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_imu_frames_raw(i), target, stream);
  }

  // optional .SensorProto.IMUFrame imu_frame = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::imu_frame(this), target, stream);
  }

  // optional .SensorProto.IMUFrame imu_offset = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::imu_offset(this), target, stream);
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gps_frames_raw_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_gps_frames_raw(i), target, stream);
  }

  // optional .SensorProto.GPSFrame gps_frame = 22;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::gps_frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetaData.SensorFrame)
  return target;
}

size_t SensorFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetaData.SensorFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
  total_size += 1UL * this->_internal_can_frames_raw_size();
  for (const auto& msg : this->can_frames_raw_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
  total_size += 1UL * this->_internal_imu_frames_raw_size();
  for (const auto& msg : this->imu_frames_raw_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
  total_size += 2UL * this->_internal_gps_frames_raw_size();
  for (const auto& msg : this->gps_frames_raw_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CANProto.CANFrame can_frames = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *can_frames_);
    }

    // optional .SensorProto.IMUFrame imu_frame = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imu_frame_);
    }

    // optional .SensorProto.IMUFrame imu_offset = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imu_offset_);
    }

    // optional .SensorProto.GPSFrame gps_frame = 22;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gps_frame_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetaData.SensorFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetaData.SensorFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetaData.SensorFrame)
    MergeFrom(*source);
  }
}

void SensorFrame::MergeFrom(const SensorFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetaData.SensorFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  can_frames_raw_.MergeFrom(from.can_frames_raw_);
  imu_frames_raw_.MergeFrom(from.imu_frames_raw_);
  gps_frames_raw_.MergeFrom(from.gps_frames_raw_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_can_frames()->::CANProto::CANFrame::MergeFrom(from._internal_can_frames());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_imu_frame()->::SensorProto::IMUFrame::MergeFrom(from._internal_imu_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_imu_offset()->::SensorProto::IMUFrame::MergeFrom(from._internal_imu_offset());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_gps_frame()->::SensorProto::GPSFrame::MergeFrom(from._internal_gps_frame());
    }
  }
}

void SensorFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetaData.SensorFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorFrame::CopyFrom(const SensorFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetaData.SensorFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorFrame::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(can_frames_raw_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(imu_frames_raw_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(gps_frames_raw_)) return false;
  if (_internal_has_can_frames()) {
    if (!can_frames_->IsInitialized()) return false;
  }
  if (_internal_has_imu_frame()) {
    if (!imu_frame_->IsInitialized()) return false;
  }
  if (_internal_has_imu_offset()) {
    if (!imu_offset_->IsInitialized()) return false;
  }
  if (_internal_has_gps_frame()) {
    if (!gps_frame_->IsInitialized()) return false;
  }
  return true;
}

void SensorFrame::InternalSwap(SensorFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  can_frames_raw_.InternalSwap(&other->can_frames_raw_);
  imu_frames_raw_.InternalSwap(&other->imu_frames_raw_);
  gps_frames_raw_.InternalSwap(&other->gps_frames_raw_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorFrame, gps_frame_)
      + sizeof(SensorFrame::gps_frame_)
      - PROTOBUF_FIELD_OFFSET(SensorFrame, can_frames_)>(
          reinterpret_cast<char*>(&can_frames_),
          reinterpret_cast<char*>(&other->can_frames_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StructurePerception::_Internal {
 public:
};

void StructurePerception::clear_obstacles_raws() {
  obstacles_raws_.Clear();
}
void StructurePerception::clear_obstacles() {
  obstacles_.Clear();
}
void StructurePerception::clear_lines() {
  lines_.Clear();
}
void StructurePerception::clear_parsing() {
  parsing_.Clear();
}
void StructurePerception::clear_depth() {
  depth_.Clear();
}
void StructurePerception::clear_scan_pts() {
  scan_pts_.Clear();
}
void StructurePerception::clear_parsing_settings() {
  parsing_settings_.Clear();
}
StructurePerception::StructurePerception(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  obstacles_raws_(arena),
  obstacles_(arena),
  lines_(arena),
  parsing_(arena),
  depth_(arena),
  scan_pts_(arena),
  parsing_settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetaData.StructurePerception)
}
StructurePerception::StructurePerception(const StructurePerception& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      obstacles_raws_(from.obstacles_raws_),
      obstacles_(from.obstacles_),
      lines_(from.lines_),
      parsing_(from.parsing_),
      depth_(from.depth_),
      scan_pts_(from.scan_pts_),
      parsing_settings_(from.parsing_settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MetaData.StructurePerception)
}

void StructurePerception::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StructurePerception_meta_5fdata_2eproto.base);
}

StructurePerception::~StructurePerception() {
  // @@protoc_insertion_point(destructor:MetaData.StructurePerception)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StructurePerception::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StructurePerception::ArenaDtor(void* object) {
  StructurePerception* _this = reinterpret_cast< StructurePerception* >(object);
  (void)_this;
}
void StructurePerception::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructurePerception::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StructurePerception& StructurePerception::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StructurePerception_meta_5fdata_2eproto.base);
  return *internal_default_instance();
}


void StructurePerception::Clear() {
// @@protoc_insertion_point(message_clear_start:MetaData.StructurePerception)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_raws_.Clear();
  obstacles_.Clear();
  lines_.Clear();
  parsing_.Clear();
  depth_.Clear();
  scan_pts_.Clear();
  parsing_settings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructurePerception::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles_raws(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Obstacles obstacles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Lines lines = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Image parsing = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_parsing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Image depth = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_depth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.FreeSpacePoints scan_pts = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_scan_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.ParsingSetting parsing_settings = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_parsing_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructurePerception::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetaData.StructurePerception)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacles_raws_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_obstacles_raws(i), target, stream);
  }

  // repeated .CommonProto.Obstacles obstacles = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_obstacles(i), target, stream);
  }

  // repeated .CommonProto.Lines lines = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_lines(i), target, stream);
  }

  // repeated .CommonProto.Image parsing = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parsing_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_parsing(i), target, stream);
  }

  // repeated .CommonProto.Image depth = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_depth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_depth(i), target, stream);
  }

  // repeated .CommonProto.FreeSpacePoints scan_pts = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scan_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_scan_pts(i), target, stream);
  }

  // repeated .CommonProto.ParsingSetting parsing_settings = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parsing_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_parsing_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetaData.StructurePerception)
  return target;
}

size_t StructurePerception::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetaData.StructurePerception)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
  total_size += 1UL * this->_internal_obstacles_raws_size();
  for (const auto& msg : this->obstacles_raws_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.Obstacles obstacles = 10;
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.Lines lines = 11;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.Image parsing = 20;
  total_size += 2UL * this->_internal_parsing_size();
  for (const auto& msg : this->parsing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.Image depth = 21;
  total_size += 2UL * this->_internal_depth_size();
  for (const auto& msg : this->depth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.FreeSpacePoints scan_pts = 30;
  total_size += 2UL * this->_internal_scan_pts_size();
  for (const auto& msg : this->scan_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.ParsingSetting parsing_settings = 40;
  total_size += 2UL * this->_internal_parsing_settings_size();
  for (const auto& msg : this->parsing_settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructurePerception::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetaData.StructurePerception)
  GOOGLE_DCHECK_NE(&from, this);
  const StructurePerception* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StructurePerception>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetaData.StructurePerception)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetaData.StructurePerception)
    MergeFrom(*source);
  }
}

void StructurePerception::MergeFrom(const StructurePerception& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetaData.StructurePerception)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_raws_.MergeFrom(from.obstacles_raws_);
  obstacles_.MergeFrom(from.obstacles_);
  lines_.MergeFrom(from.lines_);
  parsing_.MergeFrom(from.parsing_);
  depth_.MergeFrom(from.depth_);
  scan_pts_.MergeFrom(from.scan_pts_);
  parsing_settings_.MergeFrom(from.parsing_settings_);
}

void StructurePerception::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetaData.StructurePerception)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructurePerception::CopyFrom(const StructurePerception& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetaData.StructurePerception)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructurePerception::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obstacles_raws_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obstacles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(lines_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(parsing_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(depth_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(scan_pts_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(parsing_settings_)) return false;
  return true;
}

void StructurePerception::InternalSwap(StructurePerception* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  obstacles_raws_.InternalSwap(&other->obstacles_raws_);
  obstacles_.InternalSwap(&other->obstacles_);
  lines_.InternalSwap(&other->lines_);
  parsing_.InternalSwap(&other->parsing_);
  depth_.InternalSwap(&other->depth_);
  scan_pts_.InternalSwap(&other->scan_pts_);
  parsing_settings_.InternalSwap(&other->parsing_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructurePerception::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Data::_Internal {
 public:
  using HasBits = decltype(std::declval<Data>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::MetaData::SensorFrame& sensor(const Data* msg);
  static void set_has_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CommonProto::MotionFrame& motion(const Data* msg);
  static void set_has_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CommonProto::OdometryFrame& odometry(const Data* msg);
  static void set_has_odometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::MetaData::StructurePerception& structure_perception(const Data* msg);
  static void set_has_structure_perception(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000030) ^ 0x00000030) != 0;
  }
};

const ::MetaData::SensorFrame&
Data::_Internal::sensor(const Data* msg) {
  return *msg->sensor_;
}
const ::CommonProto::MotionFrame&
Data::_Internal::motion(const Data* msg) {
  return *msg->motion_;
}
const ::CommonProto::OdometryFrame&
Data::_Internal::odometry(const Data* msg) {
  return *msg->odometry_;
}
const ::MetaData::StructurePerception&
Data::_Internal::structure_perception(const Data* msg) {
  return *msg->structure_perception_;
}
void Data::clear_image() {
  image_.Clear();
}
void Data::clear_data_descriptor() {
  data_descriptor_.Clear();
}
void Data::clear_camera() {
  camera_.Clear();
}
void Data::clear_camera_default() {
  camera_default_.Clear();
}
void Data::clear_camera_matrix() {
  camera_matrix_.Clear();
}
void Data::clear_motion() {
  if (motion_ != nullptr) motion_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Data::clear_odometry() {
  if (odometry_ != nullptr) odometry_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Data::clear_lane_camera_matrix() {
  lane_camera_matrix_.Clear();
}
Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_(arena),
  data_descriptor_(arena),
  camera_(arena),
  camera_default_(arena),
  camera_matrix_(arena),
  lane_camera_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetaData.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      image_(from.image_),
      data_descriptor_(from.data_descriptor_),
      camera_(from.camera_),
      camera_default_(from.camera_default_),
      camera_matrix_(from.camera_matrix_),
      lane_camera_matrix_(from.lane_camera_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor()) {
    sensor_ = new ::MetaData::SensorFrame(*from.sensor_);
  } else {
    sensor_ = nullptr;
  }
  if (from._internal_has_motion()) {
    motion_ = new ::CommonProto::MotionFrame(*from.motion_);
  } else {
    motion_ = nullptr;
  }
  if (from._internal_has_odometry()) {
    odometry_ = new ::CommonProto::OdometryFrame(*from.odometry_);
  } else {
    odometry_ = nullptr;
  }
  if (from._internal_has_structure_perception()) {
    structure_perception_ = new ::MetaData::StructurePerception(*from.structure_perception_);
  } else {
    structure_perception_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:MetaData.Data)
}

void Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Data_meta_5fdata_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(frame_id_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:MetaData.Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sensor_;
  if (this != internal_default_instance()) delete motion_;
  if (this != internal_default_instance()) delete odometry_;
  if (this != internal_default_instance()) delete structure_perception_;
}

void Data::ArenaDtor(void* object) {
  Data* _this = reinterpret_cast< Data* >(object);
  (void)_this;
}
void Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data& Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_meta_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:MetaData.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.Clear();
  data_descriptor_.Clear();
  camera_.Clear();
  camera_default_.Clear();
  camera_matrix_.Clear();
  lane_camera_matrix_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_ != nullptr);
      sensor_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(motion_ != nullptr);
      motion_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(odometry_ != nullptr);
      odometry_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(structure_perception_ != nullptr);
      structure_perception_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(frame_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Image image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.DataDescriptor data_descriptor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_descriptor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.CameraParam camera = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.CameraParam camera_default = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_default(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.CameraMatrix camera_matrix = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .MetaData.SensorFrame sensor = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.MotionFrame motion = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.OdometryFrame odometry = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MetaData.StructurePerception structure_perception = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_structure_perception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.CameraMatrix lane_camera_matrix = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lane_camera_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1282>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetaData.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // required int32 frame_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frame_id(), target);
  }

  // repeated .CommonProto.Image image = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_image(i), target, stream);
  }

  // repeated .CommonProto.DataDescriptor data_descriptor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_descriptor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_data_descriptor(i), target, stream);
  }

  // repeated .CommonProto.CameraParam camera = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_camera(i), target, stream);
  }

  // repeated .CommonProto.CameraParam camera_default = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_default_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_camera_default(i), target, stream);
  }

  // repeated .CommonProto.CameraMatrix camera_matrix = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_camera_matrix(i), target, stream);
  }

  // optional .MetaData.SensorFrame sensor = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::sensor(this), target, stream);
  }

  // optional .CommonProto.MotionFrame motion = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::motion(this), target, stream);
  }

  // optional .CommonProto.OdometryFrame odometry = 22;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::odometry(this), target, stream);
  }

  // optional .MetaData.StructurePerception structure_perception = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::structure_perception(this), target, stream);
  }

  // repeated .CommonProto.CameraMatrix lane_camera_matrix = 160;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_camera_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(160, this->_internal_lane_camera_matrix(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetaData.Data)
  return target;
}

size_t Data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MetaData.Data)
  size_t total_size = 0;

  if (_internal_has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (_internal_has_frame_id()) {
    // required int32 frame_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  return total_size;
}
size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetaData.Data)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());

    // required int32 frame_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.Image image = 3;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.DataDescriptor data_descriptor = 4;
  total_size += 1UL * this->_internal_data_descriptor_size();
  for (const auto& msg : this->data_descriptor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.CameraParam camera = 10;
  total_size += 1UL * this->_internal_camera_size();
  for (const auto& msg : this->camera_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.CameraParam camera_default = 11;
  total_size += 1UL * this->_internal_camera_default_size();
  for (const auto& msg : this->camera_default_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.CameraMatrix camera_matrix = 12;
  total_size += 1UL * this->_internal_camera_matrix_size();
  for (const auto& msg : this->camera_matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.CameraMatrix lane_camera_matrix = 160;
  total_size += 2UL * this->_internal_lane_camera_matrix_size();
  for (const auto& msg : this->lane_camera_matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .MetaData.SensorFrame sensor = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_);
    }

    // optional .CommonProto.MotionFrame motion = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *motion_);
    }

    // optional .CommonProto.OdometryFrame odometry = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *odometry_);
    }

    // optional .MetaData.StructurePerception structure_perception = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *structure_perception_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetaData.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetaData.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetaData.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetaData.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_.MergeFrom(from.image_);
  data_descriptor_.MergeFrom(from.data_descriptor_);
  camera_.MergeFrom(from.camera_);
  camera_default_.MergeFrom(from.camera_default_);
  camera_matrix_.MergeFrom(from.camera_matrix_);
  lane_camera_matrix_.MergeFrom(from.lane_camera_matrix_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor()->::MetaData::SensorFrame::MergeFrom(from._internal_sensor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_motion()->::CommonProto::MotionFrame::MergeFrom(from._internal_motion());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_odometry()->::CommonProto::OdometryFrame::MergeFrom(from._internal_odometry());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_structure_perception()->::MetaData::StructurePerception::MergeFrom(from._internal_structure_perception());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_id_ = from.frame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetaData.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetaData.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(image_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(data_descriptor_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(camera_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(camera_default_)) return false;
  if (_internal_has_sensor()) {
    if (!sensor_->IsInitialized()) return false;
  }
  if (_internal_has_motion()) {
    if (!motion_->IsInitialized()) return false;
  }
  if (_internal_has_odometry()) {
    if (!odometry_->IsInitialized()) return false;
  }
  if (_internal_has_structure_perception()) {
    if (!structure_perception_->IsInitialized()) return false;
  }
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_.InternalSwap(&other->image_);
  data_descriptor_.InternalSwap(&other->data_descriptor_);
  camera_.InternalSwap(&other->camera_);
  camera_default_.InternalSwap(&other->camera_default_);
  camera_matrix_.InternalSwap(&other->camera_matrix_);
  lane_camera_matrix_.InternalSwap(&other->lane_camera_matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, frame_id_)
      + sizeof(Data::frame_id_)
      - PROTOBUF_FIELD_OFFSET(Data, sensor_)>(
          reinterpret_cast<char*>(&sensor_),
          reinterpret_cast<char*>(&other->sensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MetaData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MetaData::Box3DResult* Arena::CreateMaybeMessage< ::MetaData::Box3DResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetaData::Box3DResult >(arena);
}
template<> PROTOBUF_NOINLINE ::MetaData::SensorFrame* Arena::CreateMaybeMessage< ::MetaData::SensorFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetaData::SensorFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::MetaData::StructurePerception* Arena::CreateMaybeMessage< ::MetaData::StructurePerception >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetaData::StructurePerception >(arena);
}
template<> PROTOBUF_NOINLINE ::MetaData::Data* Arena::CreateMaybeMessage< ::MetaData::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetaData::Data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
