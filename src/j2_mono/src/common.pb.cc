// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Box3D_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraMatrix_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Contour_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistortParam_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFailStatus_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImageSpaceInfo_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Line_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Obstacle_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleRaw_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedData_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackingFeatureMap_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VCSParam_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Velocity_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorldSpaceInfo_common_2eproto;
namespace CommonProto {
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class PointIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointI> _instance;
} _PointI_default_instance_;
class ContourDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contour> _instance;
} _Contour_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect> _instance;
} _Rect_default_instance_;
class OBBox2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBBox2D> _instance;
} _OBBox2D_default_instance_;
class Box3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box3D> _instance;
} _Box3D_default_instance_;
class KeyPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyPoint> _instance;
} _KeyPoint_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category> _instance;
} _Category_default_instance_;
class WorkConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkCondition> _instance;
} _WorkCondition_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class VelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Velocity> _instance;
} _Velocity_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Line> _instance;
} _Line_default_instance_;
class LinesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lines> _instance;
} _Lines_default_instance_;
class WorldSpaceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldSpaceInfo> _instance;
} _WorldSpaceInfo_default_instance_;
class ImageSpaceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageSpaceInfo> _instance;
} _ImageSpaceInfo_default_instance_;
class TrackingFeatureMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackingFeatureMap> _instance;
} _TrackingFeatureMap_default_instance_;
class ObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacle> _instance;
} _Obstacle_default_instance_;
class ObstaclesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacles> _instance;
} _Obstacles_default_instance_;
class FeatureMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureMap> _instance;
} _FeatureMap_default_instance_;
class ObstacleRawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleRaw> _instance;
} _ObstacleRaw_default_instance_;
class ObstacleRawsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleRaws> _instance;
} _ObstacleRaws_default_instance_;
class FreeSpacePointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreeSpacePoints> _instance;
} _FreeSpacePoints_default_instance_;
class CameraMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraMatrix> _instance;
} _CameraMatrix_default_instance_;
class DistortParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistortParam> _instance;
} _DistortParam_default_instance_;
class VCSParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VCSParam> _instance;
} _VCSParam_default_instance_;
class CameraParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraParam> _instance;
} _CameraParam_default_instance_;
class MotionFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionFrame> _instance;
} _MotionFrame_default_instance_;
class OdometryFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdometryFrame> _instance;
} _OdometryFrame_default_instance_;
class SerializedDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializedData> _instance;
} _SerializedData_default_instance_;
class DataDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataDescriptor> _instance;
} _DataDescriptor_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class ParsingSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParsingSetting> _instance;
} _ParsingSetting_default_instance_;
class ImageFailStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageFailStatus> _instance;
} _ImageFailStatus_default_instance_;
class ImageFailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageFail> _instance;
} _ImageFail_default_instance_;
}  // namespace CommonProto
static void InitDefaultsscc_info_Box3D_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Box3D_default_instance_;
    new (ptr) ::CommonProto::Box3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Box3D_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Box3D_common_2eproto}, {
      &scc_info_Point_common_2eproto.base,}};

static void InitDefaultsscc_info_CameraMatrix_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_CameraMatrix_default_instance_;
    new (ptr) ::CommonProto::CameraMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraMatrix_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraMatrix_common_2eproto}, {}};

static void InitDefaultsscc_info_CameraParam_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_CameraParam_default_instance_;
    new (ptr) ::CommonProto::CameraParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CameraParam_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CameraParam_common_2eproto}, {
      &scc_info_DistortParam_common_2eproto.base,
      &scc_info_VCSParam_common_2eproto.base,
      &scc_info_CameraMatrix_common_2eproto.base,}};

static void InitDefaultsscc_info_Category_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Category_default_instance_;
    new (ptr) ::CommonProto::Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Category_common_2eproto}, {}};

static void InitDefaultsscc_info_Color_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Color_default_instance_;
    new (ptr) ::CommonProto::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Color_common_2eproto}, {}};

static void InitDefaultsscc_info_Contour_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Contour_default_instance_;
    new (ptr) ::CommonProto::Contour();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Contour_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Contour_common_2eproto}, {
      &scc_info_Point_common_2eproto.base,}};

static void InitDefaultsscc_info_DataDescriptor_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_DataDescriptor_default_instance_;
    new (ptr) ::CommonProto::DataDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataDescriptor_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataDescriptor_common_2eproto}, {
      &scc_info_SerializedData_common_2eproto.base,}};

static void InitDefaultsscc_info_DistortParam_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_DistortParam_default_instance_;
    new (ptr) ::CommonProto::DistortParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistortParam_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DistortParam_common_2eproto}, {}};

static void InitDefaultsscc_info_FeatureMap_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_FeatureMap_default_instance_;
    new (ptr) ::CommonProto::FeatureMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureMap_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeatureMap_common_2eproto}, {}};

static void InitDefaultsscc_info_FreeSpacePoints_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_FreeSpacePoints_default_instance_;
    new (ptr) ::CommonProto::FreeSpacePoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FreeSpacePoints_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FreeSpacePoints_common_2eproto}, {
      &scc_info_Point_common_2eproto.base,}};

static void InitDefaultsscc_info_Image_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Image_default_instance_;
    new (ptr) ::CommonProto::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Image_common_2eproto}, {}};

static void InitDefaultsscc_info_ImageFail_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_ImageFail_default_instance_;
    new (ptr) ::CommonProto::ImageFail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFail_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageFail_common_2eproto}, {
      &scc_info_ImageFailStatus_common_2eproto.base,}};

static void InitDefaultsscc_info_ImageFailStatus_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_ImageFailStatus_default_instance_;
    new (ptr) ::CommonProto::ImageFailStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFailStatus_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageFailStatus_common_2eproto}, {
      &scc_info_Polygon_common_2eproto.base,}};

static void InitDefaultsscc_info_ImageSpaceInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_ImageSpaceInfo_default_instance_;
    new (ptr) ::CommonProto::ImageSpaceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImageSpaceInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ImageSpaceInfo_common_2eproto}, {
      &scc_info_Rect_common_2eproto.base,
      &scc_info_Box3D_common_2eproto.base,
      &scc_info_Polygon_common_2eproto.base,}};

static void InitDefaultsscc_info_KeyPoint_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_KeyPoint_default_instance_;
    new (ptr) ::CommonProto::KeyPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyPoint_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyPoint_common_2eproto}, {
      &scc_info_Point_common_2eproto.base,}};

static void InitDefaultsscc_info_Line_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Line_default_instance_;
    new (ptr) ::CommonProto::Line();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Line_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Line_common_2eproto}, {
      &scc_info_Point_common_2eproto.base,
      &scc_info_Contour_common_2eproto.base,}};

static void InitDefaultsscc_info_Lines_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Lines_default_instance_;
    new (ptr) ::CommonProto::Lines();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lines_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Lines_common_2eproto}, {
      &scc_info_Line_common_2eproto.base,}};

static void InitDefaultsscc_info_MotionFrame_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_MotionFrame_default_instance_;
    new (ptr) ::CommonProto::MotionFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionFrame_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MotionFrame_common_2eproto}, {}};

static void InitDefaultsscc_info_OBBox2D_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_OBBox2D_default_instance_;
    new (ptr) ::CommonProto::OBBox2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OBBox2D_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OBBox2D_common_2eproto}, {
      &scc_info_Point_common_2eproto.base,}};

static void InitDefaultsscc_info_Obstacle_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Obstacle_default_instance_;
    new (ptr) ::CommonProto::Obstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Obstacle_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Obstacle_common_2eproto}, {
      &scc_info_ImageSpaceInfo_common_2eproto.base,
      &scc_info_WorldSpaceInfo_common_2eproto.base,
      &scc_info_TrackingFeatureMap_common_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleRaw_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_ObstacleRaw_default_instance_;
    new (ptr) ::CommonProto::ObstacleRaw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleRaw_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleRaw_common_2eproto}, {
      &scc_info_Rect_common_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleRaws_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_ObstacleRaws_default_instance_;
    new (ptr) ::CommonProto::ObstacleRaws();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleRaws_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleRaws_common_2eproto}, {
      &scc_info_ObstacleRaw_common_2eproto.base,}};

static void InitDefaultsscc_info_Obstacles_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Obstacles_default_instance_;
    new (ptr) ::CommonProto::Obstacles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacles_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Obstacles_common_2eproto}, {
      &scc_info_Obstacle_common_2eproto.base,}};

static void InitDefaultsscc_info_OdometryFrame_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_OdometryFrame_default_instance_;
    new (ptr) ::CommonProto::OdometryFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OdometryFrame_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OdometryFrame_common_2eproto}, {}};

static void InitDefaultsscc_info_ParsingSetting_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_ParsingSetting_default_instance_;
    new (ptr) ::CommonProto::ParsingSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParsingSetting_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParsingSetting_common_2eproto}, {
      &scc_info_Color_common_2eproto.base,}};

static void InitDefaultsscc_info_Point_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Point_default_instance_;
    new (ptr) ::CommonProto::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_common_2eproto}, {}};

static void InitDefaultsscc_info_PointI_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_PointI_default_instance_;
    new (ptr) ::CommonProto::PointI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointI_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointI_common_2eproto}, {}};

static void InitDefaultsscc_info_Polygon_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Polygon_default_instance_;
    new (ptr) ::CommonProto::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polygon_common_2eproto}, {
      &scc_info_Point_common_2eproto.base,}};

static void InitDefaultsscc_info_Rect_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Rect_default_instance_;
    new (ptr) ::CommonProto::Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rect_common_2eproto}, {}};

static void InitDefaultsscc_info_SerializedData_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_SerializedData_default_instance_;
    new (ptr) ::CommonProto::SerializedData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SerializedData_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SerializedData_common_2eproto}, {}};

static void InitDefaultsscc_info_TrackingFeatureMap_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_TrackingFeatureMap_default_instance_;
    new (ptr) ::CommonProto::TrackingFeatureMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackingFeatureMap_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrackingFeatureMap_common_2eproto}, {}};

static void InitDefaultsscc_info_VCSParam_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_VCSParam_default_instance_;
    new (ptr) ::CommonProto::VCSParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VCSParam_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VCSParam_common_2eproto}, {}};

static void InitDefaultsscc_info_Velocity_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_Velocity_default_instance_;
    new (ptr) ::CommonProto::Velocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Velocity_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Velocity_common_2eproto}, {}};

static void InitDefaultsscc_info_WorkCondition_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_WorkCondition_default_instance_;
    new (ptr) ::CommonProto::WorkCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkCondition_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkCondition_common_2eproto}, {
      &scc_info_Category_common_2eproto.base,}};

static void InitDefaultsscc_info_WorldSpaceInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CommonProto::_WorldSpaceInfo_default_instance_;
    new (ptr) ::CommonProto::WorldSpaceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorldSpaceInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WorldSpaceInfo_common_2eproto}, {
      &scc_info_Velocity_common_2eproto.base,
      &scc_info_Polygon_common_2eproto.base,
      &scc_info_Point_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[28];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CommonProto::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Point, x_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Point, y_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Point, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CommonProto::PointI, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::PointI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::PointI, x_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::PointI, y_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::PointI, z_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Contour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Contour, pts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Polygon, pts_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Rect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Rect, left_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Rect, top_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Rect, right_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Rect, bottom_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CommonProto::OBBox2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OBBox2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::OBBox2D, corner_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OBBox2D, axes_pts_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OBBox2D, size_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, lower_lt_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, lower_lb_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, lower_rb_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, lower_rt_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, upper_lt_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, upper_lb_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, upper_rb_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, upper_rt_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Box3D, conf_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CommonProto::KeyPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::KeyPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::KeyPoint, pt_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::KeyPoint, type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::KeyPoint, conf_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Category, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Category, property_type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Category, property_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Category, property_name_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Category, property_conf_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorkCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorkCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorkCondition, category_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorkCondition, frame_id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorkCondition, cam_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, width_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, height_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, channel_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, send_mode_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, format_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, index_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, count_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, depth_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, align_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Image, image_counter_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Velocity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Velocity, vx_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Velocity, vy_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Velocity, vz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, life_time_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, coeffs_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, end_points_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, source_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, contours_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, dist_to_front_wheel_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, width_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, type_sibling_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, conf_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Line, sigma_coeffs_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Lines, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Lines, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Lines, cam_id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Lines, lines_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, yaw_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, vel_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, length_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, width_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, height_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, poly_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, position_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, traversable_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, hmw_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, ttc_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, curr_lane_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, position_obs_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, vel_abs_world_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, sigma_yaw_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, sigma_vel_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, sigma_width_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, sigma_height_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, sigma_position_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, sigma_length_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::WorldSpaceInfo, conf_yaw_),
  5,
  0,
  6,
  7,
  8,
  1,
  2,
  9,
  10,
  11,
  12,
  3,
  4,
  14,
  ~0u,
  15,
  16,
  ~0u,
  17,
  13,
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, rect_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, box_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, poly_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, sigma_width_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, sigma_height_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, sigma_x_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageSpaceInfo, sigma_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CommonProto::TrackingFeatureMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::TrackingFeatureMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::TrackingFeatureMap, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, conf_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, life_time_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, age_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, img_info_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, world_info_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, property_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, property_name_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, property_type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, property_conf_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacle, tracking_fmap_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacles, cam_id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacles, obstacle_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Obstacles, conf_scale_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CommonProto::FeatureMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::FeatureMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::FeatureMap, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, rect_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, conf_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, model_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, property_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, property_name_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, property_type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaw, property_conf_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaws, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaws, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaws, cam_id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaws, obstacle_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ObstacleRaws, conf_scale_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CommonProto::FreeSpacePoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::FreeSpacePoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::FreeSpacePoints, property_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::FreeSpacePoints, cam_id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::FreeSpacePoints, pts_vcs_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::FreeSpacePoints, pts_img_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraMatrix, mat_gnd2img_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraMatrix, mat_img2gnd_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraMatrix, mat_vcsgnd2img_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraMatrix, mat_img2vcsgnd_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraMatrix, mat_local2img_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraMatrix, mat_img2local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommonProto::DistortParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::DistortParam, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommonProto::VCSParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::VCSParam, rotation_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::VCSParam, translation_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, focal_u_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, focal_v_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, center_u_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, center_v_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, camera_x_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, camera_y_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, camera_z_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, pitch_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, yaw_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, roll_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, fov_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, version_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, cali_status_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, distort_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, vcs_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, mat_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::CameraParam, vendor_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CommonProto::MotionFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::MotionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::MotionFrame, speed_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::MotionFrame, acc_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::MotionFrame, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::MotionFrame, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::MotionFrame, turning_radius_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::MotionFrame, is_stable_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CommonProto::OdometryFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OdometryFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::OdometryFrame, x_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OdometryFrame, y_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OdometryFrame, yaw_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OdometryFrame, speed_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OdometryFrame, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::OdometryFrame, time_stamp_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::CommonProto::SerializedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::SerializedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::SerializedData, type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::SerializedData, proto_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::SerializedData, channel_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::SerializedData, with_data_field_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CommonProto::DataDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::DataDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::DataDescriptor, type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::DataDescriptor, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CommonProto::Color, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::Color, b_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Color, g_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::Color, r_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CommonProto::ParsingSetting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ParsingSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::ParsingSetting, parsing_type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ParsingSetting, parsing_channels_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ParsingSetting, channel_labels_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ParsingSetting, channel_colors_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ParsingSetting, freespace_channels_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ParsingSetting, boundspace_channels_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFailStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFailStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFailStatus, fail_type_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFailStatus, score_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFailStatus, level_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFailStatus, regions_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFail, cam_id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFail, frame_id_),
  PROTOBUF_FIELD_OFFSET(::CommonProto::ImageFail, fail_status_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CommonProto::Point)},
  { 11, 19, sizeof(::CommonProto::PointI)},
  { 22, -1, sizeof(::CommonProto::Contour)},
  { 28, -1, sizeof(::CommonProto::Polygon)},
  { 34, 43, sizeof(::CommonProto::Rect)},
  { 47, 55, sizeof(::CommonProto::OBBox2D)},
  { 58, 72, sizeof(::CommonProto::Box3D)},
  { 81, 89, sizeof(::CommonProto::KeyPoint)},
  { 92, 101, sizeof(::CommonProto::Category)},
  { 105, 113, sizeof(::CommonProto::WorkCondition)},
  { 116, 132, sizeof(::CommonProto::Image)},
  { 143, 151, sizeof(::CommonProto::Velocity)},
  { 154, 171, sizeof(::CommonProto::Line)},
  { 183, 190, sizeof(::CommonProto::Lines)},
  { 192, 217, sizeof(::CommonProto::WorldSpaceInfo)},
  { 237, 249, sizeof(::CommonProto::ImageSpaceInfo)},
  { 256, 262, sizeof(::CommonProto::TrackingFeatureMap)},
  { 263, 280, sizeof(::CommonProto::Obstacle)},
  { 292, 300, sizeof(::CommonProto::Obstacles)},
  { 303, 309, sizeof(::CommonProto::FeatureMap)},
  { 310, 322, sizeof(::CommonProto::ObstacleRaw)},
  { 329, 337, sizeof(::CommonProto::ObstacleRaws)},
  { 340, 349, sizeof(::CommonProto::FreeSpacePoints)},
  { 353, -1, sizeof(::CommonProto::CameraMatrix)},
  { 364, -1, sizeof(::CommonProto::DistortParam)},
  { 370, -1, sizeof(::CommonProto::VCSParam)},
  { 377, 400, sizeof(::CommonProto::CameraParam)},
  { 418, 429, sizeof(::CommonProto::MotionFrame)},
  { 435, 446, sizeof(::CommonProto::OdometryFrame)},
  { 452, 461, sizeof(::CommonProto::SerializedData)},
  { 465, 472, sizeof(::CommonProto::DataDescriptor)},
  { 474, 482, sizeof(::CommonProto::Color)},
  { 485, 496, sizeof(::CommonProto::ParsingSetting)},
  { 502, 511, sizeof(::CommonProto::ImageFailStatus)},
  { 515, 523, sizeof(::CommonProto::ImageFail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_PointI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Contour_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_OBBox2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Box3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_KeyPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_WorkCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Line_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Lines_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_WorldSpaceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_ImageSpaceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_TrackingFeatureMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Obstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Obstacles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_FeatureMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_ObstacleRaw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_ObstacleRaws_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_FreeSpacePoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_CameraMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_DistortParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_VCSParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_CameraParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_MotionFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_OdometryFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_SerializedData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_DataDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_ParsingSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_ImageFailStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CommonProto::_ImageFail_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\013CommonProto\"(\n\005Point\022\t\n\001"
  "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \001(\002\")\n\006PointI\022"
  "\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\t\n\001z\030\003 \001(\005\"*\n\007Cont"
  "our\022\037\n\003pts\030\001 \003(\0132\022.CommonProto.Point\"*\n\007"
  "Polygon\022\037\n\003pts\030\001 \003(\0132\022.CommonProto.Point"
  "\"@\n\004Rect\022\014\n\004left\030\001 \002(\002\022\013\n\003top\030\002 \002(\002\022\r\n\005r"
  "ight\030\003 \002(\002\022\016\n\006bottom\030\004 \002(\002\"a\n\007OBBox2D\022\"\n"
  "\006corner\030\001 \002(\0132\022.CommonProto.Point\022$\n\010axe"
  "s_pts\030\002 \003(\0132\022.CommonProto.Point\022\014\n\004size\030"
  "\003 \003(\002\"\305\002\n\005Box3D\022$\n\010lower_lt\030\001 \002(\0132\022.Comm"
  "onProto.Point\022$\n\010lower_lb\030\002 \002(\0132\022.Common"
  "Proto.Point\022$\n\010lower_rb\030\003 \002(\0132\022.CommonPr"
  "oto.Point\022$\n\010lower_rt\030\004 \002(\0132\022.CommonProt"
  "o.Point\022$\n\010upper_lt\030\005 \002(\0132\022.CommonProto."
  "Point\022$\n\010upper_lb\030\006 \002(\0132\022.CommonProto.Po"
  "int\022$\n\010upper_rb\030\007 \002(\0132\022.CommonProto.Poin"
  "t\022$\n\010upper_rt\030\010 \002(\0132\022.CommonProto.Point\022"
  "\014\n\004conf\030\t \001(\002\"F\n\010KeyPoint\022\036\n\002pt\030\001 \001(\0132\022."
  "CommonProto.Point\022\014\n\004type\030\002 \001(\002\022\014\n\004conf\030"
  "\003 \001(\002\"a\n\010Category\022\025\n\rproperty_type\030\001 \001(\005"
  "\022\020\n\010property\030\002 \001(\005\022\025\n\rproperty_name\030\003 \001("
  "\t\022\025\n\rproperty_conf\030\004 \001(\002\"Z\n\rWorkConditio"
  "n\022\'\n\010category\030\001 \001(\0132\025.CommonProto.Catego"
  "ry\022\020\n\010frame_id\030\002 \001(\005\022\016\n\006cam_id\030\003 \001(\005\"\301\001\n"
  "\005Image\022\r\n\005width\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\017\n"
  "\007channel\030\003 \002(\005\022\022\n\ntime_stamp\030\004 \001(\003\022\021\n\tse"
  "nd_mode\030\005 \001(\005\022\016\n\006format\030\006 \001(\005\022\r\n\005index\030\007"
  " \001(\005\022\r\n\005count\030\010 \001(\005\022\r\n\005depth\030\t \001(\005\022\r\n\005al"
  "ign\030\n \001(\005\022\025\n\rimage_counter\030\013 \001(\005\".\n\010Velo"
  "city\022\n\n\002vx\030\001 \002(\002\022\n\n\002vy\030\002 \002(\002\022\n\n\002vz\030\003 \001(\002"
  "\"\306\002\n\004Line\022\n\n\002id\030\001 \002(\005\022\021\n\tlife_time\030\003 \001(\005"
  "\022\016\n\006coeffs\030\007 \003(\002\022&\n\nend_points\030\010 \003(\0132\022.C"
  "ommonProto.Point\022\014\n\004type\030\t \001(\005\022\016\n\006source"
  "\030\n \001(\005\022&\n\010contours\030\013 \003(\0132\024.CommonProto.C"
  "ontour\022\033\n\023dist_to_front_wheel\030\014 \001(\002\022\r\n\005w"
  "idth\030\r \001(\002\022\024\n\014type_sibling\030\016 \001(\005\022\014\n\004conf"
  "\030\017 \001(\002\022\024\n\014sigma_coeffs\030\024 \003(\002\";\n\014EndPoint"
  "Type\022\024\n\020EndPointType_Far\020\000\022\025\n\021EndPointTy"
  "pe_Near\020\001\"9\n\005Lines\022\016\n\006cam_id\030\001 \001(\005\022 \n\005li"
  "nes\030\002 \003(\0132\021.CommonProto.Line\"\345\003\n\016WorldSp"
  "aceInfo\022\013\n\003yaw\030\001 \001(\002\022\"\n\003vel\030\002 \001(\0132\025.Comm"
  "onProto.Velocity\022\016\n\006length\030\003 \001(\002\022\r\n\005widt"
  "h\030\004 \001(\002\022\016\n\006height\030\005 \001(\002\022\"\n\004poly\030\006 \001(\0132\024."
  "CommonProto.Polygon\022$\n\010position\030\007 \001(\0132\022."
  "CommonProto.Point\022\023\n\013traversable\030\010 \001(\005\022\013"
  "\n\003hmw\030\t \001(\002\022\013\n\003ttc\030\n \001(\002\022\021\n\tcurr_lane\030\013 "
  "\001(\005\022(\n\014position_obs\030\014 \001(\0132\022.CommonProto."
  "Point\022,\n\rvel_abs_world\030\020 \001(\0132\025.CommonPro"
  "to.Velocity\022\021\n\tsigma_yaw\030\036 \001(\002\022\021\n\tsigma_"
  "vel\030\037 \003(\002\022\023\n\013sigma_width\030  \001(\002\022\024\n\014sigma_"
  "height\030! \001(\002\022\026\n\016sigma_position\030\" \003(\002\022\024\n\014"
  "sigma_length\030# \001(\002\022\020\n\010conf_yaw\030$ \001(\002\"\303\001\n"
  "\016ImageSpaceInfo\022\037\n\004rect\030\001 \001(\0132\021.CommonPr"
  "oto.Rect\022\037\n\003box\030\013 \001(\0132\022.CommonProto.Box3"
  "D\022\"\n\004poly\030\014 \001(\0132\024.CommonProto.Polygon\022\023\n"
  "\013sigma_width\030\024 \001(\002\022\024\n\014sigma_height\030\025 \001(\002"
  "\022\017\n\007sigma_x\030\026 \001(\002\022\017\n\007sigma_y\030\027 \001(\002\"\"\n\022Tr"
  "ackingFeatureMap\022\014\n\004data\030\001 \002(\014\"\301\002\n\010Obsta"
  "cle\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004conf\030\003 "
  "\001(\005\022\021\n\tlife_time\030\004 \001(\005\022\013\n\003age\030\005 \001(\005\022-\n\010i"
  "mg_info\030\006 \001(\0132\033.CommonProto.ImageSpaceIn"
  "fo\022/\n\nworld_info\030\007 \001(\0132\033.CommonProto.Wor"
  "ldSpaceInfo\022\020\n\010property\030\r \003(\005\022\025\n\rpropert"
  "y_name\030\016 \003(\t\022\025\n\rproperty_type\030\017 \003(\005\022\025\n\rp"
  "roperty_conf\030\020 \003(\002\0226\n\rtracking_fmap\030\021 \003("
  "\0132\037.CommonProto.TrackingFeatureMap\"]\n\tOb"
  "stacles\022\016\n\006cam_id\030\001 \001(\005\022\'\n\010obstacle\030\002 \003("
  "\0132\025.CommonProto.Obstacle\022\027\n\nconf_scale\030\003"
  " \001(\002:\0030.1\"\032\n\nFeatureMap\022\014\n\004data\030\001 \002(\014\"\242\001"
  "\n\013ObstacleRaw\022\037\n\004rect\030\001 \002(\0132\021.CommonProt"
  "o.Rect\022\014\n\004conf\030\002 \002(\002\022\r\n\005model\030\003 \002(\005\022\020\n\010p"
  "roperty\030\006 \003(\005\022\025\n\rproperty_name\030\007 \003(\t\022\025\n\r"
  "property_type\030\010 \003(\005\022\025\n\rproperty_conf\030\t \003"
  "(\002\"c\n\014ObstacleRaws\022\016\n\006cam_id\030\001 \001(\005\022*\n\010ob"
  "stacle\030\002 \003(\0132\030.CommonProto.ObstacleRaw\022\027"
  "\n\nconf_scale\030\003 \001(\002:\0030.1\"}\n\017FreeSpacePoin"
  "ts\022\020\n\010property\030\003 \003(\005\022\016\n\006cam_id\030\004 \001(\005\022#\n\007"
  "pts_vcs\030\005 \003(\0132\022.CommonProto.Point\022#\n\007pts"
  "_img\030\006 \003(\0132\022.CommonProto.Point\"\226\001\n\014Camer"
  "aMatrix\022\023\n\013mat_gnd2img\030\001 \003(\002\022\023\n\013mat_img2"
  "gnd\030\002 \003(\002\022\026\n\016mat_vcsgnd2img\030\003 \003(\002\022\026\n\016mat"
  "_img2vcsgnd\030\004 \003(\002\022\025\n\rmat_local2img\030\005 \003(\002"
  "\022\025\n\rmat_img2local\030\006 \003(\002\"\035\n\014DistortParam\022"
  "\r\n\005param\030\001 \003(\002\"1\n\010VCSParam\022\020\n\010rotation\030\001"
  " \003(\002\022\023\n\013translation\030\002 \003(\002\"\242\003\n\013CameraPara"
  "m\022\017\n\007focal_u\030\001 \002(\002\022\017\n\007focal_v\030\002 \002(\002\022\020\n\010c"
  "enter_u\030\003 \002(\002\022\020\n\010center_v\030\004 \002(\002\022\020\n\010camer"
  "a_x\030\005 \002(\002\022\020\n\010camera_y\030\006 \002(\002\022\020\n\010camera_z\030"
  "\007 \002(\002\022\r\n\005pitch\030\010 \002(\002\022\013\n\003yaw\030\t \002(\002\022\014\n\004rol"
  "l\030\n \002(\002\022\017\n\004type\030\013 \001(\005:\0010\022\013\n\003fov\030\014 \001(\002\022\022\n"
  "\007version\030\r \001(\005:\0010\0223\n\013cali_status\030\016 \001(\0162\036"
  ".CommonProto.CalibrationStatus\022*\n\007distor"
  "t\030\024 \001(\0132\031.CommonProto.DistortParam\022\"\n\003vc"
  "s\030\025 \001(\0132\025.CommonProto.VCSParam\022&\n\003mat\030\036 "
  "\001(\0132\031.CommonProto.CameraMatrix\022\016\n\006vendor"
  "\0302 \001(\t\"z\n\013MotionFrame\022\r\n\005speed\030\001 \002(\002\022\013\n\003"
  "acc\030\002 \001(\002\022\020\n\010yaw_rate\030\003 \002(\002\022\022\n\ntime_stam"
  "p\030\004 \002(\003\022\026\n\016turning_radius\030\005 \001(\002\022\021\n\tis_st"
  "able\030\006 \001(\010\"g\n\rOdometryFrame\022\t\n\001x\030\001 \002(\002\022\t"
  "\n\001y\030\002 \002(\002\022\013\n\003yaw\030\003 \002(\002\022\r\n\005speed\030\004 \002(\002\022\020\n"
  "\010yaw_rate\030\005 \002(\002\022\022\n\ntime_stamp\030\006 \002(\003\"`\n\016S"
  "erializedData\022\014\n\004type\030\001 \002(\t\022\r\n\005proto\030\002 \002"
  "(\014\022\022\n\007channel\030\004 \002(\005:\0010\022\035\n\017with_data_fiel"
  "d\030\005 \002(\010:\004true\"I\n\016DataDescriptor\022\014\n\004type\030"
  "\001 \001(\t\022)\n\004data\030\002 \001(\0132\033.CommonProto.Serial"
  "izedData\"(\n\005Color\022\t\n\001b\030\001 \002(\r\022\t\n\001g\030\002 \002(\r\022"
  "\t\n\001r\030\003 \002(\r\"\275\001\n\016ParsingSetting\022\024\n\014parsing"
  "_type\030\001 \002(\005\022\030\n\020parsing_channels\030\002 \002(\005\022\026\n"
  "\016channel_labels\030\003 \003(\004\022*\n\016channel_colors\030"
  "\004 \003(\0132\022.CommonProto.Color\022\032\n\022freespace_c"
  "hannels\030\005 \003(\005\022\033\n\023boundspace_channels\030\006 \003"
  "(\005\"\231\002\n\017ImageFailStatus\022\021\n\tfail_type\030\001 \002("
  "\005\022\r\n\005score\030\002 \001(\002\022\r\n\005level\030\003 \001(\005\022%\n\007regio"
  "ns\030\004 \003(\0132\024.CommonProto.Polygon\"\\\n\014ImgFai"
  "lTypes\022\016\n\nIMG_NORMAL\020\000\022\014\n\010IMG_BLUR\020\001\022\017\n\013"
  "IMG_SHELTER\020\002\022\016\n\nIMG_FREEZE\020\004\022\r\n\tIMG_GLA"
  "RE\020\010\"P\n\014ImgFailLevel\022\r\n\tFAIL_NONE\020\000\022\r\n\tF"
  "AIL_MILD\020\001\022\021\n\rFAIL_MODERATE\020\002\022\017\n\013FAIL_SE"
  "VERE\020\003\"`\n\tImageFail\022\016\n\006cam_id\030\001 \002(\005\022\020\n\010f"
  "rame_id\030\002 \002(\005\0221\n\013fail_status\030\003 \003(\0132\034.Com"
  "monProto.ImageFailStatus*e\n\022PerceptionPr"
  "operty\022\024\n\020Property_Weather\020\000\022\022\n\016Property"
  "_Light\020\001\022\022\n\016Property_Scene\020\002\022\021\n\rProperty"
  "_Time\020\003*\206\001\n\013WeatherType\022\022\n\016WEATHER_NORMA"
  "L\020\000\022\023\n\017WEATHER_NORMAL2\020\001\022\021\n\rWEATHER_RAIN"
  "Y\020\002\022\021\n\rWEATHER_SNOWY\020\003\022\025\n\021WEATHER_HEAVYR"
  "AIN\020\004\022\021\n\rWEATHER_OTHER\020\005*|\n\tSceneType\022\021\n"
  "\rSCENE_HIGHWAY\020\000\022\017\n\013SCENE_URBAN\020\001\022\017\n\013SCE"
  "NE_RURAL\020\002\022\020\n\014SCENE_TUNNEL\020\003\022\017\n\013SCENE_OT"
  "HER\020\005\022\027\n\023SCENE_CHARGESTATION\020\004*8\n\010TimeTy"
  "pe\022\014\n\010TIME_DAY\020\000\022\016\n\nTIME_NIGHT\020\001\022\016\n\nTIME"
  "_OTHER\020\002*\200\001\n\tLightType\022\026\n\022LIGHT_NATRUALL"
  "IGHT\020\000\022\023\n\017LIGHT_LAMPLIGHT\020\001\022\023\n\017LIGHT_HAR"
  "DLIGHT\020\002\022\020\n\014LIGHT_LOWSUN\020\003\022\016\n\nLIGHT_DARK"
  "\020\004\022\017\n\013LIGHT_OTHER\020\005*|\n\021WorkConditionType"
  "\022\032\n\026WORK_CONDITION_WEATHER\020\000\022\030\n\024WORK_CON"
  "DITION_LIGHT\020\001\022\030\n\024WORK_CONDITION_SCENE\020\002"
  "\022\027\n\023WORK_CONDITION_TIME\020\003*y\n\013ImageFormat"
  "\022\010\n\004GRAY\020\000\022\010\n\004YV12\020\001\022\010\n\004JPEG\020\002\022\007\n\003PNG\020\003\022"
  "\010\n\004CR12\020\004\022\007\n\003BAD\020\005\022\010\n\004NV12\020\006\022\010\n\004NV21\020\007\022\013"
  "\n\007TIMEOUT\020\010\022\017\n\013BYPASS_ONLY\020\t*\\\n\rParsingF"
  "ormat\022\025\n\021ParsingFormat_Raw\020\000\022\027\n\023ParsingF"
  "ormat_Label\020\001\022\033\n\027ParsingFormat_Label_RLE"
  "\020\002*\226\003\n\010LineType\022\r\n\tLINE_LEFT\020\001\022\016\n\nLINE_R"
  "IGHT\020\002\022\022\n\016LINE_LEFT_LEFT\020\004\022\024\n\020LINE_RIGHT"
  "_RIGHT\020\010\022\020\n\013LINE_DOUBLE\020\200\004\022\016\n\tLINE_DASH\020"
  "\200\010\022\017\n\nLINE_SOLID\020\200\020\022\017\n\nLINE_WHITE\020\200 \022\020\n\013"
  "LINE_YELLOW\020\200@\022\017\n\tLINE_BLUE\020\200\200\001\022\020\n\nLINE_"
  "GREEN\020\200\200\002\022\020\n\nLINE_FENCE\020\200\200\004\022\026\n\020LINE_ROAD"
  "_HEIGHT\020\200\200\010\022\035\n\027LINE_DIVERSION_SEPARATE\020\200"
  "\200\020\022\022\n\014LINE_BARRIER\020\200\200 \022\032\n\024LINE_DIVERSION"
  "_MERGE\020\200\200@\022\026\n\017LINE_PERCEPTION\020\200\200\200\001\022\024\n\rLI"
  "NE_TRACKING\020\200\200\200\002\022\017\n\010LINE_RAW\020\200\200\200\004\022\020\n\tLIN"
  "E_ROAD\020\200\200\200\010*\321\004\n\014ObstacleType\022\034\n\030Obstacle"
  "Type_VehicleRear\020\000\022\034\n\030ObstacleType_Vehic"
  "leFull\020\001\022\033\n\027ObstacleType_Pedestrian\020\002\022\034\n"
  "\030ObstacleType_TrafficSign\020\003\022\035\n\031ObstacleT"
  "ype_TrafficLight\020\004\022\034\n\030ObstacleType_Parki"
  "ngSlot\020\005\022\031\n\025ObstacleType_RoadSign\020\006\022\036\n\032O"
  "bstacleType_CrosswalkLine\020\007\022\035\n\031ObstacleT"
  "ype_TrafficArrow\020\010\022\034\n\030ObstacleType_Traff"
  "icCone\020\t\022\027\n\023ObstacleType_Barrel\020\n\022\032\n\026Obs"
  "tacleType_YieldMark\020\013\022\032\n\026ObstacleType_Sp"
  "eedMark\020\014\022\031\n\025ObstacleType_StopLine\020\016\022\030\n\024"
  "ObstacleType_Diamond\020\017\022\034\n\030ObstacleType_B"
  "icycleSign\020\020\022\033\n\027ObstacleType_SpeedBumps\020"
  "\021\022\030\n\024ObstacleType_Cyclist\020\022\022\034\n\030ObstacleT"
  "ype_ParkingLock\020\023\022\034\n\030ObstacleType_SpeedC"
  "amera\020\024*O\n\021ParkingSlotStatus\022\036\n\032ParkingS"
  "lotStatus_Occupied\020\000\022\032\n\026ParkingSlotStatu"
  "s_Free\020\001*\245\001\n\013VehProperty\022\024\n\020VehProperty_"
  "Type\020\000\022\036\n\032VehProperty_Classification\020\001\022\025"
  "\n\021VehProperty_Light\020\002\022\025\n\021VehProperty_3DB"
  "ox\020\003\022\031\n\025VehProperty_KeyPoints\020\004\022\027\n\023VehPr"
  "operty_VehBBox\020\005*^\n\031VehPropertyPerceptio"
  "nType\022#\n\037Veh_PerceptionType_LicensePlate"
  "\020\000\022\034\n\030Veh_PerceptionType_Wheel\020\001*\210\001\n\021Tra"
  "fficLightStyle\022\014\n\010L_Circle\020\000\022\r\n\tL_Forwar"
  "d\020\001\022\n\n\006L_Left\020\002\022\013\n\007L_Right\020\003\022\014\n\010L_Return"
  "\020\004\022\013\n\007L_Other\020\005\022\023\n\017L_No_Drive_into\020\006\022\r\n\t"
  "L_unknown\020\007*T\n\022TrafficLightStatus\022\t\n\005Gre"
  "en\020\000\022\n\n\006Yellow\020\001\022\007\n\003Red\020\002\022\n\n\006Unknow\020\003\022\t\n"
  "\005Other\020\004\022\007\n\003Off\020\005*\254\005\n\023TrafficSignPropert"
  "y\022\020\n\014Construction\020\000\022\022\n\016MinSpeedLim100\020\001\022"
  "\022\n\016MinSpeedLim110\020\002\022\021\n\rMinSpeedLim60\020\003\022\021"
  "\n\rMinSpeedLim70\020\004\022\021\n\rMinSpeedLim80\020\005\022\021\n\r"
  "MinSpeedLim90\020\006\022\020\n\014NoPassingRev\020\007\022\016\n\nSpe"
  "edLim10\020\030\022\017\n\013SpeedLim100\020\031\022\030\n\024SpeedLim10"
  "0_electric\020\032\022\017\n\013SpeedLim110\020\033\022\017\n\013SpeedLi"
  "m120\020\034\022\030\n\024SpeedLim120_electric\020\035\022\016\n\nSpee"
  "dLim15\020\036\022\016\n\nSpeedLim20\020\037\022\016\n\nSpeedLim25\020 "
  "\022\016\n\nSpeedLim30\020!\022\016\n\nSpeedLim35\020\"\022\016\n\nSpee"
  "dLim40\020#\022\027\n\023SpeedLim40_electric\020$\022\r\n\tSpe"
  "edLim5\020%\022\016\n\nSpeedLim50\020&\022\027\n\023SpeedLim50_e"
  "lectric\020\'\022\016\n\nSpeedLim60\020(\022\027\n\023SpeedLim60_"
  "electric\020)\022\016\n\nSpeedLim65\020*\022\016\n\nSpeedLim70"
  "\020+\022\016\n\nSpeedLim80\020,\022\027\n\023SpeedLim80_electri"
  "c\020-\022\016\n\nSpeedLim90\020.\022\027\n\023SpeedLim90_electr"
  "ic\020/\022\017\n\013SpeedLimRev\0200\022\021\n\rMinSpeedLim50\0201"
  "\022\026\n\022SpeedLim5_electric\0202*\'\n\020RoadSignProp"
  "erty\022\023\n\017RsProperty_Type\020\000*\251\003\n\024ObstacleRa"
  "wModelType\022\030\n\024ObstacleRawModel_Car\020\000\022\034\n\030"
  "ObstacleRawModel_FullCar\020\001\022\030\n\024ObstacleRa"
  "wModel_Ped\020\002\022\031\n\025ObstacleRawModel_Head\020\003\022"
  " \n\034ObstacleRawModel_TrafficSign\020\005\022!\n\035Obs"
  "tacleRawModel_TrafficLight\020\006\022\031\n\025Obstacle"
  "RawModel_Lane\020\007\022\035\n\031ObstacleRawModel_Road"
  "Sign\020\n\022!\n\035ObstacleRawModel_TrafficArrow\020"
  "\013\022\034\n\030ObstacleRawModel_Cyclist\020\020\022 \n\034Obsta"
  "cleRawModel_ParkingLock\020\021\022 \n\034ObstacleRaw"
  "Model_SpeedCamera\020\022\022 \n\034ObstacleRawModel_"
  "ParkingSlot\020\026*Y\n\014LanePosition\022\030\n\024LANE_PO"
  "SITION_CENTER\020\000\022\026\n\022LANE_POSITION_LEFT\020\001\022"
  "\027\n\023LANE_POSITION_RIGHT\020\002*3\n\022FreeSpacePoi"
  "ntType\022\035\n\030ParsingLabelType_Invalid\020\377\001*<\n"
  "\nCameraType\022\026\n\022CameraType_PinHole\020\000\022\026\n\022C"
  "ameraType_FishEye\020\001*<\n\rCameraVersion\022\024\n\020"
  "CameraVersion_CV\020\000\022\025\n\021CameraVersion_VCS\020"
  "\001*|\n\021CalibrationStatus\022\035\n\031CalibrationSta"
  "tus_Default\020\000\022#\n\037CalibrationStatus_Intri"
  "nsicDone\020\001\022#\n\037CalibrationStatus_Extrinsi"
  "cDone\020\002*:\n\010DataType\022\014\n\010DATA_IMG\020\000\022\020\n\014DAT"
  "A_PARSING\020\001\022\016\n\nDATA_RADAR\020\002*\244\013\n\020PasringL"
  "ableType\022\034\n\030PasringLableTypeRsh_Road\020\000\022 "
  "\n\034PasringLableTypeRsh_Sidewalk\020\001\022 \n\034Pasr"
  "ingLableTypeRsh_Building\020\002\022#\n\037PasringLab"
  "leTypeRsh_LaneMarking\020\003\022\035\n\031PasringLableT"
  "ypeRsh_Fence\020\004\022\034\n\030PasringLableTypeRsh_Po"
  "le\020\005\022$\n PasringLableTypeRsh_TrafficLight"
  "\020\006\022#\n\037PasringLableTypeRsh_TrafficSign\020\007\022"
  "\"\n\036PasringLableTypeRsh_Vegetation\020\010\022\037\n\033P"
  "asringLableTypeRsh_Terrain\020\t\022\033\n\027PasringL"
  "ableTypeRsh_Sky\020\n\022\036\n\032PasringLableTypeRsh"
  "_Person\020\013\022\035\n\031PasringLableTypeRsh_Rider\020\014"
  "\022\033\n\027PasringLableTypeRsh_Car\020\r\022\035\n\031Pasring"
  "LableTypeRsh_Truck\020\016\022\033\n\027PasringLableType"
  "Rsh_Bus\020\017\022\035\n\031PasringLableTypeRsh_Train\020\020"
  "\022\"\n\036PasringLableTypeRsh_Motorcycle\020\021\022\037\n\033"
  "PasringLableTypeRsh_Bicycle\020\022\022!\n\035Pasring"
  "LableTypeRsh_GuidePost\020\023\022%\n!PasringLable"
  "TypeRsh_CrosswalkLine\020\024\022$\n PasringLableT"
  "ypeRsh_TrafficArrow\020\025\022 \n\034PasringLableTyp"
  "eRsh_SignLine\020\026\022!\n\035PasringLableTypeRsh_G"
  "uideLine\020\027\022#\n\037PasringLableTypeRsh_Traffi"
  "cCone\020\030\022\036\n\032PasringLableTypeRsh_Barrel\020\031\022"
  " \n\034PasringLableTypeRsh_StopLine\020\032\022!\n\035Pas"
  "ringLableTypeRsh_SpeedMark\020\033\022\037\n\033PasringL"
  "ableTypeRsh_Diamond\020\034\022#\n\037PasringLableTyp"
  "eRsh_BicycleSign\020\035\022\"\n\036PasringLableTypeRs"
  "h_SpeedBumps\020\036\022 \n\034PasringLableTypeRsh_Tr"
  "icycle\020\037\022(\n$PasringLableTypeRsh_SlowDown"
  "Triangle\020 \022\034\n\030PasringLableTypeRsh_Mask\020!"
  "\022\037\n\033PasringLableTypeRsh_PotHole\020\"\022\035\n\031Pas"
  "ringLableTypeRsh_Other\020#\022\034\n\030PasringLable"
  "TypeRsh_Curb\020$\022#\n\037PasringLableTypeRsh_Pa"
  "rkingLine\020%\022$\n PasringLableTypeRsh_Parki"
  "ngSpace\020&\022\"\n\036PasringLableTypeRsh_Parking"
  "Rod\020\'\022#\n\037PasringLableTypeRsh_ParkingLock"
  "\020(\022\036\n\032PasringLableTypeRsh_Column\020)"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[35] = {
  &scc_info_Box3D_common_2eproto.base,
  &scc_info_CameraMatrix_common_2eproto.base,
  &scc_info_CameraParam_common_2eproto.base,
  &scc_info_Category_common_2eproto.base,
  &scc_info_Color_common_2eproto.base,
  &scc_info_Contour_common_2eproto.base,
  &scc_info_DataDescriptor_common_2eproto.base,
  &scc_info_DistortParam_common_2eproto.base,
  &scc_info_FeatureMap_common_2eproto.base,
  &scc_info_FreeSpacePoints_common_2eproto.base,
  &scc_info_Image_common_2eproto.base,
  &scc_info_ImageFail_common_2eproto.base,
  &scc_info_ImageFailStatus_common_2eproto.base,
  &scc_info_ImageSpaceInfo_common_2eproto.base,
  &scc_info_KeyPoint_common_2eproto.base,
  &scc_info_Line_common_2eproto.base,
  &scc_info_Lines_common_2eproto.base,
  &scc_info_MotionFrame_common_2eproto.base,
  &scc_info_OBBox2D_common_2eproto.base,
  &scc_info_Obstacle_common_2eproto.base,
  &scc_info_ObstacleRaw_common_2eproto.base,
  &scc_info_ObstacleRaws_common_2eproto.base,
  &scc_info_Obstacles_common_2eproto.base,
  &scc_info_OdometryFrame_common_2eproto.base,
  &scc_info_ParsingSetting_common_2eproto.base,
  &scc_info_Point_common_2eproto.base,
  &scc_info_PointI_common_2eproto.base,
  &scc_info_Polygon_common_2eproto.base,
  &scc_info_Rect_common_2eproto.base,
  &scc_info_SerializedData_common_2eproto.base,
  &scc_info_TrackingFeatureMap_common_2eproto.base,
  &scc_info_VCSParam_common_2eproto.base,
  &scc_info_Velocity_common_2eproto.base,
  &scc_info_WorkCondition_common_2eproto.base,
  &scc_info_WorldSpaceInfo_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  false, false, descriptor_table_protodef_common_2eproto, "common.proto", 10354,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 35, 0,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 35, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto)), true);
namespace CommonProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Line_EndPointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool Line_EndPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Line_EndPointType Line::EndPointType_Far;
constexpr Line_EndPointType Line::EndPointType_Near;
constexpr Line_EndPointType Line::EndPointType_MIN;
constexpr Line_EndPointType Line::EndPointType_MAX;
constexpr int Line::EndPointType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFailStatus_ImgFailTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool ImageFailStatus_ImgFailTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_NORMAL;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_BLUR;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_SHELTER;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_FREEZE;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_GLARE;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::ImgFailTypes_MIN;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::ImgFailTypes_MAX;
constexpr int ImageFailStatus::ImgFailTypes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFailStatus_ImgFailLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool ImageFailStatus_ImgFailLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::FAIL_NONE;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::FAIL_MILD;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::FAIL_MODERATE;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::FAIL_SEVERE;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::ImgFailLevel_MIN;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::ImgFailLevel_MAX;
constexpr int ImageFailStatus::ImgFailLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionProperty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool PerceptionProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeatherType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool WeatherType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SceneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
bool SceneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[6];
}
bool TimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[7];
}
bool LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkConditionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[8];
}
bool WorkConditionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[9];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParsingFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[10];
}
bool ParsingFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[11];
}
bool LineType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[12];
}
bool ObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlotStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[13];
}
bool ParkingSlotStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehProperty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[14];
}
bool VehProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehPropertyPerceptionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[15];
}
bool VehPropertyPerceptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLightStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[16];
}
bool TrafficLightStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLightStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[17];
}
bool TrafficLightStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSignProperty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[18];
}
bool TrafficSignProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadSignProperty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[19];
}
bool RoadSignProperty_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRawModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[20];
}
bool ObstacleRawModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 16:
    case 17:
    case 18:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanePosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[21];
}
bool LanePosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FreeSpacePointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[22];
}
bool FreeSpacePointType_IsValid(int value) {
  switch (value) {
    case 255:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[23];
}
bool CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[24];
}
bool CameraVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibrationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[25];
}
bool CalibrationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[26];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PasringLableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[27];
}
bool PasringLableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Point)
}

void Point::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:CommonProto.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_common_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.Point)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Point)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float z = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, z_)
      + sizeof(Point::z_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointI::_Internal {
 public:
  using HasBits = decltype(std::declval<PointI>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PointI::PointI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.PointI)
}
PointI::PointI(const PointI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.PointI)
}

void PointI::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

PointI::~PointI() {
  // @@protoc_insertion_point(destructor:CommonProto.PointI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PointI::ArenaDtor(void* object) {
  PointI* _this = reinterpret_cast< PointI* >(object);
  (void)_this;
}
void PointI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointI& PointI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointI_common_2eproto.base);
  return *internal_default_instance();
}


void PointI::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.PointI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.PointI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.PointI)
  return target;
}

size_t PointI::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.PointI)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  return total_size;
}
size_t PointI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.PointI)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());

    // required int32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 z = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.PointI)
  GOOGLE_DCHECK_NE(&from, this);
  const PointI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.PointI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.PointI)
    MergeFrom(*source);
  }
}

void PointI::MergeFrom(const PointI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.PointI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.PointI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointI::CopyFrom(const PointI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.PointI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointI::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PointI::InternalSwap(PointI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointI, z_)
      + sizeof(PointI::z_)
      - PROTOBUF_FIELD_OFFSET(PointI, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Contour::_Internal {
 public:
};

Contour::Contour(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Contour)
}
Contour::Contour(const Contour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CommonProto.Contour)
}

void Contour::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contour_common_2eproto.base);
}

Contour::~Contour() {
  // @@protoc_insertion_point(destructor:CommonProto.Contour)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contour::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Contour::ArenaDtor(void* object) {
  Contour* _this = reinterpret_cast< Contour* >(object);
  (void)_this;
}
void Contour::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contour& Contour::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contour_common_2eproto.base);
  return *internal_default_instance();
}


void Contour::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Contour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contour::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CommonProto.Point pts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contour::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Contour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CommonProto.Point pts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Contour)
  return target;
}

size_t Contour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Contour)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.Point pts = 1;
  total_size += 1UL * this->_internal_pts_size();
  for (const auto& msg : this->pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contour::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Contour)
  GOOGLE_DCHECK_NE(&from, this);
  const Contour* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contour>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Contour)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Contour)
    MergeFrom(*source);
  }
}

void Contour::MergeFrom(const Contour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Contour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
}

void Contour::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Contour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contour::CopyFrom(const Contour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Contour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contour::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pts_)) return false;
  return true;
}

void Contour::InternalSwap(Contour* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_.InternalSwap(&other->pts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contour::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CommonProto.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_common_2eproto.base);
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:CommonProto.Polygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_common_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CommonProto.Point pts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CommonProto.Point pts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.Point pts = 1;
  total_size += 1UL * this->_internal_pts_size();
  for (const auto& msg : this->pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pts_)) return false;
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_.InternalSwap(&other->pts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Rect::_Internal {
 public:
  using HasBits = decltype(std::declval<Rect>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Rect::Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Rect)
}

void Rect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:CommonProto.Rect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rect::ArenaDtor(void* object) {
  Rect* _this = reinterpret_cast< Rect* >(object);
  (void)_this;
}
void Rect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect_common_2eproto.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_) -
        reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_left(), target);
  }

  // required float top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_top(), target);
  }

  // required float right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_right(), target);
  }

  // required float bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Rect)
  return target;
}

size_t Rect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.Rect)
  size_t total_size = 0;

  if (_internal_has_left()) {
    // required float left = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_top()) {
    // required float top = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_right()) {
    // required float right = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_bottom()) {
    // required float bottom = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Rect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float left = 1;
    total_size += 1 + 4;

    // required float top = 2;
    total_size += 1 + 4;

    // required float right = 3;
    total_size += 1 + 4;

    // required float bottom = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Rect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, bottom_)
      + sizeof(Rect::bottom_)
      - PROTOBUF_FIELD_OFFSET(Rect, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OBBox2D::_Internal {
 public:
  using HasBits = decltype(std::declval<OBBox2D>()._has_bits_);
  static const ::CommonProto::Point& corner(const OBBox2D* msg);
  static void set_has_corner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CommonProto::Point&
OBBox2D::_Internal::corner(const OBBox2D* msg) {
  return *msg->corner_;
}
OBBox2D::OBBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  axes_pts_(arena),
  size_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.OBBox2D)
}
OBBox2D::OBBox2D(const OBBox2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      axes_pts_(from.axes_pts_),
      size_(from.size_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_corner()) {
    corner_ = new ::CommonProto::Point(*from.corner_);
  } else {
    corner_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CommonProto.OBBox2D)
}

void OBBox2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBBox2D_common_2eproto.base);
  corner_ = nullptr;
}

OBBox2D::~OBBox2D() {
  // @@protoc_insertion_point(destructor:CommonProto.OBBox2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OBBox2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete corner_;
}

void OBBox2D::ArenaDtor(void* object) {
  OBBox2D* _this = reinterpret_cast< OBBox2D* >(object);
  (void)_this;
}
void OBBox2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBBox2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBBox2D& OBBox2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBBox2D_common_2eproto.base);
  return *internal_default_instance();
}


void OBBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.OBBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axes_pts_.Clear();
  size_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(corner_ != nullptr);
    corner_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OBBox2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CommonProto.Point corner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_corner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Point axes_pts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_axes_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBBox2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.OBBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CommonProto.Point corner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::corner(this), target, stream);
  }

  // repeated .CommonProto.Point axes_pts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_axes_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_axes_pts(i), target, stream);
  }

  // repeated float size = 3;
  for (int i = 0, n = this->_internal_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_size(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.OBBox2D)
  return target;
}

size_t OBBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.OBBox2D)
  size_t total_size = 0;

  // required .CommonProto.Point corner = 1;
  if (_internal_has_corner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corner_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.Point axes_pts = 2;
  total_size += 1UL * this->_internal_axes_pts_size();
  for (const auto& msg : this->axes_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float size = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_size_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBBox2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.OBBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  const OBBox2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OBBox2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.OBBox2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.OBBox2D)
    MergeFrom(*source);
  }
}

void OBBox2D::MergeFrom(const OBBox2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.OBBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axes_pts_.MergeFrom(from.axes_pts_);
  size_.MergeFrom(from.size_);
  if (from._internal_has_corner()) {
    _internal_mutable_corner()->::CommonProto::Point::MergeFrom(from._internal_corner());
  }
}

void OBBox2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.OBBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OBBox2D::CopyFrom(const OBBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.OBBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBBox2D::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(axes_pts_)) return false;
  if (_internal_has_corner()) {
    if (!corner_->IsInitialized()) return false;
  }
  return true;
}

void OBBox2D::InternalSwap(OBBox2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  axes_pts_.InternalSwap(&other->axes_pts_);
  size_.InternalSwap(&other->size_);
  swap(corner_, other->corner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OBBox2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Box3D::_Internal {
 public:
  using HasBits = decltype(std::declval<Box3D>()._has_bits_);
  static const ::CommonProto::Point& lower_lt(const Box3D* msg);
  static void set_has_lower_lt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CommonProto::Point& lower_lb(const Box3D* msg);
  static void set_has_lower_lb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CommonProto::Point& lower_rb(const Box3D* msg);
  static void set_has_lower_rb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CommonProto::Point& lower_rt(const Box3D* msg);
  static void set_has_lower_rt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CommonProto::Point& upper_lt(const Box3D* msg);
  static void set_has_upper_lt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CommonProto::Point& upper_lb(const Box3D* msg);
  static void set_has_upper_lb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CommonProto::Point& upper_rb(const Box3D* msg);
  static void set_has_upper_rb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CommonProto::Point& upper_rt(const Box3D* msg);
  static void set_has_upper_rt(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::CommonProto::Point&
Box3D::_Internal::lower_lt(const Box3D* msg) {
  return *msg->lower_lt_;
}
const ::CommonProto::Point&
Box3D::_Internal::lower_lb(const Box3D* msg) {
  return *msg->lower_lb_;
}
const ::CommonProto::Point&
Box3D::_Internal::lower_rb(const Box3D* msg) {
  return *msg->lower_rb_;
}
const ::CommonProto::Point&
Box3D::_Internal::lower_rt(const Box3D* msg) {
  return *msg->lower_rt_;
}
const ::CommonProto::Point&
Box3D::_Internal::upper_lt(const Box3D* msg) {
  return *msg->upper_lt_;
}
const ::CommonProto::Point&
Box3D::_Internal::upper_lb(const Box3D* msg) {
  return *msg->upper_lb_;
}
const ::CommonProto::Point&
Box3D::_Internal::upper_rb(const Box3D* msg) {
  return *msg->upper_rb_;
}
const ::CommonProto::Point&
Box3D::_Internal::upper_rt(const Box3D* msg) {
  return *msg->upper_rt_;
}
Box3D::Box3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Box3D)
}
Box3D::Box3D(const Box3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lower_lt()) {
    lower_lt_ = new ::CommonProto::Point(*from.lower_lt_);
  } else {
    lower_lt_ = nullptr;
  }
  if (from._internal_has_lower_lb()) {
    lower_lb_ = new ::CommonProto::Point(*from.lower_lb_);
  } else {
    lower_lb_ = nullptr;
  }
  if (from._internal_has_lower_rb()) {
    lower_rb_ = new ::CommonProto::Point(*from.lower_rb_);
  } else {
    lower_rb_ = nullptr;
  }
  if (from._internal_has_lower_rt()) {
    lower_rt_ = new ::CommonProto::Point(*from.lower_rt_);
  } else {
    lower_rt_ = nullptr;
  }
  if (from._internal_has_upper_lt()) {
    upper_lt_ = new ::CommonProto::Point(*from.upper_lt_);
  } else {
    upper_lt_ = nullptr;
  }
  if (from._internal_has_upper_lb()) {
    upper_lb_ = new ::CommonProto::Point(*from.upper_lb_);
  } else {
    upper_lb_ = nullptr;
  }
  if (from._internal_has_upper_rb()) {
    upper_rb_ = new ::CommonProto::Point(*from.upper_rb_);
  } else {
    upper_rb_ = nullptr;
  }
  if (from._internal_has_upper_rt()) {
    upper_rt_ = new ::CommonProto::Point(*from.upper_rt_);
  } else {
    upper_rt_ = nullptr;
  }
  conf_ = from.conf_;
  // @@protoc_insertion_point(copy_constructor:CommonProto.Box3D)
}

void Box3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Box3D_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lower_lt_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&lower_lt_)) + sizeof(conf_));
}

Box3D::~Box3D() {
  // @@protoc_insertion_point(destructor:CommonProto.Box3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lower_lt_;
  if (this != internal_default_instance()) delete lower_lb_;
  if (this != internal_default_instance()) delete lower_rb_;
  if (this != internal_default_instance()) delete lower_rt_;
  if (this != internal_default_instance()) delete upper_lt_;
  if (this != internal_default_instance()) delete upper_lb_;
  if (this != internal_default_instance()) delete upper_rb_;
  if (this != internal_default_instance()) delete upper_rt_;
}

void Box3D::ArenaDtor(void* object) {
  Box3D* _this = reinterpret_cast< Box3D* >(object);
  (void)_this;
}
void Box3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box3D& Box3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box3D_common_2eproto.base);
  return *internal_default_instance();
}


void Box3D::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Box3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lower_lt_ != nullptr);
      lower_lt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lower_lb_ != nullptr);
      lower_lb_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lower_rb_ != nullptr);
      lower_rb_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lower_rt_ != nullptr);
      lower_rt_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(upper_lt_ != nullptr);
      upper_lt_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(upper_lb_ != nullptr);
      upper_lb_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(upper_rb_ != nullptr);
      upper_rb_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(upper_rt_ != nullptr);
      upper_rt_->Clear();
    }
  }
  conf_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CommonProto.Point lower_lt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_lt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CommonProto.Point lower_lb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_lb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CommonProto.Point lower_rb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_rb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CommonProto.Point lower_rt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_rt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CommonProto.Point upper_lt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_lt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CommonProto.Point upper_lb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_lb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CommonProto.Point upper_rb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_rb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CommonProto.Point upper_rt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_rt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float conf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_conf(&has_bits);
          conf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Box3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CommonProto.Point lower_lt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lower_lt(this), target, stream);
  }

  // required .CommonProto.Point lower_lb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lower_lb(this), target, stream);
  }

  // required .CommonProto.Point lower_rb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lower_rb(this), target, stream);
  }

  // required .CommonProto.Point lower_rt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lower_rt(this), target, stream);
  }

  // required .CommonProto.Point upper_lt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::upper_lt(this), target, stream);
  }

  // required .CommonProto.Point upper_lb = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::upper_lb(this), target, stream);
  }

  // required .CommonProto.Point upper_rb = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::upper_rb(this), target, stream);
  }

  // required .CommonProto.Point upper_rt = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::upper_rt(this), target, stream);
  }

  // optional float conf = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_conf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Box3D)
  return target;
}

size_t Box3D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.Box3D)
  size_t total_size = 0;

  if (_internal_has_lower_lt()) {
    // required .CommonProto.Point lower_lt = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_lt_);
  }

  if (_internal_has_lower_lb()) {
    // required .CommonProto.Point lower_lb = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_lb_);
  }

  if (_internal_has_lower_rb()) {
    // required .CommonProto.Point lower_rb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_rb_);
  }

  if (_internal_has_lower_rt()) {
    // required .CommonProto.Point lower_rt = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_rt_);
  }

  if (_internal_has_upper_lt()) {
    // required .CommonProto.Point upper_lt = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_lt_);
  }

  if (_internal_has_upper_lb()) {
    // required .CommonProto.Point upper_lb = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_lb_);
  }

  if (_internal_has_upper_rb()) {
    // required .CommonProto.Point upper_rb = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_rb_);
  }

  if (_internal_has_upper_rt()) {
    // required .CommonProto.Point upper_rt = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_rt_);
  }

  return total_size;
}
size_t Box3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Box3D)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .CommonProto.Point lower_lt = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_lt_);

    // required .CommonProto.Point lower_lb = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_lb_);

    // required .CommonProto.Point lower_rb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_rb_);

    // required .CommonProto.Point lower_rt = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_rt_);

    // required .CommonProto.Point upper_lt = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_lt_);

    // required .CommonProto.Point upper_lb = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_lb_);

    // required .CommonProto.Point upper_rb = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_rb_);

    // required .CommonProto.Point upper_rt = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_rt_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float conf = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Box3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Box3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Box3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Box3D)
    MergeFrom(*source);
  }
}

void Box3D::MergeFrom(const Box3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Box3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lower_lt()->::CommonProto::Point::MergeFrom(from._internal_lower_lt());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lower_lb()->::CommonProto::Point::MergeFrom(from._internal_lower_lb());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lower_rb()->::CommonProto::Point::MergeFrom(from._internal_lower_rb());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lower_rt()->::CommonProto::Point::MergeFrom(from._internal_lower_rt());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_upper_lt()->::CommonProto::Point::MergeFrom(from._internal_upper_lt());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_upper_lb()->::CommonProto::Point::MergeFrom(from._internal_upper_lb());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_upper_rb()->::CommonProto::Point::MergeFrom(from._internal_upper_rb());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_upper_rt()->::CommonProto::Point::MergeFrom(from._internal_upper_rt());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_conf(from._internal_conf());
  }
}

void Box3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Box3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box3D::CopyFrom(const Box3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Box3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3D::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_lower_lt()) {
    if (!lower_lt_->IsInitialized()) return false;
  }
  if (_internal_has_lower_lb()) {
    if (!lower_lb_->IsInitialized()) return false;
  }
  if (_internal_has_lower_rb()) {
    if (!lower_rb_->IsInitialized()) return false;
  }
  if (_internal_has_lower_rt()) {
    if (!lower_rt_->IsInitialized()) return false;
  }
  if (_internal_has_upper_lt()) {
    if (!upper_lt_->IsInitialized()) return false;
  }
  if (_internal_has_upper_lb()) {
    if (!upper_lb_->IsInitialized()) return false;
  }
  if (_internal_has_upper_rb()) {
    if (!upper_rb_->IsInitialized()) return false;
  }
  if (_internal_has_upper_rt()) {
    if (!upper_rt_->IsInitialized()) return false;
  }
  return true;
}

void Box3D::InternalSwap(Box3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box3D, conf_)
      + sizeof(Box3D::conf_)
      - PROTOBUF_FIELD_OFFSET(Box3D, lower_lt_)>(
          reinterpret_cast<char*>(&lower_lt_),
          reinterpret_cast<char*>(&other->lower_lt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyPoint>()._has_bits_);
  static const ::CommonProto::Point& pt(const KeyPoint* msg);
  static void set_has_pt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CommonProto::Point&
KeyPoint::_Internal::pt(const KeyPoint* msg) {
  return *msg->pt_;
}
KeyPoint::KeyPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.KeyPoint)
}
KeyPoint::KeyPoint(const KeyPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pt()) {
    pt_ = new ::CommonProto::Point(*from.pt_);
  } else {
    pt_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&conf_) -
    reinterpret_cast<char*>(&type_)) + sizeof(conf_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.KeyPoint)
}

void KeyPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyPoint_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pt_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&pt_)) + sizeof(conf_));
}

KeyPoint::~KeyPoint() {
  // @@protoc_insertion_point(destructor:CommonProto.KeyPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pt_;
}

void KeyPoint::ArenaDtor(void* object) {
  KeyPoint* _this = reinterpret_cast< KeyPoint* >(object);
  (void)_this;
}
void KeyPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyPoint& KeyPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyPoint_common_2eproto.base);
  return *internal_default_instance();
}


void KeyPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.KeyPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pt_ != nullptr);
    pt_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&conf_) -
        reinterpret_cast<char*>(&type_)) + sizeof(conf_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CommonProto.Point pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_conf(&has_bits);
          conf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.KeyPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CommonProto.Point pt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pt(this), target, stream);
  }

  // optional float type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_type(), target);
  }

  // optional float conf = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_conf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.KeyPoint)
  return target;
}

size_t KeyPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.KeyPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CommonProto.Point pt = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pt_);
    }

    // optional float type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float conf = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.KeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.KeyPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.KeyPoint)
    MergeFrom(*source);
  }
}

void KeyPoint::MergeFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.KeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pt()->::CommonProto::Point::MergeFrom(from._internal_pt());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      conf_ = from.conf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPoint::CopyFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPoint::IsInitialized() const {
  if (_internal_has_pt()) {
    if (!pt_->IsInitialized()) return false;
  }
  return true;
}

void KeyPoint::InternalSwap(KeyPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyPoint, conf_)
      + sizeof(KeyPoint::conf_)
      - PROTOBUF_FIELD_OFFSET(KeyPoint, pt_)>(
          reinterpret_cast<char*>(&pt_),
          reinterpret_cast<char*>(&other->pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Category::_Internal {
 public:
  using HasBits = decltype(std::declval<Category>()._has_bits_);
  static void set_has_property_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_property_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Category::Category(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property_name()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArena());
  }
  ::memcpy(&property_type_, &from.property_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&property_conf_) -
    reinterpret_cast<char*>(&property_type_)) + sizeof(property_conf_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Category)
}

void Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Category_common_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&property_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_conf_) -
      reinterpret_cast<char*>(&property_type_)) + sizeof(property_conf_));
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:CommonProto.Category)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Category::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Category::ArenaDtor(void* object) {
  Category* _this = reinterpret_cast< Category* >(object);
  (void)_this;
}
void Category::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Category_common_2eproto.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    property_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&property_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&property_conf_) -
        reinterpret_cast<char*>(&property_type_)) + sizeof(property_conf_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 property_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_property_type(&has_bits);
          property_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_property(&has_bits);
          property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string property_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommonProto.Category.property_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float property_conf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_property_conf(&has_bits);
          property_conf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Category::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 property_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_property_type(), target);
  }

  // optional int32 property = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_property(), target);
  }

  // optional string property_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CommonProto.Category.property_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property_name(), target);
  }

  // optional float property_conf = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_property_conf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string property_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property_name());
    }

    // optional int32 property_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_property_type());
    }

    // optional int32 property = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_property());
    }

    // optional float property_conf = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property_name(from._internal_property_name());
    }
    if (cached_has_bits & 0x00000002u) {
      property_type_ = from.property_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      property_ = from.property_;
    }
    if (cached_has_bits & 0x00000008u) {
      property_conf_ = from.property_conf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Category, property_conf_)
      + sizeof(Category::property_conf_)
      - PROTOBUF_FIELD_OFFSET(Category, property_type_)>(
          reinterpret_cast<char*>(&property_type_),
          reinterpret_cast<char*>(&other->property_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkCondition>()._has_bits_);
  static const ::CommonProto::Category& category(const WorkCondition* msg);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CommonProto::Category&
WorkCondition::_Internal::category(const WorkCondition* msg) {
  return *msg->category_;
}
WorkCondition::WorkCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.WorkCondition)
}
WorkCondition::WorkCondition(const WorkCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_category()) {
    category_ = new ::CommonProto::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cam_id_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(cam_id_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.WorkCondition)
}

void WorkCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkCondition_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&category_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cam_id_) -
      reinterpret_cast<char*>(&category_)) + sizeof(cam_id_));
}

WorkCondition::~WorkCondition() {
  // @@protoc_insertion_point(destructor:CommonProto.WorkCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete category_;
}

void WorkCondition::ArenaDtor(void* object) {
  WorkCondition* _this = reinterpret_cast< WorkCondition* >(object);
  (void)_this;
}
void WorkCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkCondition& WorkCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkCondition_common_2eproto.base);
  return *internal_default_instance();
}


void WorkCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.WorkCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(category_ != nullptr);
    category_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&frame_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cam_id_) -
        reinterpret_cast<char*>(&frame_id_)) + sizeof(cam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CommonProto.Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cam_id(&has_bits);
          cam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.WorkCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CommonProto.Category category = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::category(this), target, stream);
  }

  // optional int32 frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frame_id(), target);
  }

  // optional int32 cam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.WorkCondition)
  return target;
}

size_t WorkCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.WorkCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CommonProto.Category category = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_);
    }

    // optional int32 frame_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_id());
    }

    // optional int32 cam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cam_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.WorkCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.WorkCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.WorkCondition)
    MergeFrom(*source);
  }
}

void WorkCondition::MergeFrom(const WorkCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.WorkCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_category()->::CommonProto::Category::MergeFrom(from._internal_category());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_ = from.frame_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cam_id_ = from.cam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.WorkCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkCondition::CopyFrom(const WorkCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.WorkCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkCondition::IsInitialized() const {
  return true;
}

void WorkCondition::InternalSwap(WorkCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkCondition, cam_id_)
      + sizeof(WorkCondition::cam_id_)
      - PROTOBUF_FIELD_OFFSET(WorkCondition, category_)>(
          reinterpret_cast<char*>(&category_),
          reinterpret_cast<char*>(&other->category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Image::_Internal {
 public:
  using HasBits = decltype(std::declval<Image>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_send_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_align(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_image_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_counter_) -
    reinterpret_cast<char*>(&width_)) + sizeof(image_counter_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Image)
}

void Image::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&image_counter_) -
      reinterpret_cast<char*>(&width_)) + sizeof(image_counter_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:CommonProto.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_common_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&width_)) + sizeof(count_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_counter_) -
        reinterpret_cast<char*>(&depth_)) + sizeof(image_counter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_stamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 send_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_send_mode(&has_bits);
          send_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_format(&has_bits);
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 depth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 align = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_align(&has_bits);
          align_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 image_counter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_image_counter(&has_bits);
          image_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // required int32 channel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // optional int64 time_stamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time_stamp(), target);
  }

  // optional int32 send_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_send_mode(), target);
  }

  // optional int32 format = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_format(), target);
  }

  // optional int32 index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_index(), target);
  }

  // optional int32 count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_count(), target);
  }

  // optional int32 depth = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_depth(), target);
  }

  // optional int32 align = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_align(), target);
  }

  // optional int32 image_counter = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_image_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Image)
  return target;
}

size_t Image::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.Image)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required int32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (_internal_has_channel()) {
    // required int32 channel = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  return total_size;
}
size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Image)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required int32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

    // required int32 channel = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 time_stamp = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional int32 send_mode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_send_mode());
    }

    // optional int32 format = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_format());
    }

    // optional int32 index = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_index());
    }

    // optional int32 count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 depth = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_depth());
    }

    // optional int32 align = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_align());
    }

    // optional int32 image_counter = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_image_counter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000010u) {
      send_mode_ = from.send_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000040u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000080u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000200u) {
      align_ = from.align_;
    }
    if (cached_has_bits & 0x00000400u) {
      image_counter_ = from.image_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, image_counter_)
      + sizeof(Image::image_counter_)
      - PROTOBUF_FIELD_OFFSET(Image, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Velocity::_Internal {
 public:
  using HasBits = decltype(std::declval<Velocity>()._has_bits_);
  static void set_has_vx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Velocity::Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Velocity)
}
Velocity::Velocity(const Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(vz_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Velocity)
}

void Velocity::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vz_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(vz_));
}

Velocity::~Velocity() {
  // @@protoc_insertion_point(destructor:CommonProto.Velocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Velocity::ArenaDtor(void* object) {
  Velocity* _this = reinterpret_cast< Velocity* >(object);
  (void)_this;
}
void Velocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Velocity& Velocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Velocity_common_2eproto.base);
  return *internal_default_instance();
}


void Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&vx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vz_) -
        reinterpret_cast<char*>(&vx_)) + sizeof(vz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_vx(&has_bits);
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_vy(&has_bits);
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_vz(&has_bits);
          vz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float vx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vx(), target);
  }

  // required float vy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_vy(), target);
  }

  // optional float vz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_vz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Velocity)
  return target;
}

size_t Velocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.Velocity)
  size_t total_size = 0;

  if (_internal_has_vx()) {
    // required float vx = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_vy()) {
    // required float vy = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Velocity)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float vx = 1;
    total_size += 1 + 4;

    // required float vy = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float vz = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Velocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const Velocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Velocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Velocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Velocity)
    MergeFrom(*source);
  }
}

void Velocity::MergeFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      vx_ = from.vx_;
    }
    if (cached_has_bits & 0x00000002u) {
      vy_ = from.vy_;
    }
    if (cached_has_bits & 0x00000004u) {
      vz_ = from.vz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Velocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity::CopyFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Velocity::InternalSwap(Velocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Velocity, vz_)
      + sizeof(Velocity::vz_)
      - PROTOBUF_FIELD_OFFSET(Velocity, vx_)>(
          reinterpret_cast<char*>(&vx_),
          reinterpret_cast<char*>(&other->vx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Velocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Line::_Internal {
 public:
  using HasBits = decltype(std::declval<Line>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_life_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dist_to_front_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type_sibling(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coeffs_(arena),
  end_points_(arena),
  contours_(arena),
  sigma_coeffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      coeffs_(from.coeffs_),
      end_points_(from.end_points_),
      contours_(from.contours_),
      sigma_coeffs_(from.sigma_coeffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&conf_) -
    reinterpret_cast<char*>(&id_)) + sizeof(conf_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Line)
}

void Line::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Line_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&id_)) + sizeof(conf_));
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:CommonProto.Line)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Line::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Line::ArenaDtor(void* object) {
  Line* _this = reinterpret_cast< Line* >(object);
  (void)_this;
}
void Line::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Line& Line::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Line_common_2eproto.base);
  return *internal_default_instance();
}


void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coeffs_.Clear();
  end_points_.Clear();
  contours_.Clear();
  sigma_coeffs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&conf_) -
        reinterpret_cast<char*>(&id_)) + sizeof(conf_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 life_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_life_time(&has_bits);
          life_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float coeffs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coeffs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_coeffs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Point end_points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_end_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_source(&has_bits);
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Contour contours = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contours(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float dist_to_front_wheel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_dist_to_front_wheel(&has_bits);
          dist_to_front_wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 type_sibling = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_type_sibling(&has_bits);
          type_sibling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float conf = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_conf(&has_bits);
          conf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float sigma_coeffs = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_sigma_coeffs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<165>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sigma_coeffs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Line::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional int32 life_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_life_time(), target);
  }

  // repeated float coeffs = 7;
  for (int i = 0, n = this->_internal_coeffs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_coeffs(i), target);
  }

  // repeated .CommonProto.Point end_points = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_end_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_end_points(i), target, stream);
  }

  // optional int32 type = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_type(), target);
  }

  // optional int32 source = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_source(), target);
  }

  // repeated .CommonProto.Contour contours = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contours_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_contours(i), target, stream);
  }

  // optional float dist_to_front_wheel = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_dist_to_front_wheel(), target);
  }

  // optional float width = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_width(), target);
  }

  // optional int32 type_sibling = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_type_sibling(), target);
  }

  // optional float conf = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_conf(), target);
  }

  // repeated float sigma_coeffs = 20;
  for (int i = 0, n = this->_internal_sigma_coeffs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_sigma_coeffs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Line)
  size_t total_size = 0;

  // required int32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float coeffs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coeffs_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coeffs_size());
    total_size += data_size;
  }

  // repeated .CommonProto.Point end_points = 8;
  total_size += 1UL * this->_internal_end_points_size();
  for (const auto& msg : this->end_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.Contour contours = 11;
  total_size += 1UL * this->_internal_contours_size();
  for (const auto& msg : this->contours_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float sigma_coeffs = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sigma_coeffs_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sigma_coeffs_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional int32 life_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_life_time());
    }

    // optional int32 type = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 source = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source());
    }

    // optional float dist_to_front_wheel = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float width = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 type_sibling = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type_sibling());
    }

    // optional float conf = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Line>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Line)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coeffs_.MergeFrom(from.coeffs_);
  end_points_.MergeFrom(from.end_points_);
  contours_.MergeFrom(from.contours_);
  sigma_coeffs_.MergeFrom(from.sigma_coeffs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      life_time_ = from.life_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000010u) {
      dist_to_front_wheel_ = from.dist_to_front_wheel_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_sibling_ = from.type_sibling_;
    }
    if (cached_has_bits & 0x00000080u) {
      conf_ = from.conf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Line::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(end_points_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(contours_)) return false;
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  coeffs_.InternalSwap(&other->coeffs_);
  end_points_.InternalSwap(&other->end_points_);
  contours_.InternalSwap(&other->contours_);
  sigma_coeffs_.InternalSwap(&other->sigma_coeffs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line, conf_)
      + sizeof(Line::conf_)
      - PROTOBUF_FIELD_OFFSET(Line, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Lines::_Internal {
 public:
  using HasBits = decltype(std::declval<Lines>()._has_bits_);
  static void set_has_cam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Lines::Lines(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Lines)
}
Lines::Lines(const Lines& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lines_(from.lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cam_id_ = from.cam_id_;
  // @@protoc_insertion_point(copy_constructor:CommonProto.Lines)
}

void Lines::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lines_common_2eproto.base);
  cam_id_ = 0;
}

Lines::~Lines() {
  // @@protoc_insertion_point(destructor:CommonProto.Lines)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lines::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Lines::ArenaDtor(void* object) {
  Lines* _this = reinterpret_cast< Lines* >(object);
  (void)_this;
}
void Lines::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lines::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lines& Lines::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lines_common_2eproto.base);
  return *internal_default_instance();
}


void Lines::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Lines)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  cam_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lines::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cam_id(&has_bits);
          cam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Line lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lines::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Lines)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cam_id(), target);
  }

  // repeated .CommonProto.Line lines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Lines)
  return target;
}

size_t Lines::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Lines)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.Line lines = 2;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 cam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cam_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lines::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Lines)
  GOOGLE_DCHECK_NE(&from, this);
  const Lines* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lines>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Lines)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Lines)
    MergeFrom(*source);
  }
}

void Lines::MergeFrom(const Lines& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Lines)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  if (from._internal_has_cam_id()) {
    _internal_set_cam_id(from._internal_cam_id());
  }
}

void Lines::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Lines)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lines::CopyFrom(const Lines& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Lines)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lines::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(lines_)) return false;
  return true;
}

void Lines::InternalSwap(Lines* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lines_.InternalSwap(&other->lines_);
  swap(cam_id_, other->cam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lines::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorldSpaceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WorldSpaceInfo>()._has_bits_);
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CommonProto::Velocity& vel(const WorldSpaceInfo* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CommonProto::Polygon& poly(const WorldSpaceInfo* msg);
  static void set_has_poly(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CommonProto::Point& position(const WorldSpaceInfo* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_traversable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hmw(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ttc(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_curr_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CommonProto::Point& position_obs(const WorldSpaceInfo* msg);
  static void set_has_position_obs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CommonProto::Velocity& vel_abs_world(const WorldSpaceInfo* msg);
  static void set_has_vel_abs_world(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sigma_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sigma_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sigma_height(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sigma_length(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_conf_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::CommonProto::Velocity&
WorldSpaceInfo::_Internal::vel(const WorldSpaceInfo* msg) {
  return *msg->vel_;
}
const ::CommonProto::Polygon&
WorldSpaceInfo::_Internal::poly(const WorldSpaceInfo* msg) {
  return *msg->poly_;
}
const ::CommonProto::Point&
WorldSpaceInfo::_Internal::position(const WorldSpaceInfo* msg) {
  return *msg->position_;
}
const ::CommonProto::Point&
WorldSpaceInfo::_Internal::position_obs(const WorldSpaceInfo* msg) {
  return *msg->position_obs_;
}
const ::CommonProto::Velocity&
WorldSpaceInfo::_Internal::vel_abs_world(const WorldSpaceInfo* msg) {
  return *msg->vel_abs_world_;
}
WorldSpaceInfo::WorldSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sigma_vel_(arena),
  sigma_position_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.WorldSpaceInfo)
}
WorldSpaceInfo::WorldSpaceInfo(const WorldSpaceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sigma_vel_(from.sigma_vel_),
      sigma_position_(from.sigma_position_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vel()) {
    vel_ = new ::CommonProto::Velocity(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  if (from._internal_has_poly()) {
    poly_ = new ::CommonProto::Polygon(*from.poly_);
  } else {
    poly_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::CommonProto::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_position_obs()) {
    position_obs_ = new ::CommonProto::Point(*from.position_obs_);
  } else {
    position_obs_ = nullptr;
  }
  if (from._internal_has_vel_abs_world()) {
    vel_abs_world_ = new ::CommonProto::Velocity(*from.vel_abs_world_);
  } else {
    vel_abs_world_ = nullptr;
  }
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_length_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(sigma_length_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.WorldSpaceInfo)
}

void WorldSpaceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldSpaceInfo_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vel_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sigma_length_) -
      reinterpret_cast<char*>(&vel_)) + sizeof(sigma_length_));
}

WorldSpaceInfo::~WorldSpaceInfo() {
  // @@protoc_insertion_point(destructor:CommonProto.WorldSpaceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorldSpaceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete poly_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_obs_;
  if (this != internal_default_instance()) delete vel_abs_world_;
}

void WorldSpaceInfo::ArenaDtor(void* object) {
  WorldSpaceInfo* _this = reinterpret_cast< WorldSpaceInfo* >(object);
  (void)_this;
}
void WorldSpaceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorldSpaceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldSpaceInfo& WorldSpaceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldSpaceInfo_common_2eproto.base);
  return *internal_default_instance();
}


void WorldSpaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.WorldSpaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sigma_vel_.Clear();
  sigma_position_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vel_ != nullptr);
      vel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(poly_ != nullptr);
      poly_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(position_obs_ != nullptr);
      position_obs_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(vel_abs_world_ != nullptr);
      vel_abs_world_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&yaw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&yaw_)) + sizeof(width_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sigma_width_) -
        reinterpret_cast<char*>(&height_)) + sizeof(sigma_width_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&sigma_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sigma_length_) -
        reinterpret_cast<char*>(&sigma_height_)) + sizeof(sigma_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldSpaceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.Velocity vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.Polygon poly = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_poly(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.Point position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 traversable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_traversable(&has_bits);
          traversable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float hmw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_hmw(&has_bits);
          hmw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ttc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ttc(&has_bits);
          ttc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 curr_lane = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_curr_lane(&has_bits);
          curr_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.Point position_obs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_obs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.Velocity vel_abs_world = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_abs_world(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sigma_yaw = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_sigma_yaw(&has_bits);
          sigma_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float sigma_vel = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_sigma_vel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<253>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sigma_vel(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sigma_width = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_sigma_width(&has_bits);
          sigma_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigma_height = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_sigma_height(&has_bits);
          sigma_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float sigma_position = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_sigma_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<277>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sigma_position(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sigma_length = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_sigma_length(&has_bits);
          sigma_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float conf_yaw = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_conf_yaw(&has_bits);
          conf_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldSpaceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.WorldSpaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float yaw = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_yaw(), target);
  }

  // optional .CommonProto.Velocity vel = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vel(this), target, stream);
  }

  // optional float length = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_length(), target);
  }

  // optional float width = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_width(), target);
  }

  // optional float height = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_height(), target);
  }

  // optional .CommonProto.Polygon poly = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::poly(this), target, stream);
  }

  // optional .CommonProto.Point position = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::position(this), target, stream);
  }

  // optional int32 traversable = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_traversable(), target);
  }

  // optional float hmw = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_hmw(), target);
  }

  // optional float ttc = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_ttc(), target);
  }

  // optional int32 curr_lane = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_curr_lane(), target);
  }

  // optional .CommonProto.Point position_obs = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::position_obs(this), target, stream);
  }

  // optional .CommonProto.Velocity vel_abs_world = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::vel_abs_world(this), target, stream);
  }

  // optional float sigma_yaw = 30;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_sigma_yaw(), target);
  }

  // repeated float sigma_vel = 31;
  for (int i = 0, n = this->_internal_sigma_vel_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_sigma_vel(i), target);
  }

  // optional float sigma_width = 32;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_sigma_width(), target);
  }

  // optional float sigma_height = 33;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_sigma_height(), target);
  }

  // repeated float sigma_position = 34;
  for (int i = 0, n = this->_internal_sigma_position_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_sigma_position(i), target);
  }

  // optional float sigma_length = 35;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_sigma_length(), target);
  }

  // optional float conf_yaw = 36;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_conf_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.WorldSpaceInfo)
  return target;
}

size_t WorldSpaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.WorldSpaceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sigma_vel = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sigma_vel_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sigma_vel_size());
    total_size += data_size;
  }

  // repeated float sigma_position = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sigma_position_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sigma_position_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CommonProto.Velocity vel = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vel_);
    }

    // optional .CommonProto.Polygon poly = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poly_);
    }

    // optional .CommonProto.Point position = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .CommonProto.Point position_obs = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_obs_);
    }

    // optional .CommonProto.Velocity vel_abs_world = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vel_abs_world_);
    }

    // optional float yaw = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float length = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float width = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float height = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 traversable = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_traversable());
    }

    // optional float hmw = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float ttc = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional int32 curr_lane = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_curr_lane());
    }

    // optional float conf_yaw = 36;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float sigma_yaw = 30;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float sigma_width = 32;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional float sigma_height = 33;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float sigma_length = 35;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldSpaceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.WorldSpaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldSpaceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldSpaceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.WorldSpaceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.WorldSpaceInfo)
    MergeFrom(*source);
  }
}

void WorldSpaceInfo::MergeFrom(const WorldSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.WorldSpaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sigma_vel_.MergeFrom(from.sigma_vel_);
  sigma_position_.MergeFrom(from.sigma_position_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vel()->::CommonProto::Velocity::MergeFrom(from._internal_vel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_poly()->::CommonProto::Polygon::MergeFrom(from._internal_poly());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_position()->::CommonProto::Point::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_position_obs()->::CommonProto::Point::MergeFrom(from._internal_position_obs());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_vel_abs_world()->::CommonProto::Velocity::MergeFrom(from._internal_vel_abs_world());
    }
    if (cached_has_bits & 0x00000020u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000040u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000200u) {
      traversable_ = from.traversable_;
    }
    if (cached_has_bits & 0x00000400u) {
      hmw_ = from.hmw_;
    }
    if (cached_has_bits & 0x00000800u) {
      ttc_ = from.ttc_;
    }
    if (cached_has_bits & 0x00001000u) {
      curr_lane_ = from.curr_lane_;
    }
    if (cached_has_bits & 0x00002000u) {
      conf_yaw_ = from.conf_yaw_;
    }
    if (cached_has_bits & 0x00004000u) {
      sigma_yaw_ = from.sigma_yaw_;
    }
    if (cached_has_bits & 0x00008000u) {
      sigma_width_ = from.sigma_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      sigma_height_ = from.sigma_height_;
    }
    if (cached_has_bits & 0x00020000u) {
      sigma_length_ = from.sigma_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorldSpaceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.WorldSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldSpaceInfo::CopyFrom(const WorldSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.WorldSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldSpaceInfo::IsInitialized() const {
  if (_internal_has_vel()) {
    if (!vel_->IsInitialized()) return false;
  }
  if (_internal_has_poly()) {
    if (!poly_->IsInitialized()) return false;
  }
  if (_internal_has_position()) {
    if (!position_->IsInitialized()) return false;
  }
  if (_internal_has_position_obs()) {
    if (!position_obs_->IsInitialized()) return false;
  }
  if (_internal_has_vel_abs_world()) {
    if (!vel_abs_world_->IsInitialized()) return false;
  }
  return true;
}

void WorldSpaceInfo::InternalSwap(WorldSpaceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sigma_vel_.InternalSwap(&other->sigma_vel_);
  sigma_position_.InternalSwap(&other->sigma_position_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldSpaceInfo, sigma_length_)
      + sizeof(WorldSpaceInfo::sigma_length_)
      - PROTOBUF_FIELD_OFFSET(WorldSpaceInfo, vel_)>(
          reinterpret_cast<char*>(&vel_),
          reinterpret_cast<char*>(&other->vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldSpaceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageSpaceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageSpaceInfo>()._has_bits_);
  static const ::CommonProto::Rect& rect(const ImageSpaceInfo* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CommonProto::Box3D& box(const ImageSpaceInfo* msg);
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CommonProto::Polygon& poly(const ImageSpaceInfo* msg);
  static void set_has_poly(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sigma_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sigma_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sigma_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sigma_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CommonProto::Rect&
ImageSpaceInfo::_Internal::rect(const ImageSpaceInfo* msg) {
  return *msg->rect_;
}
const ::CommonProto::Box3D&
ImageSpaceInfo::_Internal::box(const ImageSpaceInfo* msg) {
  return *msg->box_;
}
const ::CommonProto::Polygon&
ImageSpaceInfo::_Internal::poly(const ImageSpaceInfo* msg) {
  return *msg->poly_;
}
ImageSpaceInfo::ImageSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.ImageSpaceInfo)
}
ImageSpaceInfo::ImageSpaceInfo(const ImageSpaceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rect()) {
    rect_ = new ::CommonProto::Rect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_box()) {
    box_ = new ::CommonProto::Box3D(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_poly()) {
    poly_ = new ::CommonProto::Polygon(*from.poly_);
  } else {
    poly_ = nullptr;
  }
  ::memcpy(&sigma_width_, &from.sigma_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_y_) -
    reinterpret_cast<char*>(&sigma_width_)) + sizeof(sigma_y_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.ImageSpaceInfo)
}

void ImageSpaceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageSpaceInfo_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sigma_y_) -
      reinterpret_cast<char*>(&rect_)) + sizeof(sigma_y_));
}

ImageSpaceInfo::~ImageSpaceInfo() {
  // @@protoc_insertion_point(destructor:CommonProto.ImageSpaceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageSpaceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete poly_;
}

void ImageSpaceInfo::ArenaDtor(void* object) {
  ImageSpaceInfo* _this = reinterpret_cast< ImageSpaceInfo* >(object);
  (void)_this;
}
void ImageSpaceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageSpaceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageSpaceInfo& ImageSpaceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageSpaceInfo_common_2eproto.base);
  return *internal_default_instance();
}


void ImageSpaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.ImageSpaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(box_ != nullptr);
      box_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(poly_ != nullptr);
      poly_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&sigma_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sigma_y_) -
        reinterpret_cast<char*>(&sigma_width_)) + sizeof(sigma_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageSpaceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CommonProto.Rect rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.Box3D box = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.Polygon poly = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_poly(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sigma_width = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_sigma_width(&has_bits);
          sigma_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigma_height = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_sigma_height(&has_bits);
          sigma_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigma_x = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_sigma_x(&has_bits);
          sigma_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigma_y = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_sigma_y(&has_bits);
          sigma_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageSpaceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.ImageSpaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CommonProto.Rect rect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rect(this), target, stream);
  }

  // optional .CommonProto.Box3D box = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::box(this), target, stream);
  }

  // optional .CommonProto.Polygon poly = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::poly(this), target, stream);
  }

  // optional float sigma_width = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_sigma_width(), target);
  }

  // optional float sigma_height = 21;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_sigma_height(), target);
  }

  // optional float sigma_x = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_sigma_x(), target);
  }

  // optional float sigma_y = 23;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_sigma_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.ImageSpaceInfo)
  return target;
}

size_t ImageSpaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.ImageSpaceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CommonProto.Rect rect = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rect_);
    }

    // optional .CommonProto.Box3D box = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_);
    }

    // optional .CommonProto.Polygon poly = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poly_);
    }

    // optional float sigma_width = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float sigma_height = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float sigma_x = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float sigma_y = 23;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageSpaceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.ImageSpaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSpaceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageSpaceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.ImageSpaceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.ImageSpaceInfo)
    MergeFrom(*source);
  }
}

void ImageSpaceInfo::MergeFrom(const ImageSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.ImageSpaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rect()->::CommonProto::Rect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_box()->::CommonProto::Box3D::MergeFrom(from._internal_box());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_poly()->::CommonProto::Polygon::MergeFrom(from._internal_poly());
    }
    if (cached_has_bits & 0x00000008u) {
      sigma_width_ = from.sigma_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      sigma_height_ = from.sigma_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      sigma_x_ = from.sigma_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      sigma_y_ = from.sigma_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageSpaceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.ImageSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSpaceInfo::CopyFrom(const ImageSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.ImageSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSpaceInfo::IsInitialized() const {
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  if (_internal_has_box()) {
    if (!box_->IsInitialized()) return false;
  }
  if (_internal_has_poly()) {
    if (!poly_->IsInitialized()) return false;
  }
  return true;
}

void ImageSpaceInfo::InternalSwap(ImageSpaceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageSpaceInfo, sigma_y_)
      + sizeof(ImageSpaceInfo::sigma_y_)
      - PROTOBUF_FIELD_OFFSET(ImageSpaceInfo, rect_)>(
          reinterpret_cast<char*>(&rect_),
          reinterpret_cast<char*>(&other->rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageSpaceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrackingFeatureMap::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingFeatureMap>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrackingFeatureMap::TrackingFeatureMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.TrackingFeatureMap)
}
TrackingFeatureMap::TrackingFeatureMap(const TrackingFeatureMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CommonProto.TrackingFeatureMap)
}

void TrackingFeatureMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackingFeatureMap_common_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrackingFeatureMap::~TrackingFeatureMap() {
  // @@protoc_insertion_point(destructor:CommonProto.TrackingFeatureMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingFeatureMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackingFeatureMap::ArenaDtor(void* object) {
  TrackingFeatureMap* _this = reinterpret_cast< TrackingFeatureMap* >(object);
  (void)_this;
}
void TrackingFeatureMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingFeatureMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackingFeatureMap& TrackingFeatureMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackingFeatureMap_common_2eproto.base);
  return *internal_default_instance();
}


void TrackingFeatureMap::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.TrackingFeatureMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingFeatureMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingFeatureMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.TrackingFeatureMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.TrackingFeatureMap)
  return target;
}

size_t TrackingFeatureMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.TrackingFeatureMap)
  size_t total_size = 0;

  // required bytes data = 1;
  if (_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingFeatureMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.TrackingFeatureMap)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingFeatureMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingFeatureMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.TrackingFeatureMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.TrackingFeatureMap)
    MergeFrom(*source);
  }
}

void TrackingFeatureMap::MergeFrom(const TrackingFeatureMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.TrackingFeatureMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void TrackingFeatureMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.TrackingFeatureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingFeatureMap::CopyFrom(const TrackingFeatureMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.TrackingFeatureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingFeatureMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrackingFeatureMap::InternalSwap(TrackingFeatureMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingFeatureMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Obstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<Obstacle>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_life_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_age(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CommonProto::ImageSpaceInfo& img_info(const Obstacle* msg);
  static void set_has_img_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CommonProto::WorldSpaceInfo& world_info(const Obstacle* msg);
  static void set_has_world_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::CommonProto::ImageSpaceInfo&
Obstacle::_Internal::img_info(const Obstacle* msg) {
  return *msg->img_info_;
}
const ::CommonProto::WorldSpaceInfo&
Obstacle::_Internal::world_info(const Obstacle* msg) {
  return *msg->world_info_;
}
Obstacle::Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_(arena),
  property_name_(arena),
  property_type_(arena),
  property_conf_(arena),
  tracking_fmap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      property_(from.property_),
      property_name_(from.property_name_),
      property_type_(from.property_type_),
      property_conf_(from.property_conf_),
      tracking_fmap_(from.tracking_fmap_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_img_info()) {
    img_info_ = new ::CommonProto::ImageSpaceInfo(*from.img_info_);
  } else {
    img_info_ = nullptr;
  }
  if (from._internal_has_world_info()) {
    world_info_ = new ::CommonProto::WorldSpaceInfo(*from.world_info_);
  } else {
    world_info_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&id_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Obstacle)
}

void Obstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacle_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&img_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&img_info_)) + sizeof(age_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:CommonProto.Obstacle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Obstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete img_info_;
  if (this != internal_default_instance()) delete world_info_;
}

void Obstacle::ArenaDtor(void* object) {
  Obstacle* _this = reinterpret_cast< Obstacle* >(object);
  (void)_this;
}
void Obstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle& Obstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacle_common_2eproto.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  property_name_.Clear();
  property_type_.Clear();
  property_conf_.Clear();
  tracking_fmap_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(img_info_ != nullptr);
      img_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(world_info_ != nullptr);
      world_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_) -
        reinterpret_cast<char*>(&id_)) + sizeof(age_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_conf(&has_bits);
          conf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 life_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_life_time(&has_bits);
          life_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 age = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_age(&has_bits);
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.ImageSpaceInfo img_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_img_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.WorldSpaceInfo world_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 property = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_property(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_property(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string property_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_property_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommonProto.Obstacle.property_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 property_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_property_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_property_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float property_conf = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_property_conf(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<133>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_property_conf(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.TrackingFeatureMap tracking_fmap = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tracking_fmap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // optional int32 conf = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_conf(), target);
  }

  // optional int32 life_time = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_life_time(), target);
  }

  // optional int32 age = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_age(), target);
  }

  // optional .CommonProto.ImageSpaceInfo img_info = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::img_info(this), target, stream);
  }

  // optional .CommonProto.WorldSpaceInfo world_info = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::world_info(this), target, stream);
  }

  // repeated int32 property = 13;
  for (int i = 0, n = this->_internal_property_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_property(i), target);
  }

  // repeated string property_name = 14;
  for (int i = 0, n = this->_internal_property_name_size(); i < n; i++) {
    const auto& s = this->_internal_property_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CommonProto.Obstacle.property_name");
    target = stream->WriteString(14, s, target);
  }

  // repeated int32 property_type = 15;
  for (int i = 0, n = this->_internal_property_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_property_type(i), target);
  }

  // repeated float property_conf = 16;
  for (int i = 0, n = this->_internal_property_conf_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_property_conf(i), target);
  }

  // repeated .CommonProto.TrackingFeatureMap tracking_fmap = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracking_fmap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_tracking_fmap(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Obstacle)
  return target;
}

size_t Obstacle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.Obstacle)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  return total_size;
}
size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Obstacle)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 property = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->property_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_property_size());
    total_size += data_size;
  }

  // repeated string property_name = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(property_name_.size());
  for (int i = 0, n = property_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      property_name_.Get(i));
  }

  // repeated int32 property_type = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->property_type_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_property_type_size());
    total_size += data_size;
  }

  // repeated float property_conf = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_property_conf_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_property_conf_size());
    total_size += data_size;
  }

  // repeated .CommonProto.TrackingFeatureMap tracking_fmap = 17;
  total_size += 2UL * this->_internal_tracking_fmap_size();
  for (const auto& msg : this->tracking_fmap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CommonProto.ImageSpaceInfo img_info = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *img_info_);
    }

    // optional .CommonProto.WorldSpaceInfo world_info = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *world_info_);
    }

  }
  if (cached_has_bits & 0x00000070u) {
    // optional int32 conf = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_conf());
    }

    // optional int32 life_time = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_life_time());
    }

    // optional int32 age = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_age());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Obstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  property_name_.MergeFrom(from.property_name_);
  property_type_.MergeFrom(from.property_type_);
  property_conf_.MergeFrom(from.property_conf_);
  tracking_fmap_.MergeFrom(from.tracking_fmap_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_img_info()->::CommonProto::ImageSpaceInfo::MergeFrom(from._internal_img_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_world_info()->::CommonProto::WorldSpaceInfo::MergeFrom(from._internal_world_info());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      conf_ = from.conf_;
    }
    if (cached_has_bits & 0x00000020u) {
      life_time_ = from.life_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      age_ = from.age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Obstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tracking_fmap_)) return false;
  if (_internal_has_img_info()) {
    if (!img_info_->IsInitialized()) return false;
  }
  if (_internal_has_world_info()) {
    if (!world_info_->IsInitialized()) return false;
  }
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_.InternalSwap(&other->property_);
  property_name_.InternalSwap(&other->property_name_);
  property_type_.InternalSwap(&other->property_type_);
  property_conf_.InternalSwap(&other->property_conf_);
  tracking_fmap_.InternalSwap(&other->tracking_fmap_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Obstacle, age_)
      + sizeof(Obstacle::age_)
      - PROTOBUF_FIELD_OFFSET(Obstacle, img_info_)>(
          reinterpret_cast<char*>(&img_info_),
          reinterpret_cast<char*>(&other->img_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Obstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<Obstacles>()._has_bits_);
  static void set_has_cam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_conf_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Obstacles::Obstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  obstacle_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      obstacle_(from.obstacle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cam_id_, &from.cam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&conf_scale_) -
    reinterpret_cast<char*>(&cam_id_)) + sizeof(conf_scale_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Obstacles)
}

void Obstacles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacles_common_2eproto.base);
  cam_id_ = 0;
  conf_scale_ = 0.1f;
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:CommonProto.Obstacles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Obstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Obstacles::ArenaDtor(void* object) {
  Obstacles* _this = reinterpret_cast< Obstacles* >(object);
  (void)_this;
}
void Obstacles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Obstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacles& Obstacles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacles_common_2eproto.base);
  return *internal_default_instance();
}


void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    cam_id_ = 0;
    conf_scale_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cam_id(&has_bits);
          cam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Obstacle obstacle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float conf_scale = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_conf_scale(&has_bits);
          conf_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cam_id(), target);
  }

  // repeated .CommonProto.Obstacle obstacle = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_obstacle(i), target, stream);
  }

  // optional float conf_scale = 3 [default = 0.1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_conf_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Obstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.Obstacle obstacle = 2;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 cam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cam_id());
    }

    // optional float conf_scale = 3 [default = 0.1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Obstacles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cam_id_ = from.cam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      conf_scale_ = from.conf_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Obstacles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obstacle_)) return false;
  return true;
}

void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_.InternalSwap(&other->obstacle_);
  swap(cam_id_, other->cam_id_);
  swap(conf_scale_, other->conf_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeatureMap::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureMap>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FeatureMap::FeatureMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.FeatureMap)
}
FeatureMap::FeatureMap(const FeatureMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CommonProto.FeatureMap)
}

void FeatureMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureMap_common_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FeatureMap::~FeatureMap() {
  // @@protoc_insertion_point(destructor:CommonProto.FeatureMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeatureMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FeatureMap::ArenaDtor(void* object) {
  FeatureMap* _this = reinterpret_cast< FeatureMap* >(object);
  (void)_this;
}
void FeatureMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureMap& FeatureMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureMap_common_2eproto.base);
  return *internal_default_instance();
}


void FeatureMap::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.FeatureMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.FeatureMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.FeatureMap)
  return target;
}

size_t FeatureMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.FeatureMap)
  size_t total_size = 0;

  // required bytes data = 1;
  if (_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.FeatureMap)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.FeatureMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.FeatureMap)
    MergeFrom(*source);
  }
}

void FeatureMap::MergeFrom(const FeatureMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.FeatureMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void FeatureMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.FeatureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureMap::CopyFrom(const FeatureMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.FeatureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FeatureMap::InternalSwap(FeatureMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObstacleRaw::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleRaw>()._has_bits_);
  static const ::CommonProto::Rect& rect(const ObstacleRaw* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::CommonProto::Rect&
ObstacleRaw::_Internal::rect(const ObstacleRaw* msg) {
  return *msg->rect_;
}
ObstacleRaw::ObstacleRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_(arena),
  property_name_(arena),
  property_type_(arena),
  property_conf_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.ObstacleRaw)
}
ObstacleRaw::ObstacleRaw(const ObstacleRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      property_(from.property_),
      property_name_(from.property_name_),
      property_type_(from.property_type_),
      property_conf_(from.property_conf_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rect()) {
    rect_ = new ::CommonProto::Rect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  ::memcpy(&conf_, &from.conf_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_) -
    reinterpret_cast<char*>(&conf_)) + sizeof(model_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.ObstacleRaw)
}

void ObstacleRaw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleRaw_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&rect_)) + sizeof(model_));
}

ObstacleRaw::~ObstacleRaw() {
  // @@protoc_insertion_point(destructor:CommonProto.ObstacleRaw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleRaw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rect_;
}

void ObstacleRaw::ArenaDtor(void* object) {
  ObstacleRaw* _this = reinterpret_cast< ObstacleRaw* >(object);
  (void)_this;
}
void ObstacleRaw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleRaw& ObstacleRaw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleRaw_common_2eproto.base);
  return *internal_default_instance();
}


void ObstacleRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.ObstacleRaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  property_name_.Clear();
  property_type_.Clear();
  property_conf_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rect_ != nullptr);
    rect_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&conf_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_) -
        reinterpret_cast<char*>(&conf_)) + sizeof(model_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleRaw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CommonProto.Rect rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_conf(&has_bits);
          conf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_model(&has_bits);
          model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_property(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_property(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string property_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_property_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommonProto.ObstacleRaw.property_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 property_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_property_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_property_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float property_conf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_property_conf(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_property_conf(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleRaw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.ObstacleRaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CommonProto.Rect rect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rect(this), target, stream);
  }

  // required float conf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_conf(), target);
  }

  // required int32 model = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_model(), target);
  }

  // repeated int32 property = 6;
  for (int i = 0, n = this->_internal_property_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_property(i), target);
  }

  // repeated string property_name = 7;
  for (int i = 0, n = this->_internal_property_name_size(); i < n; i++) {
    const auto& s = this->_internal_property_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CommonProto.ObstacleRaw.property_name");
    target = stream->WriteString(7, s, target);
  }

  // repeated int32 property_type = 8;
  for (int i = 0, n = this->_internal_property_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_property_type(i), target);
  }

  // repeated float property_conf = 9;
  for (int i = 0, n = this->_internal_property_conf_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_property_conf(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.ObstacleRaw)
  return target;
}

size_t ObstacleRaw::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.ObstacleRaw)
  size_t total_size = 0;

  if (_internal_has_rect()) {
    // required .CommonProto.Rect rect = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);
  }

  if (_internal_has_conf()) {
    // required float conf = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_model()) {
    // required int32 model = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model());
  }

  return total_size;
}
size_t ObstacleRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.ObstacleRaw)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .CommonProto.Rect rect = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);

    // required float conf = 2;
    total_size += 1 + 4;

    // required int32 model = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 property = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->property_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_property_size());
    total_size += data_size;
  }

  // repeated string property_name = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(property_name_.size());
  for (int i = 0, n = property_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      property_name_.Get(i));
  }

  // repeated int32 property_type = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->property_type_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_property_type_size());
    total_size += data_size;
  }

  // repeated float property_conf = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_property_conf_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_property_conf_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleRaw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.ObstacleRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleRaw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleRaw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.ObstacleRaw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.ObstacleRaw)
    MergeFrom(*source);
  }
}

void ObstacleRaw::MergeFrom(const ObstacleRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.ObstacleRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  property_name_.MergeFrom(from.property_name_);
  property_type_.MergeFrom(from.property_type_);
  property_conf_.MergeFrom(from.property_conf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rect()->::CommonProto::Rect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00000002u) {
      conf_ = from.conf_;
    }
    if (cached_has_bits & 0x00000004u) {
      model_ = from.model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleRaw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.ObstacleRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleRaw::CopyFrom(const ObstacleRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.ObstacleRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleRaw::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  return true;
}

void ObstacleRaw::InternalSwap(ObstacleRaw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_.InternalSwap(&other->property_);
  property_name_.InternalSwap(&other->property_name_);
  property_type_.InternalSwap(&other->property_type_);
  property_conf_.InternalSwap(&other->property_conf_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleRaw, model_)
      + sizeof(ObstacleRaw::model_)
      - PROTOBUF_FIELD_OFFSET(ObstacleRaw, rect_)>(
          reinterpret_cast<char*>(&rect_),
          reinterpret_cast<char*>(&other->rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleRaw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObstacleRaws::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleRaws>()._has_bits_);
  static void set_has_cam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_conf_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObstacleRaws::ObstacleRaws(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  obstacle_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.ObstacleRaws)
}
ObstacleRaws::ObstacleRaws(const ObstacleRaws& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      obstacle_(from.obstacle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cam_id_, &from.cam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&conf_scale_) -
    reinterpret_cast<char*>(&cam_id_)) + sizeof(conf_scale_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.ObstacleRaws)
}

void ObstacleRaws::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleRaws_common_2eproto.base);
  cam_id_ = 0;
  conf_scale_ = 0.1f;
}

ObstacleRaws::~ObstacleRaws() {
  // @@protoc_insertion_point(destructor:CommonProto.ObstacleRaws)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleRaws::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObstacleRaws::ArenaDtor(void* object) {
  ObstacleRaws* _this = reinterpret_cast< ObstacleRaws* >(object);
  (void)_this;
}
void ObstacleRaws::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleRaws::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleRaws& ObstacleRaws::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleRaws_common_2eproto.base);
  return *internal_default_instance();
}


void ObstacleRaws::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.ObstacleRaws)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    cam_id_ = 0;
    conf_scale_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleRaws::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cam_id(&has_bits);
          cam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.ObstacleRaw obstacle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float conf_scale = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_conf_scale(&has_bits);
          conf_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleRaws::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.ObstacleRaws)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cam_id(), target);
  }

  // repeated .CommonProto.ObstacleRaw obstacle = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_obstacle(i), target, stream);
  }

  // optional float conf_scale = 3 [default = 0.1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_conf_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.ObstacleRaws)
  return target;
}

size_t ObstacleRaws::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.ObstacleRaws)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.ObstacleRaw obstacle = 2;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 cam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cam_id());
    }

    // optional float conf_scale = 3 [default = 0.1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleRaws::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.ObstacleRaws)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleRaws* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleRaws>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.ObstacleRaws)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.ObstacleRaws)
    MergeFrom(*source);
  }
}

void ObstacleRaws::MergeFrom(const ObstacleRaws& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.ObstacleRaws)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cam_id_ = from.cam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      conf_scale_ = from.conf_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleRaws::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.ObstacleRaws)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleRaws::CopyFrom(const ObstacleRaws& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.ObstacleRaws)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleRaws::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obstacle_)) return false;
  return true;
}

void ObstacleRaws::InternalSwap(ObstacleRaws* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_.InternalSwap(&other->obstacle_);
  swap(cam_id_, other->cam_id_);
  swap(conf_scale_, other->conf_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleRaws::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FreeSpacePoints::_Internal {
 public:
  using HasBits = decltype(std::declval<FreeSpacePoints>()._has_bits_);
  static void set_has_cam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FreeSpacePoints::FreeSpacePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_(arena),
  pts_vcs_(arena),
  pts_img_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.FreeSpacePoints)
}
FreeSpacePoints::FreeSpacePoints(const FreeSpacePoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      property_(from.property_),
      pts_vcs_(from.pts_vcs_),
      pts_img_(from.pts_img_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cam_id_ = from.cam_id_;
  // @@protoc_insertion_point(copy_constructor:CommonProto.FreeSpacePoints)
}

void FreeSpacePoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FreeSpacePoints_common_2eproto.base);
  cam_id_ = 0;
}

FreeSpacePoints::~FreeSpacePoints() {
  // @@protoc_insertion_point(destructor:CommonProto.FreeSpacePoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreeSpacePoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FreeSpacePoints::ArenaDtor(void* object) {
  FreeSpacePoints* _this = reinterpret_cast< FreeSpacePoints* >(object);
  (void)_this;
}
void FreeSpacePoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreeSpacePoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreeSpacePoints& FreeSpacePoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreeSpacePoints_common_2eproto.base);
  return *internal_default_instance();
}


void FreeSpacePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.FreeSpacePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  pts_vcs_.Clear();
  pts_img_.Clear();
  cam_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreeSpacePoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_property(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_property(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cam_id(&has_bits);
          cam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Point pts_vcs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts_vcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Point pts_img = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts_img(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreeSpacePoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.FreeSpacePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 property = 3;
  for (int i = 0, n = this->_internal_property_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_property(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 cam_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cam_id(), target);
  }

  // repeated .CommonProto.Point pts_vcs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_vcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pts_vcs(i), target, stream);
  }

  // repeated .CommonProto.Point pts_img = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_img_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_pts_img(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.FreeSpacePoints)
  return target;
}

size_t FreeSpacePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.FreeSpacePoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 property = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->property_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_property_size());
    total_size += data_size;
  }

  // repeated .CommonProto.Point pts_vcs = 5;
  total_size += 1UL * this->_internal_pts_vcs_size();
  for (const auto& msg : this->pts_vcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CommonProto.Point pts_img = 6;
  total_size += 1UL * this->_internal_pts_img_size();
  for (const auto& msg : this->pts_img_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 cam_id = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cam_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreeSpacePoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.FreeSpacePoints)
  GOOGLE_DCHECK_NE(&from, this);
  const FreeSpacePoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreeSpacePoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.FreeSpacePoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.FreeSpacePoints)
    MergeFrom(*source);
  }
}

void FreeSpacePoints::MergeFrom(const FreeSpacePoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.FreeSpacePoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  pts_vcs_.MergeFrom(from.pts_vcs_);
  pts_img_.MergeFrom(from.pts_img_);
  if (from._internal_has_cam_id()) {
    _internal_set_cam_id(from._internal_cam_id());
  }
}

void FreeSpacePoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.FreeSpacePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeSpacePoints::CopyFrom(const FreeSpacePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.FreeSpacePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeSpacePoints::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pts_vcs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pts_img_)) return false;
  return true;
}

void FreeSpacePoints::InternalSwap(FreeSpacePoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_.InternalSwap(&other->property_);
  pts_vcs_.InternalSwap(&other->pts_vcs_);
  pts_img_.InternalSwap(&other->pts_img_);
  swap(cam_id_, other->cam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FreeSpacePoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraMatrix::_Internal {
 public:
};

CameraMatrix::CameraMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mat_gnd2img_(arena),
  mat_img2gnd_(arena),
  mat_vcsgnd2img_(arena),
  mat_img2vcsgnd_(arena),
  mat_local2img_(arena),
  mat_img2local_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.CameraMatrix)
}
CameraMatrix::CameraMatrix(const CameraMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mat_gnd2img_(from.mat_gnd2img_),
      mat_img2gnd_(from.mat_img2gnd_),
      mat_vcsgnd2img_(from.mat_vcsgnd2img_),
      mat_img2vcsgnd_(from.mat_img2vcsgnd_),
      mat_local2img_(from.mat_local2img_),
      mat_img2local_(from.mat_img2local_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CommonProto.CameraMatrix)
}

void CameraMatrix::SharedCtor() {
}

CameraMatrix::~CameraMatrix() {
  // @@protoc_insertion_point(destructor:CommonProto.CameraMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraMatrix::ArenaDtor(void* object) {
  CameraMatrix* _this = reinterpret_cast< CameraMatrix* >(object);
  (void)_this;
}
void CameraMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraMatrix& CameraMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraMatrix_common_2eproto.base);
  return *internal_default_instance();
}


void CameraMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.CameraMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mat_gnd2img_.Clear();
  mat_img2gnd_.Clear();
  mat_vcsgnd2img_.Clear();
  mat_img2vcsgnd_.Clear();
  mat_local2img_.Clear();
  mat_img2local_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float mat_gnd2img = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mat_gnd2img(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mat_gnd2img(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float mat_img2gnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mat_img2gnd(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mat_img2gnd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float mat_vcsgnd2img = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mat_vcsgnd2img(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mat_vcsgnd2img(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float mat_img2vcsgnd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mat_img2vcsgnd(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mat_img2vcsgnd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float mat_local2img = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mat_local2img(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mat_local2img(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float mat_img2local = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mat_img2local(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mat_img2local(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.CameraMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mat_gnd2img = 1;
  for (int i = 0, n = this->_internal_mat_gnd2img_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mat_gnd2img(i), target);
  }

  // repeated float mat_img2gnd = 2;
  for (int i = 0, n = this->_internal_mat_img2gnd_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_mat_img2gnd(i), target);
  }

  // repeated float mat_vcsgnd2img = 3;
  for (int i = 0, n = this->_internal_mat_vcsgnd2img_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_mat_vcsgnd2img(i), target);
  }

  // repeated float mat_img2vcsgnd = 4;
  for (int i = 0, n = this->_internal_mat_img2vcsgnd_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_mat_img2vcsgnd(i), target);
  }

  // repeated float mat_local2img = 5;
  for (int i = 0, n = this->_internal_mat_local2img_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_mat_local2img(i), target);
  }

  // repeated float mat_img2local = 6;
  for (int i = 0, n = this->_internal_mat_img2local_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_mat_img2local(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.CameraMatrix)
  return target;
}

size_t CameraMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.CameraMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mat_gnd2img = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mat_gnd2img_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mat_gnd2img_size());
    total_size += data_size;
  }

  // repeated float mat_img2gnd = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mat_img2gnd_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mat_img2gnd_size());
    total_size += data_size;
  }

  // repeated float mat_vcsgnd2img = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mat_vcsgnd2img_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mat_vcsgnd2img_size());
    total_size += data_size;
  }

  // repeated float mat_img2vcsgnd = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mat_img2vcsgnd_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mat_img2vcsgnd_size());
    total_size += data_size;
  }

  // repeated float mat_local2img = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mat_local2img_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mat_local2img_size());
    total_size += data_size;
  }

  // repeated float mat_img2local = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mat_img2local_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mat_img2local_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.CameraMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.CameraMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.CameraMatrix)
    MergeFrom(*source);
  }
}

void CameraMatrix::MergeFrom(const CameraMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.CameraMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mat_gnd2img_.MergeFrom(from.mat_gnd2img_);
  mat_img2gnd_.MergeFrom(from.mat_img2gnd_);
  mat_vcsgnd2img_.MergeFrom(from.mat_vcsgnd2img_);
  mat_img2vcsgnd_.MergeFrom(from.mat_img2vcsgnd_);
  mat_local2img_.MergeFrom(from.mat_local2img_);
  mat_img2local_.MergeFrom(from.mat_img2local_);
}

void CameraMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.CameraMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrix::CopyFrom(const CameraMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.CameraMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrix::IsInitialized() const {
  return true;
}

void CameraMatrix::InternalSwap(CameraMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mat_gnd2img_.InternalSwap(&other->mat_gnd2img_);
  mat_img2gnd_.InternalSwap(&other->mat_img2gnd_);
  mat_vcsgnd2img_.InternalSwap(&other->mat_vcsgnd2img_);
  mat_img2vcsgnd_.InternalSwap(&other->mat_img2vcsgnd_);
  mat_local2img_.InternalSwap(&other->mat_local2img_);
  mat_img2local_.InternalSwap(&other->mat_img2local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DistortParam::_Internal {
 public:
};

DistortParam::DistortParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.DistortParam)
}
DistortParam::DistortParam(const DistortParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      param_(from.param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CommonProto.DistortParam)
}

void DistortParam::SharedCtor() {
}

DistortParam::~DistortParam() {
  // @@protoc_insertion_point(destructor:CommonProto.DistortParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistortParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DistortParam::ArenaDtor(void* object) {
  DistortParam* _this = reinterpret_cast< DistortParam* >(object);
  (void)_this;
}
void DistortParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistortParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistortParam& DistortParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistortParam_common_2eproto.base);
  return *internal_default_instance();
}


void DistortParam::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.DistortParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistortParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_param(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_param(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistortParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.DistortParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float param = 1;
  for (int i = 0, n = this->_internal_param_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_param(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.DistortParam)
  return target;
}

size_t DistortParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.DistortParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float param = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_param_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistortParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.DistortParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DistortParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistortParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.DistortParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.DistortParam)
    MergeFrom(*source);
  }
}

void DistortParam::MergeFrom(const DistortParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.DistortParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
}

void DistortParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.DistortParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistortParam::CopyFrom(const DistortParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.DistortParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistortParam::IsInitialized() const {
  return true;
}

void DistortParam::InternalSwap(DistortParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  param_.InternalSwap(&other->param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistortParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VCSParam::_Internal {
 public:
};

VCSParam::VCSParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rotation_(arena),
  translation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.VCSParam)
}
VCSParam::VCSParam(const VCSParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rotation_(from.rotation_),
      translation_(from.translation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CommonProto.VCSParam)
}

void VCSParam::SharedCtor() {
}

VCSParam::~VCSParam() {
  // @@protoc_insertion_point(destructor:CommonProto.VCSParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VCSParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VCSParam::ArenaDtor(void* object) {
  VCSParam* _this = reinterpret_cast< VCSParam* >(object);
  (void)_this;
}
void VCSParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VCSParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VCSParam& VCSParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VCSParam_common_2eproto.base);
  return *internal_default_instance();
}


void VCSParam::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.VCSParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotation_.Clear();
  translation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VCSParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rotation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_translation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_translation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VCSParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.VCSParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float rotation = 1;
  for (int i = 0, n = this->_internal_rotation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_rotation(i), target);
  }

  // repeated float translation = 2;
  for (int i = 0, n = this->_internal_translation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_translation(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.VCSParam)
  return target;
}

size_t VCSParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.VCSParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rotation = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotation_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rotation_size());
    total_size += data_size;
  }

  // repeated float translation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_translation_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_translation_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VCSParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.VCSParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VCSParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VCSParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.VCSParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.VCSParam)
    MergeFrom(*source);
  }
}

void VCSParam::MergeFrom(const VCSParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.VCSParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rotation_.MergeFrom(from.rotation_);
  translation_.MergeFrom(from.translation_);
}

void VCSParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.VCSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VCSParam::CopyFrom(const VCSParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.VCSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VCSParam::IsInitialized() const {
  return true;
}

void VCSParam::InternalSwap(VCSParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rotation_.InternalSwap(&other->rotation_);
  translation_.InternalSwap(&other->translation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VCSParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraParam>()._has_bits_);
  static void set_has_focal_u(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_focal_v(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_center_u(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_center_v(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_camera_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_camera_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_camera_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_fov(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_cali_status(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::CommonProto::DistortParam& distort(const CameraParam* msg);
  static void set_has_distort(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CommonProto::VCSParam& vcs(const CameraParam* msg);
  static void set_has_vcs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CommonProto::CameraMatrix& mat(const CameraParam* msg);
  static void set_has_mat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003ff0) ^ 0x00003ff0) != 0;
  }
};

const ::CommonProto::DistortParam&
CameraParam::_Internal::distort(const CameraParam* msg) {
  return *msg->distort_;
}
const ::CommonProto::VCSParam&
CameraParam::_Internal::vcs(const CameraParam* msg) {
  return *msg->vcs_;
}
const ::CommonProto::CameraMatrix&
CameraParam::_Internal::mat(const CameraParam* msg) {
  return *msg->mat_;
}
CameraParam::CameraParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.CameraParam)
}
CameraParam::CameraParam(const CameraParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vendor()) {
    vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor(), 
      GetArena());
  }
  if (from._internal_has_distort()) {
    distort_ = new ::CommonProto::DistortParam(*from.distort_);
  } else {
    distort_ = nullptr;
  }
  if (from._internal_has_vcs()) {
    vcs_ = new ::CommonProto::VCSParam(*from.vcs_);
  } else {
    vcs_ = nullptr;
  }
  if (from._internal_has_mat()) {
    mat_ = new ::CommonProto::CameraMatrix(*from.mat_);
  } else {
    mat_ = nullptr;
  }
  ::memcpy(&focal_u_, &from.focal_u_,
    static_cast<size_t>(reinterpret_cast<char*>(&cali_status_) -
    reinterpret_cast<char*>(&focal_u_)) + sizeof(cali_status_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.CameraParam)
}

void CameraParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraParam_common_2eproto.base);
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&distort_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cali_status_) -
      reinterpret_cast<char*>(&distort_)) + sizeof(cali_status_));
}

CameraParam::~CameraParam() {
  // @@protoc_insertion_point(destructor:CommonProto.CameraParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete distort_;
  if (this != internal_default_instance()) delete vcs_;
  if (this != internal_default_instance()) delete mat_;
}

void CameraParam::ArenaDtor(void* object) {
  CameraParam* _this = reinterpret_cast< CameraParam* >(object);
  (void)_this;
}
void CameraParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraParam& CameraParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraParam_common_2eproto.base);
  return *internal_default_instance();
}


void CameraParam::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.CameraParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      vendor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(distort_ != nullptr);
      distort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vcs_ != nullptr);
      vcs_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mat_ != nullptr);
      mat_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&focal_u_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&center_v_) -
        reinterpret_cast<char*>(&focal_u_)) + sizeof(center_v_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&camera_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fov_) -
        reinterpret_cast<char*>(&camera_x_)) + sizeof(fov_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cali_status_) -
        reinterpret_cast<char*>(&version_)) + sizeof(cali_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float focal_u = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_focal_u(&has_bits);
          focal_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float focal_v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_focal_v(&has_bits);
          focal_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float center_u = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_center_u(&has_bits);
          center_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float center_v = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_center_v(&has_bits);
          center_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float camera_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_camera_x(&has_bits);
          camera_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float camera_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_camera_y(&has_bits);
          camera_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float camera_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_camera_z(&has_bits);
          camera_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pitch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float yaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float roll = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fov = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_fov(&has_bits);
          fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 version = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.CalibrationStatus cali_status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CommonProto::CalibrationStatus_IsValid(val))) {
            _internal_set_cali_status(static_cast<::CommonProto::CalibrationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.DistortParam distort = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_distort(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.VCSParam vcs = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.CameraMatrix mat = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_mat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vendor = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommonProto.CameraParam.vendor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.CameraParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float focal_u = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_focal_u(), target);
  }

  // required float focal_v = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_focal_v(), target);
  }

  // required float center_u = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_center_u(), target);
  }

  // required float center_v = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_center_v(), target);
  }

  // required float camera_x = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_camera_x(), target);
  }

  // required float camera_y = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_camera_y(), target);
  }

  // required float camera_z = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_camera_z(), target);
  }

  // required float pitch = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_pitch(), target);
  }

  // required float yaw = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_yaw(), target);
  }

  // required float roll = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_roll(), target);
  }

  // optional int32 type = 11 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_type(), target);
  }

  // optional float fov = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_fov(), target);
  }

  // optional int32 version = 13 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_version(), target);
  }

  // optional .CommonProto.CalibrationStatus cali_status = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_cali_status(), target);
  }

  // optional .CommonProto.DistortParam distort = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::distort(this), target, stream);
  }

  // optional .CommonProto.VCSParam vcs = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::vcs(this), target, stream);
  }

  // optional .CommonProto.CameraMatrix mat = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::mat(this), target, stream);
  }

  // optional string vendor = 50;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CommonProto.CameraParam.vendor");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_vendor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.CameraParam)
  return target;
}

size_t CameraParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.CameraParam)
  size_t total_size = 0;

  if (_internal_has_focal_u()) {
    // required float focal_u = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_focal_v()) {
    // required float focal_v = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_center_u()) {
    // required float center_u = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_center_v()) {
    // required float center_v = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_camera_x()) {
    // required float camera_x = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_camera_y()) {
    // required float camera_y = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_camera_z()) {
    // required float camera_z = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_pitch()) {
    // required float pitch = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_yaw()) {
    // required float yaw = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_roll()) {
    // required float roll = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CameraParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.CameraParam)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00003ff0) ^ 0x00003ff0) == 0) {  // All required fields are present.
    // required float focal_u = 1;
    total_size += 1 + 4;

    // required float focal_v = 2;
    total_size += 1 + 4;

    // required float center_u = 3;
    total_size += 1 + 4;

    // required float center_v = 4;
    total_size += 1 + 4;

    // required float camera_x = 5;
    total_size += 1 + 4;

    // required float camera_y = 6;
    total_size += 1 + 4;

    // required float camera_z = 7;
    total_size += 1 + 4;

    // required float pitch = 8;
    total_size += 1 + 4;

    // required float yaw = 9;
    total_size += 1 + 4;

    // required float roll = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string vendor = 50;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vendor());
    }

    // optional .CommonProto.DistortParam distort = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distort_);
    }

    // optional .CommonProto.VCSParam vcs = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcs_);
    }

    // optional .CommonProto.CameraMatrix mat = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mat_);
    }

  }
  if (cached_has_bits & 0x0000c000u) {
    // optional int32 type = 11 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional float fov = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int32 version = 13 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional .CommonProto.CalibrationStatus cali_status = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cali_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.CameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.CameraParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.CameraParam)
    MergeFrom(*source);
  }
}

void CameraParam::MergeFrom(const CameraParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.CameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_vendor(from._internal_vendor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_distort()->::CommonProto::DistortParam::MergeFrom(from._internal_distort());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vcs()->::CommonProto::VCSParam::MergeFrom(from._internal_vcs());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_mat()->::CommonProto::CameraMatrix::MergeFrom(from._internal_mat());
    }
    if (cached_has_bits & 0x00000010u) {
      focal_u_ = from.focal_u_;
    }
    if (cached_has_bits & 0x00000020u) {
      focal_v_ = from.focal_v_;
    }
    if (cached_has_bits & 0x00000040u) {
      center_u_ = from.center_u_;
    }
    if (cached_has_bits & 0x00000080u) {
      center_v_ = from.center_v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      camera_x_ = from.camera_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      camera_y_ = from.camera_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      camera_z_ = from.camera_z_;
    }
    if (cached_has_bits & 0x00000800u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00001000u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00002000u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00004000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00008000u) {
      fov_ = from.fov_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00020000u) {
      cali_status_ = from.cali_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.CameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParam::CopyFrom(const CameraParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.CameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CameraParam::InternalSwap(CameraParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vendor_.Swap(&other->vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraParam, cali_status_)
      + sizeof(CameraParam::cali_status_)
      - PROTOBUF_FIELD_OFFSET(CameraParam, distort_)>(
          reinterpret_cast<char*>(&distort_),
          reinterpret_cast<char*>(&other->distort_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MotionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionFrame>()._has_bits_);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_turning_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_stable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

MotionFrame::MotionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.MotionFrame)
}
MotionFrame::MotionFrame(const MotionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_stable_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(is_stable_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.MotionFrame)
}

void MotionFrame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_stable_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(is_stable_));
}

MotionFrame::~MotionFrame() {
  // @@protoc_insertion_point(destructor:CommonProto.MotionFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MotionFrame::ArenaDtor(void* object) {
  MotionFrame* _this = reinterpret_cast< MotionFrame* >(object);
  (void)_this;
}
void MotionFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionFrame& MotionFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionFrame_common_2eproto.base);
  return *internal_default_instance();
}


void MotionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.MotionFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_stable_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(is_stable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_acc(&has_bits);
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float yaw_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int64 time_stamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float turning_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_turning_radius(&has_bits);
          turning_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_stable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_stable(&has_bits);
          is_stable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.MotionFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed(), target);
  }

  // optional float acc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_acc(), target);
  }

  // required float yaw_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rate(), target);
  }

  // required int64 time_stamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time_stamp(), target);
  }

  // optional float turning_radius = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_turning_radius(), target);
  }

  // optional bool is_stable = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_stable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.MotionFrame)
  return target;
}

size_t MotionFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.MotionFrame)
  size_t total_size = 0;

  if (_internal_has_speed()) {
    // required float speed = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_time_stamp()) {
    // required int64 time_stamp = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  if (_internal_has_yaw_rate()) {
    // required float yaw_rate = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MotionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.MotionFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required float speed = 1;
    total_size += 1 + 4;

    // required int64 time_stamp = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());

    // required float yaw_rate = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float acc = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00000030u) {
    // optional float turning_radius = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool is_stable = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.MotionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.MotionFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.MotionFrame)
    MergeFrom(*source);
  }
}

void MotionFrame::MergeFrom(const MotionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.MotionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_ = from.acc_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      turning_radius_ = from.turning_radius_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_stable_ = from.is_stable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.MotionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionFrame::CopyFrom(const MotionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.MotionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MotionFrame::InternalSwap(MotionFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionFrame, is_stable_)
      + sizeof(MotionFrame::is_stable_)
      - PROTOBUF_FIELD_OFFSET(MotionFrame, speed_)>(
          reinterpret_cast<char*>(&speed_),
          reinterpret_cast<char*>(&other->speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OdometryFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<OdometryFrame>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

OdometryFrame::OdometryFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.OdometryFrame)
}
OdometryFrame::OdometryFrame(const OdometryFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.OdometryFrame)
}

void OdometryFrame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_rate_));
}

OdometryFrame::~OdometryFrame() {
  // @@protoc_insertion_point(destructor:CommonProto.OdometryFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OdometryFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OdometryFrame::ArenaDtor(void* object) {
  OdometryFrame* _this = reinterpret_cast< OdometryFrame* >(object);
  (void)_this;
}
void OdometryFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OdometryFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdometryFrame& OdometryFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdometryFrame_common_2eproto.base);
  return *internal_default_instance();
}


void OdometryFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.OdometryFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_rate_) -
        reinterpret_cast<char*>(&x_)) + sizeof(yaw_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OdometryFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float yaw_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int64 time_stamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdometryFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.OdometryFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  // required float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  // required float yaw_rate = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw_rate(), target);
  }

  // required int64 time_stamp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.OdometryFrame)
  return target;
}

size_t OdometryFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.OdometryFrame)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_yaw()) {
    // required float yaw = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_speed()) {
    // required float speed = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_time_stamp()) {
    // required int64 time_stamp = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  if (_internal_has_yaw_rate()) {
    // required float yaw_rate = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t OdometryFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.OdometryFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float yaw = 3;
    total_size += 1 + 4;

    // required float speed = 4;
    total_size += 1 + 4;

    // required int64 time_stamp = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());

    // required float yaw_rate = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.OdometryFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdometryFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.OdometryFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.OdometryFrame)
    MergeFrom(*source);
  }
}

void OdometryFrame::MergeFrom(const OdometryFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.OdometryFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      yaw_rate_ = from.yaw_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OdometryFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.OdometryFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryFrame::CopyFrom(const OdometryFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.OdometryFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OdometryFrame::InternalSwap(OdometryFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OdometryFrame, yaw_rate_)
      + sizeof(OdometryFrame::yaw_rate_)
      - PROTOBUF_FIELD_OFFSET(OdometryFrame, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OdometryFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SerializedData::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proto(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_with_data_field(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

SerializedData::SerializedData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.SerializedData)
}
SerializedData::SerializedData(const SerializedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proto()) {
    proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto(), 
      GetArena());
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&with_data_field_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(with_data_field_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.SerializedData)
}

void SerializedData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializedData_common_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
  with_data_field_ = true;
}

SerializedData::~SerializedData() {
  // @@protoc_insertion_point(destructor:CommonProto.SerializedData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializedData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SerializedData::ArenaDtor(void* object) {
  SerializedData* _this = reinterpret_cast< SerializedData* >(object);
  (void)_this;
}
void SerializedData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedData& SerializedData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializedData_common_2eproto.base);
  return *internal_default_instance();
}


void SerializedData::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.SerializedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      proto_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    channel_ = 0;
    with_data_field_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommonProto.SerializedData.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 channel = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool with_data_field = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_with_data_field(&has_bits);
          with_data_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.SerializedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CommonProto.SerializedData.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // required bytes proto = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_proto(), target);
  }

  // required int32 channel = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_channel(), target);
  }

  // required bool with_data_field = 5 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_with_data_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.SerializedData)
  return target;
}

size_t SerializedData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.SerializedData)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_proto()) {
    // required bytes proto = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proto());
  }

  if (_internal_has_channel()) {
    // required int32 channel = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  if (_internal_has_with_data_field()) {
    // required bool with_data_field = 5 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SerializedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.SerializedData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required bytes proto = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proto());

    // required int32 channel = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());

    // required bool with_data_field = 5 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.SerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.SerializedData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.SerializedData)
    MergeFrom(*source);
  }
}

void SerializedData::MergeFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.SerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proto(from._internal_proto());
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      with_data_field_ = from.with_data_field_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SerializedData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedData::CopyFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SerializedData::InternalSwap(SerializedData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proto_.Swap(&other->proto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_, other->channel_);
  swap(with_data_field_, other->with_data_field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<DataDescriptor>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CommonProto::SerializedData& data(const DataDescriptor* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CommonProto::SerializedData&
DataDescriptor::_Internal::data(const DataDescriptor* msg) {
  return *msg->data_;
}
DataDescriptor::DataDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.DataDescriptor)
}
DataDescriptor::DataDescriptor(const DataDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::CommonProto::SerializedData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CommonProto.DataDescriptor)
}

void DataDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataDescriptor_common_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

DataDescriptor::~DataDescriptor() {
  // @@protoc_insertion_point(destructor:CommonProto.DataDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DataDescriptor::ArenaDtor(void* object) {
  DataDescriptor* _this = reinterpret_cast< DataDescriptor* >(object);
  (void)_this;
}
void DataDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataDescriptor& DataDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataDescriptor_common_2eproto.base);
  return *internal_default_instance();
}


void DataDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.DataDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommonProto.DataDescriptor.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommonProto.SerializedData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.DataDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CommonProto.DataDescriptor.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional .CommonProto.SerializedData data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.DataDescriptor)
  return target;
}

size_t DataDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.DataDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional .CommonProto.SerializedData data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.DataDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const DataDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.DataDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.DataDescriptor)
    MergeFrom(*source);
  }
}

void DataDescriptor::MergeFrom(const DataDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.DataDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::CommonProto::SerializedData::MergeFrom(from._internal_data());
    }
  }
}

void DataDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.DataDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataDescriptor::CopyFrom(const DataDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.DataDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataDescriptor::IsInitialized() const {
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void DataDescriptor::InternalSwap(DataDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Color::_Internal {
 public:
  using HasBits = decltype(std::declval<Color>()._has_bits_);
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&b_, &from.b_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&b_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.Color)
}

void Color::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&b_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&b_)) + sizeof(r_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:CommonProto.Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_common_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&b_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r_) -
        reinterpret_cast<char*>(&b_)) + sizeof(r_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 b = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_b(), target);
  }

  // required uint32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_g(), target);
  }

  // required uint32 r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.Color)
  return target;
}

size_t Color::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.Color)
  size_t total_size = 0;

  if (_internal_has_b()) {
    // required uint32 b = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_b());
  }

  if (_internal_has_g()) {
    // required uint32 g = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_g());
  }

  if (_internal_has_r()) {
    // required uint32 r = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_r());
  }

  return total_size;
}
size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.Color)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 b = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_b());

    // required uint32 g = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_g());

    // required uint32 r = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_r());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      r_ = from.r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, r_)
      + sizeof(Color::r_)
      - PROTOBUF_FIELD_OFFSET(Color, b_)>(
          reinterpret_cast<char*>(&b_),
          reinterpret_cast<char*>(&other->b_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParsingSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<ParsingSetting>()._has_bits_);
  static void set_has_parsing_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parsing_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ParsingSetting::ParsingSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channel_labels_(arena),
  channel_colors_(arena),
  freespace_channels_(arena),
  boundspace_channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.ParsingSetting)
}
ParsingSetting::ParsingSetting(const ParsingSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      channel_labels_(from.channel_labels_),
      channel_colors_(from.channel_colors_),
      freespace_channels_(from.freespace_channels_),
      boundspace_channels_(from.boundspace_channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&parsing_type_, &from.parsing_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&parsing_channels_) -
    reinterpret_cast<char*>(&parsing_type_)) + sizeof(parsing_channels_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.ParsingSetting)
}

void ParsingSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParsingSetting_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parsing_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&parsing_channels_) -
      reinterpret_cast<char*>(&parsing_type_)) + sizeof(parsing_channels_));
}

ParsingSetting::~ParsingSetting() {
  // @@protoc_insertion_point(destructor:CommonProto.ParsingSetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParsingSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParsingSetting::ArenaDtor(void* object) {
  ParsingSetting* _this = reinterpret_cast< ParsingSetting* >(object);
  (void)_this;
}
void ParsingSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParsingSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParsingSetting& ParsingSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParsingSetting_common_2eproto.base);
  return *internal_default_instance();
}


void ParsingSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.ParsingSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_labels_.Clear();
  channel_colors_.Clear();
  freespace_channels_.Clear();
  boundspace_channels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&parsing_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parsing_channels_) -
        reinterpret_cast<char*>(&parsing_type_)) + sizeof(parsing_channels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParsingSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 parsing_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_parsing_type(&has_bits);
          parsing_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 parsing_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_parsing_channels(&has_bits);
          parsing_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 channel_labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_channel_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_channel_labels(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Color channel_colors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 freespace_channels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_freespace_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_freespace_channels(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 boundspace_channels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_boundspace_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_boundspace_channels(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParsingSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.ParsingSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 parsing_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_parsing_type(), target);
  }

  // required int32 parsing_channels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parsing_channels(), target);
  }

  // repeated uint64 channel_labels = 3;
  for (int i = 0, n = this->_internal_channel_labels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_channel_labels(i), target);
  }

  // repeated .CommonProto.Color channel_colors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channel_colors(i), target, stream);
  }

  // repeated int32 freespace_channels = 5;
  for (int i = 0, n = this->_internal_freespace_channels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_freespace_channels(i), target);
  }

  // repeated int32 boundspace_channels = 6;
  for (int i = 0, n = this->_internal_boundspace_channels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_boundspace_channels(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.ParsingSetting)
  return target;
}

size_t ParsingSetting::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.ParsingSetting)
  size_t total_size = 0;

  if (_internal_has_parsing_type()) {
    // required int32 parsing_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parsing_type());
  }

  if (_internal_has_parsing_channels()) {
    // required int32 parsing_channels = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parsing_channels());
  }

  return total_size;
}
size_t ParsingSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.ParsingSetting)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 parsing_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parsing_type());

    // required int32 parsing_channels = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parsing_channels());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 channel_labels = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->channel_labels_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channel_labels_size());
    total_size += data_size;
  }

  // repeated .CommonProto.Color channel_colors = 4;
  total_size += 1UL * this->_internal_channel_colors_size();
  for (const auto& msg : this->channel_colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 freespace_channels = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->freespace_channels_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_freespace_channels_size());
    total_size += data_size;
  }

  // repeated int32 boundspace_channels = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->boundspace_channels_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_boundspace_channels_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParsingSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.ParsingSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsingSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParsingSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.ParsingSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.ParsingSetting)
    MergeFrom(*source);
  }
}

void ParsingSetting::MergeFrom(const ParsingSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.ParsingSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_labels_.MergeFrom(from.channel_labels_);
  channel_colors_.MergeFrom(from.channel_colors_);
  freespace_channels_.MergeFrom(from.freespace_channels_);
  boundspace_channels_.MergeFrom(from.boundspace_channels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      parsing_type_ = from.parsing_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      parsing_channels_ = from.parsing_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParsingSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.ParsingSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingSetting::CopyFrom(const ParsingSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.ParsingSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsingSetting::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(channel_colors_)) return false;
  return true;
}

void ParsingSetting::InternalSwap(ParsingSetting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_labels_.InternalSwap(&other->channel_labels_);
  channel_colors_.InternalSwap(&other->channel_colors_);
  freespace_channels_.InternalSwap(&other->freespace_channels_);
  boundspace_channels_.InternalSwap(&other->boundspace_channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParsingSetting, parsing_channels_)
      + sizeof(ParsingSetting::parsing_channels_)
      - PROTOBUF_FIELD_OFFSET(ParsingSetting, parsing_type_)>(
          reinterpret_cast<char*>(&parsing_type_),
          reinterpret_cast<char*>(&other->parsing_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParsingSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageFailStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageFailStatus>()._has_bits_);
  static void set_has_fail_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ImageFailStatus::ImageFailStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.ImageFailStatus)
}
ImageFailStatus::ImageFailStatus(const ImageFailStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fail_type_, &from.fail_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&fail_type_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.ImageFailStatus)
}

void ImageFailStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageFailStatus_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fail_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&fail_type_)) + sizeof(level_));
}

ImageFailStatus::~ImageFailStatus() {
  // @@protoc_insertion_point(destructor:CommonProto.ImageFailStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageFailStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageFailStatus::ArenaDtor(void* object) {
  ImageFailStatus* _this = reinterpret_cast< ImageFailStatus* >(object);
  (void)_this;
}
void ImageFailStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFailStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageFailStatus& ImageFailStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageFailStatus_common_2eproto.base);
  return *internal_default_instance();
}


void ImageFailStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.ImageFailStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fail_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&fail_type_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFailStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 fail_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fail_type(&has_bits);
          fail_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.Polygon regions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFailStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.ImageFailStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fail_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fail_type(), target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  // optional int32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // repeated .CommonProto.Polygon regions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_regions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_regions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.ImageFailStatus)
  return target;
}

size_t ImageFailStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.ImageFailStatus)
  size_t total_size = 0;

  // required int32 fail_type = 1;
  if (_internal_has_fail_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fail_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.Polygon regions = 4;
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional float score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFailStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.ImageFailStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFailStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFailStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.ImageFailStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.ImageFailStatus)
    MergeFrom(*source);
  }
}

void ImageFailStatus::MergeFrom(const ImageFailStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.ImageFailStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fail_type_ = from.fail_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageFailStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.ImageFailStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFailStatus::CopyFrom(const ImageFailStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.ImageFailStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFailStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(regions_)) return false;
  return true;
}

void ImageFailStatus::InternalSwap(ImageFailStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  regions_.InternalSwap(&other->regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageFailStatus, level_)
      + sizeof(ImageFailStatus::level_)
      - PROTOBUF_FIELD_OFFSET(ImageFailStatus, fail_type_)>(
          reinterpret_cast<char*>(&fail_type_),
          reinterpret_cast<char*>(&other->fail_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFailStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageFail::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageFail>()._has_bits_);
  static void set_has_cam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ImageFail::ImageFail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fail_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonProto.ImageFail)
}
ImageFail::ImageFail(const ImageFail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fail_status_(from.fail_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cam_id_, &from.cam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&cam_id_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:CommonProto.ImageFail)
}

void ImageFail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageFail_common_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cam_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&cam_id_)) + sizeof(frame_id_));
}

ImageFail::~ImageFail() {
  // @@protoc_insertion_point(destructor:CommonProto.ImageFail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageFail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageFail::ArenaDtor(void* object) {
  ImageFail* _this = reinterpret_cast< ImageFail* >(object);
  (void)_this;
}
void ImageFail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageFail& ImageFail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageFail_common_2eproto.base);
  return *internal_default_instance();
}


void ImageFail::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonProto.ImageFail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fail_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_id_) -
        reinterpret_cast<char*>(&cam_id_)) + sizeof(frame_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 cam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cam_id(&has_bits);
          cam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CommonProto.ImageFailStatus fail_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fail_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonProto.ImageFail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cam_id(), target);
  }

  // required int32 frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frame_id(), target);
  }

  // repeated .CommonProto.ImageFailStatus fail_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fail_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fail_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonProto.ImageFail)
  return target;
}

size_t ImageFail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommonProto.ImageFail)
  size_t total_size = 0;

  if (_internal_has_cam_id()) {
    // required int32 cam_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cam_id());
  }

  if (_internal_has_frame_id()) {
    // required int32 frame_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  return total_size;
}
size_t ImageFail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonProto.ImageFail)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 cam_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cam_id());

    // required int32 frame_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommonProto.ImageFailStatus fail_status = 3;
  total_size += 1UL * this->_internal_fail_status_size();
  for (const auto& msg : this->fail_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonProto.ImageFail)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonProto.ImageFail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonProto.ImageFail)
    MergeFrom(*source);
  }
}

void ImageFail::MergeFrom(const ImageFail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonProto.ImageFail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fail_status_.MergeFrom(from.fail_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cam_id_ = from.cam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_ = from.frame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageFail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonProto.ImageFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFail::CopyFrom(const ImageFail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonProto.ImageFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFail::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fail_status_)) return false;
  return true;
}

void ImageFail::InternalSwap(ImageFail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fail_status_.InternalSwap(&other->fail_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageFail, frame_id_)
      + sizeof(ImageFail::frame_id_)
      - PROTOBUF_FIELD_OFFSET(ImageFail, cam_id_)>(
          reinterpret_cast<char*>(&cam_id_),
          reinterpret_cast<char*>(&other->cam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CommonProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CommonProto::Point* Arena::CreateMaybeMessage< ::CommonProto::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::PointI* Arena::CreateMaybeMessage< ::CommonProto::PointI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::PointI >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Contour* Arena::CreateMaybeMessage< ::CommonProto::Contour >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Contour >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Polygon* Arena::CreateMaybeMessage< ::CommonProto::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Rect* Arena::CreateMaybeMessage< ::CommonProto::Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::OBBox2D* Arena::CreateMaybeMessage< ::CommonProto::OBBox2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::OBBox2D >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Box3D* Arena::CreateMaybeMessage< ::CommonProto::Box3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Box3D >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::KeyPoint* Arena::CreateMaybeMessage< ::CommonProto::KeyPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::KeyPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Category* Arena::CreateMaybeMessage< ::CommonProto::Category >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::WorkCondition* Arena::CreateMaybeMessage< ::CommonProto::WorkCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::WorkCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Image* Arena::CreateMaybeMessage< ::CommonProto::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Velocity* Arena::CreateMaybeMessage< ::CommonProto::Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Line* Arena::CreateMaybeMessage< ::CommonProto::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Lines* Arena::CreateMaybeMessage< ::CommonProto::Lines >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Lines >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::WorldSpaceInfo* Arena::CreateMaybeMessage< ::CommonProto::WorldSpaceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::WorldSpaceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::ImageSpaceInfo* Arena::CreateMaybeMessage< ::CommonProto::ImageSpaceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::ImageSpaceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::TrackingFeatureMap* Arena::CreateMaybeMessage< ::CommonProto::TrackingFeatureMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::TrackingFeatureMap >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Obstacle* Arena::CreateMaybeMessage< ::CommonProto::Obstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Obstacles* Arena::CreateMaybeMessage< ::CommonProto::Obstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Obstacles >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::FeatureMap* Arena::CreateMaybeMessage< ::CommonProto::FeatureMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::FeatureMap >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::ObstacleRaw* Arena::CreateMaybeMessage< ::CommonProto::ObstacleRaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::ObstacleRaw >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::ObstacleRaws* Arena::CreateMaybeMessage< ::CommonProto::ObstacleRaws >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::ObstacleRaws >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::FreeSpacePoints* Arena::CreateMaybeMessage< ::CommonProto::FreeSpacePoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::FreeSpacePoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::CameraMatrix* Arena::CreateMaybeMessage< ::CommonProto::CameraMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::CameraMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::DistortParam* Arena::CreateMaybeMessage< ::CommonProto::DistortParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::DistortParam >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::VCSParam* Arena::CreateMaybeMessage< ::CommonProto::VCSParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::VCSParam >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::CameraParam* Arena::CreateMaybeMessage< ::CommonProto::CameraParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::CameraParam >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::MotionFrame* Arena::CreateMaybeMessage< ::CommonProto::MotionFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::MotionFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::OdometryFrame* Arena::CreateMaybeMessage< ::CommonProto::OdometryFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::OdometryFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::SerializedData* Arena::CreateMaybeMessage< ::CommonProto::SerializedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::SerializedData >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::DataDescriptor* Arena::CreateMaybeMessage< ::CommonProto::DataDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::DataDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::Color* Arena::CreateMaybeMessage< ::CommonProto::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::ParsingSetting* Arena::CreateMaybeMessage< ::CommonProto::ParsingSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::ParsingSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::ImageFailStatus* Arena::CreateMaybeMessage< ::CommonProto::ImageFailStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::ImageFailStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonProto::ImageFail* Arena::CreateMaybeMessage< ::CommonProto::ImageFail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonProto::ImageFail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
