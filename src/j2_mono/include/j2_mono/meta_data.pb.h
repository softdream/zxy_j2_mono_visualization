// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "can.pb.h"
#include "sensor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meta_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meta_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_meta_5fdata_2eproto;
namespace MetaData {
class Box3DResult;
class Box3DResultDefaultTypeInternal;
extern Box3DResultDefaultTypeInternal _Box3DResult_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class SensorFrame;
class SensorFrameDefaultTypeInternal;
extern SensorFrameDefaultTypeInternal _SensorFrame_default_instance_;
class StructurePerception;
class StructurePerceptionDefaultTypeInternal;
extern StructurePerceptionDefaultTypeInternal _StructurePerception_default_instance_;
}  // namespace MetaData
PROTOBUF_NAMESPACE_OPEN
template<> ::MetaData::Box3DResult* Arena::CreateMaybeMessage<::MetaData::Box3DResult>(Arena*);
template<> ::MetaData::Data* Arena::CreateMaybeMessage<::MetaData::Data>(Arena*);
template<> ::MetaData::SensorFrame* Arena::CreateMaybeMessage<::MetaData::SensorFrame>(Arena*);
template<> ::MetaData::StructurePerception* Arena::CreateMaybeMessage<::MetaData::StructurePerception>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MetaData {

// ===================================================================

class Box3DResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaData.Box3DResult) */ {
 public:
  inline Box3DResult() : Box3DResult(nullptr) {}
  virtual ~Box3DResult();

  Box3DResult(const Box3DResult& from);
  Box3DResult(Box3DResult&& from) noexcept
    : Box3DResult() {
    *this = ::std::move(from);
  }

  inline Box3DResult& operator=(const Box3DResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box3DResult& operator=(Box3DResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Box3DResult& default_instance();

  static inline const Box3DResult* internal_default_instance() {
    return reinterpret_cast<const Box3DResult*>(
               &_Box3DResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Box3DResult& a, Box3DResult& b) {
    a.Swap(&b);
  }
  inline void Swap(Box3DResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Box3DResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Box3DResult* New() const final {
    return CreateMaybeMessage<Box3DResult>(nullptr);
  }

  Box3DResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Box3DResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Box3DResult& from);
  void MergeFrom(const Box3DResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Box3DResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetaData.Box3DResult";
  }
  protected:
  explicit Box3DResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_5fdata_2eproto);
    return ::descriptor_table_meta_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required .CommonProto.Box3D box = 2;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::CommonProto::Box3D& box() const;
  ::CommonProto::Box3D* release_box();
  ::CommonProto::Box3D* mutable_box();
  void set_allocated_box(::CommonProto::Box3D* box);
  private:
  const ::CommonProto::Box3D& _internal_box() const;
  ::CommonProto::Box3D* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::CommonProto::Box3D* box);
  ::CommonProto::Box3D* unsafe_arena_release_box();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MetaData.Box3DResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CommonProto::Box3D* box_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SensorFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaData.SensorFrame) */ {
 public:
  inline SensorFrame() : SensorFrame(nullptr) {}
  virtual ~SensorFrame();

  SensorFrame(const SensorFrame& from);
  SensorFrame(SensorFrame&& from) noexcept
    : SensorFrame() {
    *this = ::std::move(from);
  }

  inline SensorFrame& operator=(const SensorFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorFrame& operator=(SensorFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorFrame& default_instance();

  static inline const SensorFrame* internal_default_instance() {
    return reinterpret_cast<const SensorFrame*>(
               &_SensorFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorFrame& a, SensorFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorFrame* New() const final {
    return CreateMaybeMessage<SensorFrame>(nullptr);
  }

  SensorFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorFrame& from);
  void MergeFrom(const SensorFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetaData.SensorFrame";
  }
  protected:
  explicit SensorFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_5fdata_2eproto);
    return ::descriptor_table_meta_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanFramesRawFieldNumber = 1,
    kImuFramesRawFieldNumber = 11,
    kGpsFramesRawFieldNumber = 21,
    kCanFramesFieldNumber = 2,
    kImuFrameFieldNumber = 12,
    kImuOffsetFieldNumber = 13,
    kGpsFrameFieldNumber = 22,
  };
  // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
  int can_frames_raw_size() const;
  private:
  int _internal_can_frames_raw_size() const;
  public:
  void clear_can_frames_raw();
  ::CANProto::CANFrameRaw* mutable_can_frames_raw(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANFrameRaw >*
      mutable_can_frames_raw();
  private:
  const ::CANProto::CANFrameRaw& _internal_can_frames_raw(int index) const;
  ::CANProto::CANFrameRaw* _internal_add_can_frames_raw();
  public:
  const ::CANProto::CANFrameRaw& can_frames_raw(int index) const;
  ::CANProto::CANFrameRaw* add_can_frames_raw();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANFrameRaw >&
      can_frames_raw() const;

  // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
  int imu_frames_raw_size() const;
  private:
  int _internal_imu_frames_raw_size() const;
  public:
  void clear_imu_frames_raw();
  ::SensorProto::IMUFrame* mutable_imu_frames_raw(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::IMUFrame >*
      mutable_imu_frames_raw();
  private:
  const ::SensorProto::IMUFrame& _internal_imu_frames_raw(int index) const;
  ::SensorProto::IMUFrame* _internal_add_imu_frames_raw();
  public:
  const ::SensorProto::IMUFrame& imu_frames_raw(int index) const;
  ::SensorProto::IMUFrame* add_imu_frames_raw();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::IMUFrame >&
      imu_frames_raw() const;

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
  int gps_frames_raw_size() const;
  private:
  int _internal_gps_frames_raw_size() const;
  public:
  void clear_gps_frames_raw();
  ::SensorProto::GPSFrameRaw* mutable_gps_frames_raw(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::GPSFrameRaw >*
      mutable_gps_frames_raw();
  private:
  const ::SensorProto::GPSFrameRaw& _internal_gps_frames_raw(int index) const;
  ::SensorProto::GPSFrameRaw* _internal_add_gps_frames_raw();
  public:
  const ::SensorProto::GPSFrameRaw& gps_frames_raw(int index) const;
  ::SensorProto::GPSFrameRaw* add_gps_frames_raw();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::GPSFrameRaw >&
      gps_frames_raw() const;

  // optional .CANProto.CANFrame can_frames = 2;
  bool has_can_frames() const;
  private:
  bool _internal_has_can_frames() const;
  public:
  void clear_can_frames();
  const ::CANProto::CANFrame& can_frames() const;
  ::CANProto::CANFrame* release_can_frames();
  ::CANProto::CANFrame* mutable_can_frames();
  void set_allocated_can_frames(::CANProto::CANFrame* can_frames);
  private:
  const ::CANProto::CANFrame& _internal_can_frames() const;
  ::CANProto::CANFrame* _internal_mutable_can_frames();
  public:
  void unsafe_arena_set_allocated_can_frames(
      ::CANProto::CANFrame* can_frames);
  ::CANProto::CANFrame* unsafe_arena_release_can_frames();

  // optional .SensorProto.IMUFrame imu_frame = 12;
  bool has_imu_frame() const;
  private:
  bool _internal_has_imu_frame() const;
  public:
  void clear_imu_frame();
  const ::SensorProto::IMUFrame& imu_frame() const;
  ::SensorProto::IMUFrame* release_imu_frame();
  ::SensorProto::IMUFrame* mutable_imu_frame();
  void set_allocated_imu_frame(::SensorProto::IMUFrame* imu_frame);
  private:
  const ::SensorProto::IMUFrame& _internal_imu_frame() const;
  ::SensorProto::IMUFrame* _internal_mutable_imu_frame();
  public:
  void unsafe_arena_set_allocated_imu_frame(
      ::SensorProto::IMUFrame* imu_frame);
  ::SensorProto::IMUFrame* unsafe_arena_release_imu_frame();

  // optional .SensorProto.IMUFrame imu_offset = 13;
  bool has_imu_offset() const;
  private:
  bool _internal_has_imu_offset() const;
  public:
  void clear_imu_offset();
  const ::SensorProto::IMUFrame& imu_offset() const;
  ::SensorProto::IMUFrame* release_imu_offset();
  ::SensorProto::IMUFrame* mutable_imu_offset();
  void set_allocated_imu_offset(::SensorProto::IMUFrame* imu_offset);
  private:
  const ::SensorProto::IMUFrame& _internal_imu_offset() const;
  ::SensorProto::IMUFrame* _internal_mutable_imu_offset();
  public:
  void unsafe_arena_set_allocated_imu_offset(
      ::SensorProto::IMUFrame* imu_offset);
  ::SensorProto::IMUFrame* unsafe_arena_release_imu_offset();

  // optional .SensorProto.GPSFrame gps_frame = 22;
  bool has_gps_frame() const;
  private:
  bool _internal_has_gps_frame() const;
  public:
  void clear_gps_frame();
  const ::SensorProto::GPSFrame& gps_frame() const;
  ::SensorProto::GPSFrame* release_gps_frame();
  ::SensorProto::GPSFrame* mutable_gps_frame();
  void set_allocated_gps_frame(::SensorProto::GPSFrame* gps_frame);
  private:
  const ::SensorProto::GPSFrame& _internal_gps_frame() const;
  ::SensorProto::GPSFrame* _internal_mutable_gps_frame();
  public:
  void unsafe_arena_set_allocated_gps_frame(
      ::SensorProto::GPSFrame* gps_frame);
  ::SensorProto::GPSFrame* unsafe_arena_release_gps_frame();

  // @@protoc_insertion_point(class_scope:MetaData.SensorFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANFrameRaw > can_frames_raw_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::IMUFrame > imu_frames_raw_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::GPSFrameRaw > gps_frames_raw_;
  ::CANProto::CANFrame* can_frames_;
  ::SensorProto::IMUFrame* imu_frame_;
  ::SensorProto::IMUFrame* imu_offset_;
  ::SensorProto::GPSFrame* gps_frame_;
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// -------------------------------------------------------------------

class StructurePerception PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaData.StructurePerception) */ {
 public:
  inline StructurePerception() : StructurePerception(nullptr) {}
  virtual ~StructurePerception();

  StructurePerception(const StructurePerception& from);
  StructurePerception(StructurePerception&& from) noexcept
    : StructurePerception() {
    *this = ::std::move(from);
  }

  inline StructurePerception& operator=(const StructurePerception& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructurePerception& operator=(StructurePerception&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructurePerception& default_instance();

  static inline const StructurePerception* internal_default_instance() {
    return reinterpret_cast<const StructurePerception*>(
               &_StructurePerception_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StructurePerception& a, StructurePerception& b) {
    a.Swap(&b);
  }
  inline void Swap(StructurePerception* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructurePerception* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructurePerception* New() const final {
    return CreateMaybeMessage<StructurePerception>(nullptr);
  }

  StructurePerception* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructurePerception>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructurePerception& from);
  void MergeFrom(const StructurePerception& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructurePerception* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetaData.StructurePerception";
  }
  protected:
  explicit StructurePerception(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_5fdata_2eproto);
    return ::descriptor_table_meta_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesRawsFieldNumber = 1,
    kObstaclesFieldNumber = 10,
    kLinesFieldNumber = 11,
    kParsingFieldNumber = 20,
    kDepthFieldNumber = 21,
    kScanPtsFieldNumber = 30,
    kParsingSettingsFieldNumber = 40,
  };
  // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
  int obstacles_raws_size() const;
  private:
  int _internal_obstacles_raws_size() const;
  public:
  void clear_obstacles_raws();
  ::CommonProto::ObstacleRaws* mutable_obstacles_raws(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws >*
      mutable_obstacles_raws();
  private:
  const ::CommonProto::ObstacleRaws& _internal_obstacles_raws(int index) const;
  ::CommonProto::ObstacleRaws* _internal_add_obstacles_raws();
  public:
  const ::CommonProto::ObstacleRaws& obstacles_raws(int index) const;
  ::CommonProto::ObstacleRaws* add_obstacles_raws();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws >&
      obstacles_raws() const;

  // repeated .CommonProto.Obstacles obstacles = 10;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::CommonProto::Obstacles* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacles >*
      mutable_obstacles();
  private:
  const ::CommonProto::Obstacles& _internal_obstacles(int index) const;
  ::CommonProto::Obstacles* _internal_add_obstacles();
  public:
  const ::CommonProto::Obstacles& obstacles(int index) const;
  ::CommonProto::Obstacles* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacles >&
      obstacles() const;

  // repeated .CommonProto.Lines lines = 11;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::CommonProto::Lines* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Lines >*
      mutable_lines();
  private:
  const ::CommonProto::Lines& _internal_lines(int index) const;
  ::CommonProto::Lines* _internal_add_lines();
  public:
  const ::CommonProto::Lines& lines(int index) const;
  ::CommonProto::Lines* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Lines >&
      lines() const;

  // repeated .CommonProto.Image parsing = 20;
  int parsing_size() const;
  private:
  int _internal_parsing_size() const;
  public:
  void clear_parsing();
  ::CommonProto::Image* mutable_parsing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
      mutable_parsing();
  private:
  const ::CommonProto::Image& _internal_parsing(int index) const;
  ::CommonProto::Image* _internal_add_parsing();
  public:
  const ::CommonProto::Image& parsing(int index) const;
  ::CommonProto::Image* add_parsing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
      parsing() const;

  // repeated .CommonProto.Image depth = 21;
  int depth_size() const;
  private:
  int _internal_depth_size() const;
  public:
  void clear_depth();
  ::CommonProto::Image* mutable_depth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
      mutable_depth();
  private:
  const ::CommonProto::Image& _internal_depth(int index) const;
  ::CommonProto::Image* _internal_add_depth();
  public:
  const ::CommonProto::Image& depth(int index) const;
  ::CommonProto::Image* add_depth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
      depth() const;

  // repeated .CommonProto.FreeSpacePoints scan_pts = 30;
  int scan_pts_size() const;
  private:
  int _internal_scan_pts_size() const;
  public:
  void clear_scan_pts();
  ::CommonProto::FreeSpacePoints* mutable_scan_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::FreeSpacePoints >*
      mutable_scan_pts();
  private:
  const ::CommonProto::FreeSpacePoints& _internal_scan_pts(int index) const;
  ::CommonProto::FreeSpacePoints* _internal_add_scan_pts();
  public:
  const ::CommonProto::FreeSpacePoints& scan_pts(int index) const;
  ::CommonProto::FreeSpacePoints* add_scan_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::FreeSpacePoints >&
      scan_pts() const;

  // repeated .CommonProto.ParsingSetting parsing_settings = 40;
  int parsing_settings_size() const;
  private:
  int _internal_parsing_settings_size() const;
  public:
  void clear_parsing_settings();
  ::CommonProto::ParsingSetting* mutable_parsing_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting >*
      mutable_parsing_settings();
  private:
  const ::CommonProto::ParsingSetting& _internal_parsing_settings(int index) const;
  ::CommonProto::ParsingSetting* _internal_add_parsing_settings();
  public:
  const ::CommonProto::ParsingSetting& parsing_settings(int index) const;
  ::CommonProto::ParsingSetting* add_parsing_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting >&
      parsing_settings() const;

  // @@protoc_insertion_point(class_scope:MetaData.StructurePerception)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws > obstacles_raws_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacles > obstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Lines > lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image > parsing_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image > depth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::FreeSpacePoints > scan_pts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting > parsing_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetaData.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetaData.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_5fdata_2eproto);
    return ::descriptor_table_meta_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 3,
    kDataDescriptorFieldNumber = 4,
    kCameraFieldNumber = 10,
    kCameraDefaultFieldNumber = 11,
    kCameraMatrixFieldNumber = 12,
    kLaneCameraMatrixFieldNumber = 160,
    kSensorFieldNumber = 20,
    kMotionFieldNumber = 21,
    kOdometryFieldNumber = 22,
    kStructurePerceptionFieldNumber = 30,
    kVersionFieldNumber = 1,
    kFrameIdFieldNumber = 2,
  };
  // repeated .CommonProto.Image image = 3;
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  ::CommonProto::Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
      mutable_image();
  private:
  const ::CommonProto::Image& _internal_image(int index) const;
  ::CommonProto::Image* _internal_add_image();
  public:
  const ::CommonProto::Image& image(int index) const;
  ::CommonProto::Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
      image() const;

  // repeated .CommonProto.DataDescriptor data_descriptor = 4;
  int data_descriptor_size() const;
  private:
  int _internal_data_descriptor_size() const;
  public:
  void clear_data_descriptor();
  ::CommonProto::DataDescriptor* mutable_data_descriptor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::DataDescriptor >*
      mutable_data_descriptor();
  private:
  const ::CommonProto::DataDescriptor& _internal_data_descriptor(int index) const;
  ::CommonProto::DataDescriptor* _internal_add_data_descriptor();
  public:
  const ::CommonProto::DataDescriptor& data_descriptor(int index) const;
  ::CommonProto::DataDescriptor* add_data_descriptor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::DataDescriptor >&
      data_descriptor() const;

  // repeated .CommonProto.CameraParam camera = 10;
  int camera_size() const;
  private:
  int _internal_camera_size() const;
  public:
  void clear_camera();
  ::CommonProto::CameraParam* mutable_camera(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >*
      mutable_camera();
  private:
  const ::CommonProto::CameraParam& _internal_camera(int index) const;
  ::CommonProto::CameraParam* _internal_add_camera();
  public:
  const ::CommonProto::CameraParam& camera(int index) const;
  ::CommonProto::CameraParam* add_camera();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >&
      camera() const;

  // repeated .CommonProto.CameraParam camera_default = 11;
  int camera_default_size() const;
  private:
  int _internal_camera_default_size() const;
  public:
  void clear_camera_default();
  ::CommonProto::CameraParam* mutable_camera_default(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >*
      mutable_camera_default();
  private:
  const ::CommonProto::CameraParam& _internal_camera_default(int index) const;
  ::CommonProto::CameraParam* _internal_add_camera_default();
  public:
  const ::CommonProto::CameraParam& camera_default(int index) const;
  ::CommonProto::CameraParam* add_camera_default();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >&
      camera_default() const;

  // repeated .CommonProto.CameraMatrix camera_matrix = 12;
  int camera_matrix_size() const;
  private:
  int _internal_camera_matrix_size() const;
  public:
  void clear_camera_matrix();
  ::CommonProto::CameraMatrix* mutable_camera_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >*
      mutable_camera_matrix();
  private:
  const ::CommonProto::CameraMatrix& _internal_camera_matrix(int index) const;
  ::CommonProto::CameraMatrix* _internal_add_camera_matrix();
  public:
  const ::CommonProto::CameraMatrix& camera_matrix(int index) const;
  ::CommonProto::CameraMatrix* add_camera_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >&
      camera_matrix() const;

  // repeated .CommonProto.CameraMatrix lane_camera_matrix = 160;
  int lane_camera_matrix_size() const;
  private:
  int _internal_lane_camera_matrix_size() const;
  public:
  void clear_lane_camera_matrix();
  ::CommonProto::CameraMatrix* mutable_lane_camera_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >*
      mutable_lane_camera_matrix();
  private:
  const ::CommonProto::CameraMatrix& _internal_lane_camera_matrix(int index) const;
  ::CommonProto::CameraMatrix* _internal_add_lane_camera_matrix();
  public:
  const ::CommonProto::CameraMatrix& lane_camera_matrix(int index) const;
  ::CommonProto::CameraMatrix* add_lane_camera_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >&
      lane_camera_matrix() const;

  // optional .MetaData.SensorFrame sensor = 20;
  bool has_sensor() const;
  private:
  bool _internal_has_sensor() const;
  public:
  void clear_sensor();
  const ::MetaData::SensorFrame& sensor() const;
  ::MetaData::SensorFrame* release_sensor();
  ::MetaData::SensorFrame* mutable_sensor();
  void set_allocated_sensor(::MetaData::SensorFrame* sensor);
  private:
  const ::MetaData::SensorFrame& _internal_sensor() const;
  ::MetaData::SensorFrame* _internal_mutable_sensor();
  public:
  void unsafe_arena_set_allocated_sensor(
      ::MetaData::SensorFrame* sensor);
  ::MetaData::SensorFrame* unsafe_arena_release_sensor();

  // optional .CommonProto.MotionFrame motion = 21;
  bool has_motion() const;
  private:
  bool _internal_has_motion() const;
  public:
  void clear_motion();
  const ::CommonProto::MotionFrame& motion() const;
  ::CommonProto::MotionFrame* release_motion();
  ::CommonProto::MotionFrame* mutable_motion();
  void set_allocated_motion(::CommonProto::MotionFrame* motion);
  private:
  const ::CommonProto::MotionFrame& _internal_motion() const;
  ::CommonProto::MotionFrame* _internal_mutable_motion();
  public:
  void unsafe_arena_set_allocated_motion(
      ::CommonProto::MotionFrame* motion);
  ::CommonProto::MotionFrame* unsafe_arena_release_motion();

  // optional .CommonProto.OdometryFrame odometry = 22;
  bool has_odometry() const;
  private:
  bool _internal_has_odometry() const;
  public:
  void clear_odometry();
  const ::CommonProto::OdometryFrame& odometry() const;
  ::CommonProto::OdometryFrame* release_odometry();
  ::CommonProto::OdometryFrame* mutable_odometry();
  void set_allocated_odometry(::CommonProto::OdometryFrame* odometry);
  private:
  const ::CommonProto::OdometryFrame& _internal_odometry() const;
  ::CommonProto::OdometryFrame* _internal_mutable_odometry();
  public:
  void unsafe_arena_set_allocated_odometry(
      ::CommonProto::OdometryFrame* odometry);
  ::CommonProto::OdometryFrame* unsafe_arena_release_odometry();

  // optional .MetaData.StructurePerception structure_perception = 30;
  bool has_structure_perception() const;
  private:
  bool _internal_has_structure_perception() const;
  public:
  void clear_structure_perception();
  const ::MetaData::StructurePerception& structure_perception() const;
  ::MetaData::StructurePerception* release_structure_perception();
  ::MetaData::StructurePerception* mutable_structure_perception();
  void set_allocated_structure_perception(::MetaData::StructurePerception* structure_perception);
  private:
  const ::MetaData::StructurePerception& _internal_structure_perception() const;
  ::MetaData::StructurePerception* _internal_mutable_structure_perception();
  public:
  void unsafe_arena_set_allocated_structure_perception(
      ::MetaData::StructurePerception* structure_perception);
  ::MetaData::StructurePerception* unsafe_arena_release_structure_perception();

  // required int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MetaData.Data)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image > image_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::DataDescriptor > data_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam > camera_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam > camera_default_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix > camera_matrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix > lane_camera_matrix_;
  ::MetaData::SensorFrame* sensor_;
  ::CommonProto::MotionFrame* motion_;
  ::CommonProto::OdometryFrame* odometry_;
  ::MetaData::StructurePerception* structure_perception_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Box3DResult

// required int32 id = 1;
inline bool Box3DResult::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Box3DResult::has_id() const {
  return _internal_has_id();
}
inline void Box3DResult::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box3DResult::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Box3DResult::id() const {
  // @@protoc_insertion_point(field_get:MetaData.Box3DResult.id)
  return _internal_id();
}
inline void Box3DResult::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Box3DResult::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MetaData.Box3DResult.id)
}

// required .CommonProto.Box3D box = 2;
inline bool Box3DResult::_internal_has_box() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || box_ != nullptr);
  return value;
}
inline bool Box3DResult::has_box() const {
  return _internal_has_box();
}
inline const ::CommonProto::Box3D& Box3DResult::_internal_box() const {
  const ::CommonProto::Box3D* p = box_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Box3D&>(
      ::CommonProto::_Box3D_default_instance_);
}
inline const ::CommonProto::Box3D& Box3DResult::box() const {
  // @@protoc_insertion_point(field_get:MetaData.Box3DResult.box)
  return _internal_box();
}
inline void Box3DResult::unsafe_arena_set_allocated_box(
    ::CommonProto::Box3D* box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_);
  }
  box_ = box;
  if (box) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.Box3DResult.box)
}
inline ::CommonProto::Box3D* Box3DResult::release_box() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Box3D* temp = box_;
  box_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Box3D* Box3DResult::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:MetaData.Box3DResult.box)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Box3D* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::CommonProto::Box3D* Box3DResult::_internal_mutable_box() {
  _has_bits_[0] |= 0x00000001u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Box3D>(GetArena());
    box_ = p;
  }
  return box_;
}
inline ::CommonProto::Box3D* Box3DResult::mutable_box() {
  // @@protoc_insertion_point(field_mutable:MetaData.Box3DResult.box)
  return _internal_mutable_box();
}
inline void Box3DResult::set_allocated_box(::CommonProto::Box3D* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box)->GetArena();
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:MetaData.Box3DResult.box)
}

// -------------------------------------------------------------------

// SensorFrame

// repeated .CANProto.CANFrameRaw can_frames_raw = 1;
inline int SensorFrame::_internal_can_frames_raw_size() const {
  return can_frames_raw_.size();
}
inline int SensorFrame::can_frames_raw_size() const {
  return _internal_can_frames_raw_size();
}
inline ::CANProto::CANFrameRaw* SensorFrame::mutable_can_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.SensorFrame.can_frames_raw)
  return can_frames_raw_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANFrameRaw >*
SensorFrame::mutable_can_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.SensorFrame.can_frames_raw)
  return &can_frames_raw_;
}
inline const ::CANProto::CANFrameRaw& SensorFrame::_internal_can_frames_raw(int index) const {
  return can_frames_raw_.Get(index);
}
inline const ::CANProto::CANFrameRaw& SensorFrame::can_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.SensorFrame.can_frames_raw)
  return _internal_can_frames_raw(index);
}
inline ::CANProto::CANFrameRaw* SensorFrame::_internal_add_can_frames_raw() {
  return can_frames_raw_.Add();
}
inline ::CANProto::CANFrameRaw* SensorFrame::add_can_frames_raw() {
  // @@protoc_insertion_point(field_add:MetaData.SensorFrame.can_frames_raw)
  return _internal_add_can_frames_raw();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANFrameRaw >&
SensorFrame::can_frames_raw() const {
  // @@protoc_insertion_point(field_list:MetaData.SensorFrame.can_frames_raw)
  return can_frames_raw_;
}

// optional .CANProto.CANFrame can_frames = 2;
inline bool SensorFrame::_internal_has_can_frames() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || can_frames_ != nullptr);
  return value;
}
inline bool SensorFrame::has_can_frames() const {
  return _internal_has_can_frames();
}
inline const ::CANProto::CANFrame& SensorFrame::_internal_can_frames() const {
  const ::CANProto::CANFrame* p = can_frames_;
  return p != nullptr ? *p : reinterpret_cast<const ::CANProto::CANFrame&>(
      ::CANProto::_CANFrame_default_instance_);
}
inline const ::CANProto::CANFrame& SensorFrame::can_frames() const {
  // @@protoc_insertion_point(field_get:MetaData.SensorFrame.can_frames)
  return _internal_can_frames();
}
inline void SensorFrame::unsafe_arena_set_allocated_can_frames(
    ::CANProto::CANFrame* can_frames) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(can_frames_);
  }
  can_frames_ = can_frames;
  if (can_frames) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.SensorFrame.can_frames)
}
inline ::CANProto::CANFrame* SensorFrame::release_can_frames() {
  _has_bits_[0] &= ~0x00000001u;
  ::CANProto::CANFrame* temp = can_frames_;
  can_frames_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CANProto::CANFrame* SensorFrame::unsafe_arena_release_can_frames() {
  // @@protoc_insertion_point(field_release:MetaData.SensorFrame.can_frames)
  _has_bits_[0] &= ~0x00000001u;
  ::CANProto::CANFrame* temp = can_frames_;
  can_frames_ = nullptr;
  return temp;
}
inline ::CANProto::CANFrame* SensorFrame::_internal_mutable_can_frames() {
  _has_bits_[0] |= 0x00000001u;
  if (can_frames_ == nullptr) {
    auto* p = CreateMaybeMessage<::CANProto::CANFrame>(GetArena());
    can_frames_ = p;
  }
  return can_frames_;
}
inline ::CANProto::CANFrame* SensorFrame::mutable_can_frames() {
  // @@protoc_insertion_point(field_mutable:MetaData.SensorFrame.can_frames)
  return _internal_mutable_can_frames();
}
inline void SensorFrame::set_allocated_can_frames(::CANProto::CANFrame* can_frames) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(can_frames_);
  }
  if (can_frames) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(can_frames)->GetArena();
    if (message_arena != submessage_arena) {
      can_frames = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_frames, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  can_frames_ = can_frames;
  // @@protoc_insertion_point(field_set_allocated:MetaData.SensorFrame.can_frames)
}

// repeated .SensorProto.IMUFrame imu_frames_raw = 11;
inline int SensorFrame::_internal_imu_frames_raw_size() const {
  return imu_frames_raw_.size();
}
inline int SensorFrame::imu_frames_raw_size() const {
  return _internal_imu_frames_raw_size();
}
inline ::SensorProto::IMUFrame* SensorFrame::mutable_imu_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.SensorFrame.imu_frames_raw)
  return imu_frames_raw_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::IMUFrame >*
SensorFrame::mutable_imu_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.SensorFrame.imu_frames_raw)
  return &imu_frames_raw_;
}
inline const ::SensorProto::IMUFrame& SensorFrame::_internal_imu_frames_raw(int index) const {
  return imu_frames_raw_.Get(index);
}
inline const ::SensorProto::IMUFrame& SensorFrame::imu_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.SensorFrame.imu_frames_raw)
  return _internal_imu_frames_raw(index);
}
inline ::SensorProto::IMUFrame* SensorFrame::_internal_add_imu_frames_raw() {
  return imu_frames_raw_.Add();
}
inline ::SensorProto::IMUFrame* SensorFrame::add_imu_frames_raw() {
  // @@protoc_insertion_point(field_add:MetaData.SensorFrame.imu_frames_raw)
  return _internal_add_imu_frames_raw();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::IMUFrame >&
SensorFrame::imu_frames_raw() const {
  // @@protoc_insertion_point(field_list:MetaData.SensorFrame.imu_frames_raw)
  return imu_frames_raw_;
}

// optional .SensorProto.IMUFrame imu_frame = 12;
inline bool SensorFrame::_internal_has_imu_frame() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || imu_frame_ != nullptr);
  return value;
}
inline bool SensorFrame::has_imu_frame() const {
  return _internal_has_imu_frame();
}
inline const ::SensorProto::IMUFrame& SensorFrame::_internal_imu_frame() const {
  const ::SensorProto::IMUFrame* p = imu_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::SensorProto::IMUFrame&>(
      ::SensorProto::_IMUFrame_default_instance_);
}
inline const ::SensorProto::IMUFrame& SensorFrame::imu_frame() const {
  // @@protoc_insertion_point(field_get:MetaData.SensorFrame.imu_frame)
  return _internal_imu_frame();
}
inline void SensorFrame::unsafe_arena_set_allocated_imu_frame(
    ::SensorProto::IMUFrame* imu_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_frame_);
  }
  imu_frame_ = imu_frame;
  if (imu_frame) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.SensorFrame.imu_frame)
}
inline ::SensorProto::IMUFrame* SensorFrame::release_imu_frame() {
  _has_bits_[0] &= ~0x00000002u;
  ::SensorProto::IMUFrame* temp = imu_frame_;
  imu_frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SensorProto::IMUFrame* SensorFrame::unsafe_arena_release_imu_frame() {
  // @@protoc_insertion_point(field_release:MetaData.SensorFrame.imu_frame)
  _has_bits_[0] &= ~0x00000002u;
  ::SensorProto::IMUFrame* temp = imu_frame_;
  imu_frame_ = nullptr;
  return temp;
}
inline ::SensorProto::IMUFrame* SensorFrame::_internal_mutable_imu_frame() {
  _has_bits_[0] |= 0x00000002u;
  if (imu_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::SensorProto::IMUFrame>(GetArena());
    imu_frame_ = p;
  }
  return imu_frame_;
}
inline ::SensorProto::IMUFrame* SensorFrame::mutable_imu_frame() {
  // @@protoc_insertion_point(field_mutable:MetaData.SensorFrame.imu_frame)
  return _internal_mutable_imu_frame();
}
inline void SensorFrame::set_allocated_imu_frame(::SensorProto::IMUFrame* imu_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_frame_);
  }
  if (imu_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_frame)->GetArena();
    if (message_arena != submessage_arena) {
      imu_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imu_frame_ = imu_frame;
  // @@protoc_insertion_point(field_set_allocated:MetaData.SensorFrame.imu_frame)
}

// optional .SensorProto.IMUFrame imu_offset = 13;
inline bool SensorFrame::_internal_has_imu_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || imu_offset_ != nullptr);
  return value;
}
inline bool SensorFrame::has_imu_offset() const {
  return _internal_has_imu_offset();
}
inline const ::SensorProto::IMUFrame& SensorFrame::_internal_imu_offset() const {
  const ::SensorProto::IMUFrame* p = imu_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::SensorProto::IMUFrame&>(
      ::SensorProto::_IMUFrame_default_instance_);
}
inline const ::SensorProto::IMUFrame& SensorFrame::imu_offset() const {
  // @@protoc_insertion_point(field_get:MetaData.SensorFrame.imu_offset)
  return _internal_imu_offset();
}
inline void SensorFrame::unsafe_arena_set_allocated_imu_offset(
    ::SensorProto::IMUFrame* imu_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_offset_);
  }
  imu_offset_ = imu_offset;
  if (imu_offset) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.SensorFrame.imu_offset)
}
inline ::SensorProto::IMUFrame* SensorFrame::release_imu_offset() {
  _has_bits_[0] &= ~0x00000004u;
  ::SensorProto::IMUFrame* temp = imu_offset_;
  imu_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SensorProto::IMUFrame* SensorFrame::unsafe_arena_release_imu_offset() {
  // @@protoc_insertion_point(field_release:MetaData.SensorFrame.imu_offset)
  _has_bits_[0] &= ~0x00000004u;
  ::SensorProto::IMUFrame* temp = imu_offset_;
  imu_offset_ = nullptr;
  return temp;
}
inline ::SensorProto::IMUFrame* SensorFrame::_internal_mutable_imu_offset() {
  _has_bits_[0] |= 0x00000004u;
  if (imu_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::SensorProto::IMUFrame>(GetArena());
    imu_offset_ = p;
  }
  return imu_offset_;
}
inline ::SensorProto::IMUFrame* SensorFrame::mutable_imu_offset() {
  // @@protoc_insertion_point(field_mutable:MetaData.SensorFrame.imu_offset)
  return _internal_mutable_imu_offset();
}
inline void SensorFrame::set_allocated_imu_offset(::SensorProto::IMUFrame* imu_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_offset_);
  }
  if (imu_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_offset)->GetArena();
    if (message_arena != submessage_arena) {
      imu_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  imu_offset_ = imu_offset;
  // @@protoc_insertion_point(field_set_allocated:MetaData.SensorFrame.imu_offset)
}

// repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
inline int SensorFrame::_internal_gps_frames_raw_size() const {
  return gps_frames_raw_.size();
}
inline int SensorFrame::gps_frames_raw_size() const {
  return _internal_gps_frames_raw_size();
}
inline ::SensorProto::GPSFrameRaw* SensorFrame::mutable_gps_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.SensorFrame.gps_frames_raw)
  return gps_frames_raw_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::GPSFrameRaw >*
SensorFrame::mutable_gps_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.SensorFrame.gps_frames_raw)
  return &gps_frames_raw_;
}
inline const ::SensorProto::GPSFrameRaw& SensorFrame::_internal_gps_frames_raw(int index) const {
  return gps_frames_raw_.Get(index);
}
inline const ::SensorProto::GPSFrameRaw& SensorFrame::gps_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.SensorFrame.gps_frames_raw)
  return _internal_gps_frames_raw(index);
}
inline ::SensorProto::GPSFrameRaw* SensorFrame::_internal_add_gps_frames_raw() {
  return gps_frames_raw_.Add();
}
inline ::SensorProto::GPSFrameRaw* SensorFrame::add_gps_frames_raw() {
  // @@protoc_insertion_point(field_add:MetaData.SensorFrame.gps_frames_raw)
  return _internal_add_gps_frames_raw();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorProto::GPSFrameRaw >&
SensorFrame::gps_frames_raw() const {
  // @@protoc_insertion_point(field_list:MetaData.SensorFrame.gps_frames_raw)
  return gps_frames_raw_;
}

// optional .SensorProto.GPSFrame gps_frame = 22;
inline bool SensorFrame::_internal_has_gps_frame() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || gps_frame_ != nullptr);
  return value;
}
inline bool SensorFrame::has_gps_frame() const {
  return _internal_has_gps_frame();
}
inline const ::SensorProto::GPSFrame& SensorFrame::_internal_gps_frame() const {
  const ::SensorProto::GPSFrame* p = gps_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::SensorProto::GPSFrame&>(
      ::SensorProto::_GPSFrame_default_instance_);
}
inline const ::SensorProto::GPSFrame& SensorFrame::gps_frame() const {
  // @@protoc_insertion_point(field_get:MetaData.SensorFrame.gps_frame)
  return _internal_gps_frame();
}
inline void SensorFrame::unsafe_arena_set_allocated_gps_frame(
    ::SensorProto::GPSFrame* gps_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_frame_);
  }
  gps_frame_ = gps_frame;
  if (gps_frame) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.SensorFrame.gps_frame)
}
inline ::SensorProto::GPSFrame* SensorFrame::release_gps_frame() {
  _has_bits_[0] &= ~0x00000008u;
  ::SensorProto::GPSFrame* temp = gps_frame_;
  gps_frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SensorProto::GPSFrame* SensorFrame::unsafe_arena_release_gps_frame() {
  // @@protoc_insertion_point(field_release:MetaData.SensorFrame.gps_frame)
  _has_bits_[0] &= ~0x00000008u;
  ::SensorProto::GPSFrame* temp = gps_frame_;
  gps_frame_ = nullptr;
  return temp;
}
inline ::SensorProto::GPSFrame* SensorFrame::_internal_mutable_gps_frame() {
  _has_bits_[0] |= 0x00000008u;
  if (gps_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::SensorProto::GPSFrame>(GetArena());
    gps_frame_ = p;
  }
  return gps_frame_;
}
inline ::SensorProto::GPSFrame* SensorFrame::mutable_gps_frame() {
  // @@protoc_insertion_point(field_mutable:MetaData.SensorFrame.gps_frame)
  return _internal_mutable_gps_frame();
}
inline void SensorFrame::set_allocated_gps_frame(::SensorProto::GPSFrame* gps_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_frame_);
  }
  if (gps_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_frame)->GetArena();
    if (message_arena != submessage_arena) {
      gps_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gps_frame_ = gps_frame;
  // @@protoc_insertion_point(field_set_allocated:MetaData.SensorFrame.gps_frame)
}

// -------------------------------------------------------------------

// StructurePerception

// repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
inline int StructurePerception::_internal_obstacles_raws_size() const {
  return obstacles_raws_.size();
}
inline int StructurePerception::obstacles_raws_size() const {
  return _internal_obstacles_raws_size();
}
inline ::CommonProto::ObstacleRaws* StructurePerception::mutable_obstacles_raws(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.obstacles_raws)
  return obstacles_raws_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws >*
StructurePerception::mutable_obstacles_raws() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.obstacles_raws)
  return &obstacles_raws_;
}
inline const ::CommonProto::ObstacleRaws& StructurePerception::_internal_obstacles_raws(int index) const {
  return obstacles_raws_.Get(index);
}
inline const ::CommonProto::ObstacleRaws& StructurePerception::obstacles_raws(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.obstacles_raws)
  return _internal_obstacles_raws(index);
}
inline ::CommonProto::ObstacleRaws* StructurePerception::_internal_add_obstacles_raws() {
  return obstacles_raws_.Add();
}
inline ::CommonProto::ObstacleRaws* StructurePerception::add_obstacles_raws() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.obstacles_raws)
  return _internal_add_obstacles_raws();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaws >&
StructurePerception::obstacles_raws() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.obstacles_raws)
  return obstacles_raws_;
}

// repeated .CommonProto.Obstacles obstacles = 10;
inline int StructurePerception::_internal_obstacles_size() const {
  return obstacles_.size();
}
inline int StructurePerception::obstacles_size() const {
  return _internal_obstacles_size();
}
inline ::CommonProto::Obstacles* StructurePerception::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacles >*
StructurePerception::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.obstacles)
  return &obstacles_;
}
inline const ::CommonProto::Obstacles& StructurePerception::_internal_obstacles(int index) const {
  return obstacles_.Get(index);
}
inline const ::CommonProto::Obstacles& StructurePerception::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.obstacles)
  return _internal_obstacles(index);
}
inline ::CommonProto::Obstacles* StructurePerception::_internal_add_obstacles() {
  return obstacles_.Add();
}
inline ::CommonProto::Obstacles* StructurePerception::add_obstacles() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.obstacles)
  return _internal_add_obstacles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacles >&
StructurePerception::obstacles() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.obstacles)
  return obstacles_;
}

// repeated .CommonProto.Lines lines = 11;
inline int StructurePerception::_internal_lines_size() const {
  return lines_.size();
}
inline int StructurePerception::lines_size() const {
  return _internal_lines_size();
}
inline ::CommonProto::Lines* StructurePerception::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.lines)
  return lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Lines >*
StructurePerception::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.lines)
  return &lines_;
}
inline const ::CommonProto::Lines& StructurePerception::_internal_lines(int index) const {
  return lines_.Get(index);
}
inline const ::CommonProto::Lines& StructurePerception::lines(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.lines)
  return _internal_lines(index);
}
inline ::CommonProto::Lines* StructurePerception::_internal_add_lines() {
  return lines_.Add();
}
inline ::CommonProto::Lines* StructurePerception::add_lines() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.lines)
  return _internal_add_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Lines >&
StructurePerception::lines() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.lines)
  return lines_;
}

// repeated .CommonProto.Image parsing = 20;
inline int StructurePerception::_internal_parsing_size() const {
  return parsing_.size();
}
inline int StructurePerception::parsing_size() const {
  return _internal_parsing_size();
}
inline ::CommonProto::Image* StructurePerception::mutable_parsing(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.parsing)
  return parsing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
StructurePerception::mutable_parsing() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.parsing)
  return &parsing_;
}
inline const ::CommonProto::Image& StructurePerception::_internal_parsing(int index) const {
  return parsing_.Get(index);
}
inline const ::CommonProto::Image& StructurePerception::parsing(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.parsing)
  return _internal_parsing(index);
}
inline ::CommonProto::Image* StructurePerception::_internal_add_parsing() {
  return parsing_.Add();
}
inline ::CommonProto::Image* StructurePerception::add_parsing() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.parsing)
  return _internal_add_parsing();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
StructurePerception::parsing() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.parsing)
  return parsing_;
}

// repeated .CommonProto.Image depth = 21;
inline int StructurePerception::_internal_depth_size() const {
  return depth_.size();
}
inline int StructurePerception::depth_size() const {
  return _internal_depth_size();
}
inline ::CommonProto::Image* StructurePerception::mutable_depth(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.depth)
  return depth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
StructurePerception::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.depth)
  return &depth_;
}
inline const ::CommonProto::Image& StructurePerception::_internal_depth(int index) const {
  return depth_.Get(index);
}
inline const ::CommonProto::Image& StructurePerception::depth(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.depth)
  return _internal_depth(index);
}
inline ::CommonProto::Image* StructurePerception::_internal_add_depth() {
  return depth_.Add();
}
inline ::CommonProto::Image* StructurePerception::add_depth() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.depth)
  return _internal_add_depth();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
StructurePerception::depth() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.depth)
  return depth_;
}

// repeated .CommonProto.FreeSpacePoints scan_pts = 30;
inline int StructurePerception::_internal_scan_pts_size() const {
  return scan_pts_.size();
}
inline int StructurePerception::scan_pts_size() const {
  return _internal_scan_pts_size();
}
inline ::CommonProto::FreeSpacePoints* StructurePerception::mutable_scan_pts(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.scan_pts)
  return scan_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::FreeSpacePoints >*
StructurePerception::mutable_scan_pts() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.scan_pts)
  return &scan_pts_;
}
inline const ::CommonProto::FreeSpacePoints& StructurePerception::_internal_scan_pts(int index) const {
  return scan_pts_.Get(index);
}
inline const ::CommonProto::FreeSpacePoints& StructurePerception::scan_pts(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.scan_pts)
  return _internal_scan_pts(index);
}
inline ::CommonProto::FreeSpacePoints* StructurePerception::_internal_add_scan_pts() {
  return scan_pts_.Add();
}
inline ::CommonProto::FreeSpacePoints* StructurePerception::add_scan_pts() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.scan_pts)
  return _internal_add_scan_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::FreeSpacePoints >&
StructurePerception::scan_pts() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.scan_pts)
  return scan_pts_;
}

// repeated .CommonProto.ParsingSetting parsing_settings = 40;
inline int StructurePerception::_internal_parsing_settings_size() const {
  return parsing_settings_.size();
}
inline int StructurePerception::parsing_settings_size() const {
  return _internal_parsing_settings_size();
}
inline ::CommonProto::ParsingSetting* StructurePerception::mutable_parsing_settings(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.StructurePerception.parsing_settings)
  return parsing_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting >*
StructurePerception::mutable_parsing_settings() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.StructurePerception.parsing_settings)
  return &parsing_settings_;
}
inline const ::CommonProto::ParsingSetting& StructurePerception::_internal_parsing_settings(int index) const {
  return parsing_settings_.Get(index);
}
inline const ::CommonProto::ParsingSetting& StructurePerception::parsing_settings(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.StructurePerception.parsing_settings)
  return _internal_parsing_settings(index);
}
inline ::CommonProto::ParsingSetting* StructurePerception::_internal_add_parsing_settings() {
  return parsing_settings_.Add();
}
inline ::CommonProto::ParsingSetting* StructurePerception::add_parsing_settings() {
  // @@protoc_insertion_point(field_add:MetaData.StructurePerception.parsing_settings)
  return _internal_add_parsing_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ParsingSetting >&
StructurePerception::parsing_settings() const {
  // @@protoc_insertion_point(field_list:MetaData.StructurePerception.parsing_settings)
  return parsing_settings_;
}

// -------------------------------------------------------------------

// Data

// required int32 version = 1;
inline bool Data::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Data::has_version() const {
  return _internal_has_version();
}
inline void Data::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::version() const {
  // @@protoc_insertion_point(field_get:MetaData.Data.version)
  return _internal_version();
}
inline void Data::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  version_ = value;
}
inline void Data::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:MetaData.Data.version)
}

// required int32 frame_id = 2;
inline bool Data::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Data::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void Data::clear_frame_id() {
  frame_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::frame_id() const {
  // @@protoc_insertion_point(field_get:MetaData.Data.frame_id)
  return _internal_frame_id();
}
inline void Data::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  frame_id_ = value;
}
inline void Data::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:MetaData.Data.frame_id)
}

// repeated .CommonProto.Image image = 3;
inline int Data::_internal_image_size() const {
  return image_.size();
}
inline int Data::image_size() const {
  return _internal_image_size();
}
inline ::CommonProto::Image* Data::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >*
Data::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.image)
  return &image_;
}
inline const ::CommonProto::Image& Data::_internal_image(int index) const {
  return image_.Get(index);
}
inline const ::CommonProto::Image& Data::image(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.image)
  return _internal_image(index);
}
inline ::CommonProto::Image* Data::_internal_add_image() {
  return image_.Add();
}
inline ::CommonProto::Image* Data::add_image() {
  // @@protoc_insertion_point(field_add:MetaData.Data.image)
  return _internal_add_image();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Image >&
Data::image() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.image)
  return image_;
}

// repeated .CommonProto.DataDescriptor data_descriptor = 4;
inline int Data::_internal_data_descriptor_size() const {
  return data_descriptor_.size();
}
inline int Data::data_descriptor_size() const {
  return _internal_data_descriptor_size();
}
inline ::CommonProto::DataDescriptor* Data::mutable_data_descriptor(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.data_descriptor)
  return data_descriptor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::DataDescriptor >*
Data::mutable_data_descriptor() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.data_descriptor)
  return &data_descriptor_;
}
inline const ::CommonProto::DataDescriptor& Data::_internal_data_descriptor(int index) const {
  return data_descriptor_.Get(index);
}
inline const ::CommonProto::DataDescriptor& Data::data_descriptor(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.data_descriptor)
  return _internal_data_descriptor(index);
}
inline ::CommonProto::DataDescriptor* Data::_internal_add_data_descriptor() {
  return data_descriptor_.Add();
}
inline ::CommonProto::DataDescriptor* Data::add_data_descriptor() {
  // @@protoc_insertion_point(field_add:MetaData.Data.data_descriptor)
  return _internal_add_data_descriptor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::DataDescriptor >&
Data::data_descriptor() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.data_descriptor)
  return data_descriptor_;
}

// repeated .CommonProto.CameraParam camera = 10;
inline int Data::_internal_camera_size() const {
  return camera_.size();
}
inline int Data::camera_size() const {
  return _internal_camera_size();
}
inline ::CommonProto::CameraParam* Data::mutable_camera(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.camera)
  return camera_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >*
Data::mutable_camera() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.camera)
  return &camera_;
}
inline const ::CommonProto::CameraParam& Data::_internal_camera(int index) const {
  return camera_.Get(index);
}
inline const ::CommonProto::CameraParam& Data::camera(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.camera)
  return _internal_camera(index);
}
inline ::CommonProto::CameraParam* Data::_internal_add_camera() {
  return camera_.Add();
}
inline ::CommonProto::CameraParam* Data::add_camera() {
  // @@protoc_insertion_point(field_add:MetaData.Data.camera)
  return _internal_add_camera();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >&
Data::camera() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.camera)
  return camera_;
}

// repeated .CommonProto.CameraParam camera_default = 11;
inline int Data::_internal_camera_default_size() const {
  return camera_default_.size();
}
inline int Data::camera_default_size() const {
  return _internal_camera_default_size();
}
inline ::CommonProto::CameraParam* Data::mutable_camera_default(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.camera_default)
  return camera_default_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >*
Data::mutable_camera_default() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.camera_default)
  return &camera_default_;
}
inline const ::CommonProto::CameraParam& Data::_internal_camera_default(int index) const {
  return camera_default_.Get(index);
}
inline const ::CommonProto::CameraParam& Data::camera_default(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.camera_default)
  return _internal_camera_default(index);
}
inline ::CommonProto::CameraParam* Data::_internal_add_camera_default() {
  return camera_default_.Add();
}
inline ::CommonProto::CameraParam* Data::add_camera_default() {
  // @@protoc_insertion_point(field_add:MetaData.Data.camera_default)
  return _internal_add_camera_default();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraParam >&
Data::camera_default() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.camera_default)
  return camera_default_;
}

// repeated .CommonProto.CameraMatrix camera_matrix = 12;
inline int Data::_internal_camera_matrix_size() const {
  return camera_matrix_.size();
}
inline int Data::camera_matrix_size() const {
  return _internal_camera_matrix_size();
}
inline ::CommonProto::CameraMatrix* Data::mutable_camera_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.camera_matrix)
  return camera_matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >*
Data::mutable_camera_matrix() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.camera_matrix)
  return &camera_matrix_;
}
inline const ::CommonProto::CameraMatrix& Data::_internal_camera_matrix(int index) const {
  return camera_matrix_.Get(index);
}
inline const ::CommonProto::CameraMatrix& Data::camera_matrix(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.camera_matrix)
  return _internal_camera_matrix(index);
}
inline ::CommonProto::CameraMatrix* Data::_internal_add_camera_matrix() {
  return camera_matrix_.Add();
}
inline ::CommonProto::CameraMatrix* Data::add_camera_matrix() {
  // @@protoc_insertion_point(field_add:MetaData.Data.camera_matrix)
  return _internal_add_camera_matrix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >&
Data::camera_matrix() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.camera_matrix)
  return camera_matrix_;
}

// optional .MetaData.SensorFrame sensor = 20;
inline bool Data::_internal_has_sensor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sensor_ != nullptr);
  return value;
}
inline bool Data::has_sensor() const {
  return _internal_has_sensor();
}
inline void Data::clear_sensor() {
  if (sensor_ != nullptr) sensor_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::MetaData::SensorFrame& Data::_internal_sensor() const {
  const ::MetaData::SensorFrame* p = sensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::MetaData::SensorFrame&>(
      ::MetaData::_SensorFrame_default_instance_);
}
inline const ::MetaData::SensorFrame& Data::sensor() const {
  // @@protoc_insertion_point(field_get:MetaData.Data.sensor)
  return _internal_sensor();
}
inline void Data::unsafe_arena_set_allocated_sensor(
    ::MetaData::SensorFrame* sensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_);
  }
  sensor_ = sensor;
  if (sensor) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.Data.sensor)
}
inline ::MetaData::SensorFrame* Data::release_sensor() {
  _has_bits_[0] &= ~0x00000001u;
  ::MetaData::SensorFrame* temp = sensor_;
  sensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MetaData::SensorFrame* Data::unsafe_arena_release_sensor() {
  // @@protoc_insertion_point(field_release:MetaData.Data.sensor)
  _has_bits_[0] &= ~0x00000001u;
  ::MetaData::SensorFrame* temp = sensor_;
  sensor_ = nullptr;
  return temp;
}
inline ::MetaData::SensorFrame* Data::_internal_mutable_sensor() {
  _has_bits_[0] |= 0x00000001u;
  if (sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::MetaData::SensorFrame>(GetArena());
    sensor_ = p;
  }
  return sensor_;
}
inline ::MetaData::SensorFrame* Data::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.sensor)
  return _internal_mutable_sensor();
}
inline void Data::set_allocated_sensor(::MetaData::SensorFrame* sensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sensor_;
  }
  if (sensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sensor);
    if (message_arena != submessage_arena) {
      sensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sensor_ = sensor;
  // @@protoc_insertion_point(field_set_allocated:MetaData.Data.sensor)
}

// optional .CommonProto.MotionFrame motion = 21;
inline bool Data::_internal_has_motion() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || motion_ != nullptr);
  return value;
}
inline bool Data::has_motion() const {
  return _internal_has_motion();
}
inline const ::CommonProto::MotionFrame& Data::_internal_motion() const {
  const ::CommonProto::MotionFrame* p = motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::MotionFrame&>(
      ::CommonProto::_MotionFrame_default_instance_);
}
inline const ::CommonProto::MotionFrame& Data::motion() const {
  // @@protoc_insertion_point(field_get:MetaData.Data.motion)
  return _internal_motion();
}
inline void Data::unsafe_arena_set_allocated_motion(
    ::CommonProto::MotionFrame* motion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_);
  }
  motion_ = motion;
  if (motion) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.Data.motion)
}
inline ::CommonProto::MotionFrame* Data::release_motion() {
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::MotionFrame* temp = motion_;
  motion_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::MotionFrame* Data::unsafe_arena_release_motion() {
  // @@protoc_insertion_point(field_release:MetaData.Data.motion)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::MotionFrame* temp = motion_;
  motion_ = nullptr;
  return temp;
}
inline ::CommonProto::MotionFrame* Data::_internal_mutable_motion() {
  _has_bits_[0] |= 0x00000002u;
  if (motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::MotionFrame>(GetArena());
    motion_ = p;
  }
  return motion_;
}
inline ::CommonProto::MotionFrame* Data::mutable_motion() {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.motion)
  return _internal_mutable_motion();
}
inline void Data::set_allocated_motion(::CommonProto::MotionFrame* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_);
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion)->GetArena();
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:MetaData.Data.motion)
}

// optional .CommonProto.OdometryFrame odometry = 22;
inline bool Data::_internal_has_odometry() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || odometry_ != nullptr);
  return value;
}
inline bool Data::has_odometry() const {
  return _internal_has_odometry();
}
inline const ::CommonProto::OdometryFrame& Data::_internal_odometry() const {
  const ::CommonProto::OdometryFrame* p = odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::OdometryFrame&>(
      ::CommonProto::_OdometryFrame_default_instance_);
}
inline const ::CommonProto::OdometryFrame& Data::odometry() const {
  // @@protoc_insertion_point(field_get:MetaData.Data.odometry)
  return _internal_odometry();
}
inline void Data::unsafe_arena_set_allocated_odometry(
    ::CommonProto::OdometryFrame* odometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry_);
  }
  odometry_ = odometry;
  if (odometry) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.Data.odometry)
}
inline ::CommonProto::OdometryFrame* Data::release_odometry() {
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::OdometryFrame* temp = odometry_;
  odometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::OdometryFrame* Data::unsafe_arena_release_odometry() {
  // @@protoc_insertion_point(field_release:MetaData.Data.odometry)
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::OdometryFrame* temp = odometry_;
  odometry_ = nullptr;
  return temp;
}
inline ::CommonProto::OdometryFrame* Data::_internal_mutable_odometry() {
  _has_bits_[0] |= 0x00000004u;
  if (odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::OdometryFrame>(GetArena());
    odometry_ = p;
  }
  return odometry_;
}
inline ::CommonProto::OdometryFrame* Data::mutable_odometry() {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.odometry)
  return _internal_mutable_odometry();
}
inline void Data::set_allocated_odometry(::CommonProto::OdometryFrame* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry_);
  }
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry)->GetArena();
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  odometry_ = odometry;
  // @@protoc_insertion_point(field_set_allocated:MetaData.Data.odometry)
}

// optional .MetaData.StructurePerception structure_perception = 30;
inline bool Data::_internal_has_structure_perception() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || structure_perception_ != nullptr);
  return value;
}
inline bool Data::has_structure_perception() const {
  return _internal_has_structure_perception();
}
inline void Data::clear_structure_perception() {
  if (structure_perception_ != nullptr) structure_perception_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::MetaData::StructurePerception& Data::_internal_structure_perception() const {
  const ::MetaData::StructurePerception* p = structure_perception_;
  return p != nullptr ? *p : reinterpret_cast<const ::MetaData::StructurePerception&>(
      ::MetaData::_StructurePerception_default_instance_);
}
inline const ::MetaData::StructurePerception& Data::structure_perception() const {
  // @@protoc_insertion_point(field_get:MetaData.Data.structure_perception)
  return _internal_structure_perception();
}
inline void Data::unsafe_arena_set_allocated_structure_perception(
    ::MetaData::StructurePerception* structure_perception) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structure_perception_);
  }
  structure_perception_ = structure_perception;
  if (structure_perception) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetaData.Data.structure_perception)
}
inline ::MetaData::StructurePerception* Data::release_structure_perception() {
  _has_bits_[0] &= ~0x00000008u;
  ::MetaData::StructurePerception* temp = structure_perception_;
  structure_perception_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MetaData::StructurePerception* Data::unsafe_arena_release_structure_perception() {
  // @@protoc_insertion_point(field_release:MetaData.Data.structure_perception)
  _has_bits_[0] &= ~0x00000008u;
  ::MetaData::StructurePerception* temp = structure_perception_;
  structure_perception_ = nullptr;
  return temp;
}
inline ::MetaData::StructurePerception* Data::_internal_mutable_structure_perception() {
  _has_bits_[0] |= 0x00000008u;
  if (structure_perception_ == nullptr) {
    auto* p = CreateMaybeMessage<::MetaData::StructurePerception>(GetArena());
    structure_perception_ = p;
  }
  return structure_perception_;
}
inline ::MetaData::StructurePerception* Data::mutable_structure_perception() {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.structure_perception)
  return _internal_mutable_structure_perception();
}
inline void Data::set_allocated_structure_perception(::MetaData::StructurePerception* structure_perception) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete structure_perception_;
  }
  if (structure_perception) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(structure_perception);
    if (message_arena != submessage_arena) {
      structure_perception = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structure_perception, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  structure_perception_ = structure_perception;
  // @@protoc_insertion_point(field_set_allocated:MetaData.Data.structure_perception)
}

// repeated .CommonProto.CameraMatrix lane_camera_matrix = 160;
inline int Data::_internal_lane_camera_matrix_size() const {
  return lane_camera_matrix_.size();
}
inline int Data::lane_camera_matrix_size() const {
  return _internal_lane_camera_matrix_size();
}
inline ::CommonProto::CameraMatrix* Data::mutable_lane_camera_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:MetaData.Data.lane_camera_matrix)
  return lane_camera_matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >*
Data::mutable_lane_camera_matrix() {
  // @@protoc_insertion_point(field_mutable_list:MetaData.Data.lane_camera_matrix)
  return &lane_camera_matrix_;
}
inline const ::CommonProto::CameraMatrix& Data::_internal_lane_camera_matrix(int index) const {
  return lane_camera_matrix_.Get(index);
}
inline const ::CommonProto::CameraMatrix& Data::lane_camera_matrix(int index) const {
  // @@protoc_insertion_point(field_get:MetaData.Data.lane_camera_matrix)
  return _internal_lane_camera_matrix(index);
}
inline ::CommonProto::CameraMatrix* Data::_internal_add_lane_camera_matrix() {
  return lane_camera_matrix_.Add();
}
inline ::CommonProto::CameraMatrix* Data::add_lane_camera_matrix() {
  // @@protoc_insertion_point(field_add:MetaData.Data.lane_camera_matrix)
  return _internal_add_lane_camera_matrix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::CameraMatrix >&
Data::lane_camera_matrix() const {
  // @@protoc_insertion_point(field_list:MetaData.Data.lane_camera_matrix)
  return lane_camera_matrix_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MetaData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto
