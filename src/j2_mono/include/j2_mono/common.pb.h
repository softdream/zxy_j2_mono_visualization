// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace CommonProto {
class Box3D;
class Box3DDefaultTypeInternal;
extern Box3DDefaultTypeInternal _Box3D_default_instance_;
class CameraMatrix;
class CameraMatrixDefaultTypeInternal;
extern CameraMatrixDefaultTypeInternal _CameraMatrix_default_instance_;
class CameraParam;
class CameraParamDefaultTypeInternal;
extern CameraParamDefaultTypeInternal _CameraParam_default_instance_;
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Contour;
class ContourDefaultTypeInternal;
extern ContourDefaultTypeInternal _Contour_default_instance_;
class DataDescriptor;
class DataDescriptorDefaultTypeInternal;
extern DataDescriptorDefaultTypeInternal _DataDescriptor_default_instance_;
class DistortParam;
class DistortParamDefaultTypeInternal;
extern DistortParamDefaultTypeInternal _DistortParam_default_instance_;
class FeatureMap;
class FeatureMapDefaultTypeInternal;
extern FeatureMapDefaultTypeInternal _FeatureMap_default_instance_;
class FreeSpacePoints;
class FreeSpacePointsDefaultTypeInternal;
extern FreeSpacePointsDefaultTypeInternal _FreeSpacePoints_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageFail;
class ImageFailDefaultTypeInternal;
extern ImageFailDefaultTypeInternal _ImageFail_default_instance_;
class ImageFailStatus;
class ImageFailStatusDefaultTypeInternal;
extern ImageFailStatusDefaultTypeInternal _ImageFailStatus_default_instance_;
class ImageSpaceInfo;
class ImageSpaceInfoDefaultTypeInternal;
extern ImageSpaceInfoDefaultTypeInternal _ImageSpaceInfo_default_instance_;
class KeyPoint;
class KeyPointDefaultTypeInternal;
extern KeyPointDefaultTypeInternal _KeyPoint_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Lines;
class LinesDefaultTypeInternal;
extern LinesDefaultTypeInternal _Lines_default_instance_;
class MotionFrame;
class MotionFrameDefaultTypeInternal;
extern MotionFrameDefaultTypeInternal _MotionFrame_default_instance_;
class OBBox2D;
class OBBox2DDefaultTypeInternal;
extern OBBox2DDefaultTypeInternal _OBBox2D_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class ObstacleRaw;
class ObstacleRawDefaultTypeInternal;
extern ObstacleRawDefaultTypeInternal _ObstacleRaw_default_instance_;
class ObstacleRaws;
class ObstacleRawsDefaultTypeInternal;
extern ObstacleRawsDefaultTypeInternal _ObstacleRaws_default_instance_;
class Obstacles;
class ObstaclesDefaultTypeInternal;
extern ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
class OdometryFrame;
class OdometryFrameDefaultTypeInternal;
extern OdometryFrameDefaultTypeInternal _OdometryFrame_default_instance_;
class ParsingSetting;
class ParsingSettingDefaultTypeInternal;
extern ParsingSettingDefaultTypeInternal _ParsingSetting_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class PointI;
class PointIDefaultTypeInternal;
extern PointIDefaultTypeInternal _PointI_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class SerializedData;
class SerializedDataDefaultTypeInternal;
extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
class TrackingFeatureMap;
class TrackingFeatureMapDefaultTypeInternal;
extern TrackingFeatureMapDefaultTypeInternal _TrackingFeatureMap_default_instance_;
class VCSParam;
class VCSParamDefaultTypeInternal;
extern VCSParamDefaultTypeInternal _VCSParam_default_instance_;
class Velocity;
class VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
class WorkCondition;
class WorkConditionDefaultTypeInternal;
extern WorkConditionDefaultTypeInternal _WorkCondition_default_instance_;
class WorldSpaceInfo;
class WorldSpaceInfoDefaultTypeInternal;
extern WorldSpaceInfoDefaultTypeInternal _WorldSpaceInfo_default_instance_;
}  // namespace CommonProto
PROTOBUF_NAMESPACE_OPEN
template<> ::CommonProto::Box3D* Arena::CreateMaybeMessage<::CommonProto::Box3D>(Arena*);
template<> ::CommonProto::CameraMatrix* Arena::CreateMaybeMessage<::CommonProto::CameraMatrix>(Arena*);
template<> ::CommonProto::CameraParam* Arena::CreateMaybeMessage<::CommonProto::CameraParam>(Arena*);
template<> ::CommonProto::Category* Arena::CreateMaybeMessage<::CommonProto::Category>(Arena*);
template<> ::CommonProto::Color* Arena::CreateMaybeMessage<::CommonProto::Color>(Arena*);
template<> ::CommonProto::Contour* Arena::CreateMaybeMessage<::CommonProto::Contour>(Arena*);
template<> ::CommonProto::DataDescriptor* Arena::CreateMaybeMessage<::CommonProto::DataDescriptor>(Arena*);
template<> ::CommonProto::DistortParam* Arena::CreateMaybeMessage<::CommonProto::DistortParam>(Arena*);
template<> ::CommonProto::FeatureMap* Arena::CreateMaybeMessage<::CommonProto::FeatureMap>(Arena*);
template<> ::CommonProto::FreeSpacePoints* Arena::CreateMaybeMessage<::CommonProto::FreeSpacePoints>(Arena*);
template<> ::CommonProto::Image* Arena::CreateMaybeMessage<::CommonProto::Image>(Arena*);
template<> ::CommonProto::ImageFail* Arena::CreateMaybeMessage<::CommonProto::ImageFail>(Arena*);
template<> ::CommonProto::ImageFailStatus* Arena::CreateMaybeMessage<::CommonProto::ImageFailStatus>(Arena*);
template<> ::CommonProto::ImageSpaceInfo* Arena::CreateMaybeMessage<::CommonProto::ImageSpaceInfo>(Arena*);
template<> ::CommonProto::KeyPoint* Arena::CreateMaybeMessage<::CommonProto::KeyPoint>(Arena*);
template<> ::CommonProto::Line* Arena::CreateMaybeMessage<::CommonProto::Line>(Arena*);
template<> ::CommonProto::Lines* Arena::CreateMaybeMessage<::CommonProto::Lines>(Arena*);
template<> ::CommonProto::MotionFrame* Arena::CreateMaybeMessage<::CommonProto::MotionFrame>(Arena*);
template<> ::CommonProto::OBBox2D* Arena::CreateMaybeMessage<::CommonProto::OBBox2D>(Arena*);
template<> ::CommonProto::Obstacle* Arena::CreateMaybeMessage<::CommonProto::Obstacle>(Arena*);
template<> ::CommonProto::ObstacleRaw* Arena::CreateMaybeMessage<::CommonProto::ObstacleRaw>(Arena*);
template<> ::CommonProto::ObstacleRaws* Arena::CreateMaybeMessage<::CommonProto::ObstacleRaws>(Arena*);
template<> ::CommonProto::Obstacles* Arena::CreateMaybeMessage<::CommonProto::Obstacles>(Arena*);
template<> ::CommonProto::OdometryFrame* Arena::CreateMaybeMessage<::CommonProto::OdometryFrame>(Arena*);
template<> ::CommonProto::ParsingSetting* Arena::CreateMaybeMessage<::CommonProto::ParsingSetting>(Arena*);
template<> ::CommonProto::Point* Arena::CreateMaybeMessage<::CommonProto::Point>(Arena*);
template<> ::CommonProto::PointI* Arena::CreateMaybeMessage<::CommonProto::PointI>(Arena*);
template<> ::CommonProto::Polygon* Arena::CreateMaybeMessage<::CommonProto::Polygon>(Arena*);
template<> ::CommonProto::Rect* Arena::CreateMaybeMessage<::CommonProto::Rect>(Arena*);
template<> ::CommonProto::SerializedData* Arena::CreateMaybeMessage<::CommonProto::SerializedData>(Arena*);
template<> ::CommonProto::TrackingFeatureMap* Arena::CreateMaybeMessage<::CommonProto::TrackingFeatureMap>(Arena*);
template<> ::CommonProto::VCSParam* Arena::CreateMaybeMessage<::CommonProto::VCSParam>(Arena*);
template<> ::CommonProto::Velocity* Arena::CreateMaybeMessage<::CommonProto::Velocity>(Arena*);
template<> ::CommonProto::WorkCondition* Arena::CreateMaybeMessage<::CommonProto::WorkCondition>(Arena*);
template<> ::CommonProto::WorldSpaceInfo* Arena::CreateMaybeMessage<::CommonProto::WorldSpaceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CommonProto {

enum Line_EndPointType : int {
  Line_EndPointType_EndPointType_Far = 0,
  Line_EndPointType_EndPointType_Near = 1
};
bool Line_EndPointType_IsValid(int value);
constexpr Line_EndPointType Line_EndPointType_EndPointType_MIN = Line_EndPointType_EndPointType_Far;
constexpr Line_EndPointType Line_EndPointType_EndPointType_MAX = Line_EndPointType_EndPointType_Near;
constexpr int Line_EndPointType_EndPointType_ARRAYSIZE = Line_EndPointType_EndPointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Line_EndPointType_descriptor();
template<typename T>
inline const std::string& Line_EndPointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Line_EndPointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Line_EndPointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Line_EndPointType_descriptor(), enum_t_value);
}
inline bool Line_EndPointType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Line_EndPointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Line_EndPointType>(
    Line_EndPointType_descriptor(), name, value);
}
enum ImageFailStatus_ImgFailTypes : int {
  ImageFailStatus_ImgFailTypes_IMG_NORMAL = 0,
  ImageFailStatus_ImgFailTypes_IMG_BLUR = 1,
  ImageFailStatus_ImgFailTypes_IMG_SHELTER = 2,
  ImageFailStatus_ImgFailTypes_IMG_FREEZE = 4,
  ImageFailStatus_ImgFailTypes_IMG_GLARE = 8
};
bool ImageFailStatus_ImgFailTypes_IsValid(int value);
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus_ImgFailTypes_ImgFailTypes_MIN = ImageFailStatus_ImgFailTypes_IMG_NORMAL;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus_ImgFailTypes_ImgFailTypes_MAX = ImageFailStatus_ImgFailTypes_IMG_GLARE;
constexpr int ImageFailStatus_ImgFailTypes_ImgFailTypes_ARRAYSIZE = ImageFailStatus_ImgFailTypes_ImgFailTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFailStatus_ImgFailTypes_descriptor();
template<typename T>
inline const std::string& ImageFailStatus_ImgFailTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFailStatus_ImgFailTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFailStatus_ImgFailTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFailStatus_ImgFailTypes_descriptor(), enum_t_value);
}
inline bool ImageFailStatus_ImgFailTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageFailStatus_ImgFailTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFailStatus_ImgFailTypes>(
    ImageFailStatus_ImgFailTypes_descriptor(), name, value);
}
enum ImageFailStatus_ImgFailLevel : int {
  ImageFailStatus_ImgFailLevel_FAIL_NONE = 0,
  ImageFailStatus_ImgFailLevel_FAIL_MILD = 1,
  ImageFailStatus_ImgFailLevel_FAIL_MODERATE = 2,
  ImageFailStatus_ImgFailLevel_FAIL_SEVERE = 3
};
bool ImageFailStatus_ImgFailLevel_IsValid(int value);
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus_ImgFailLevel_ImgFailLevel_MIN = ImageFailStatus_ImgFailLevel_FAIL_NONE;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus_ImgFailLevel_ImgFailLevel_MAX = ImageFailStatus_ImgFailLevel_FAIL_SEVERE;
constexpr int ImageFailStatus_ImgFailLevel_ImgFailLevel_ARRAYSIZE = ImageFailStatus_ImgFailLevel_ImgFailLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFailStatus_ImgFailLevel_descriptor();
template<typename T>
inline const std::string& ImageFailStatus_ImgFailLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFailStatus_ImgFailLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFailStatus_ImgFailLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFailStatus_ImgFailLevel_descriptor(), enum_t_value);
}
inline bool ImageFailStatus_ImgFailLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageFailStatus_ImgFailLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFailStatus_ImgFailLevel>(
    ImageFailStatus_ImgFailLevel_descriptor(), name, value);
}
enum PerceptionProperty : int {
  Property_Weather = 0,
  Property_Light = 1,
  Property_Scene = 2,
  Property_Time = 3
};
bool PerceptionProperty_IsValid(int value);
constexpr PerceptionProperty PerceptionProperty_MIN = Property_Weather;
constexpr PerceptionProperty PerceptionProperty_MAX = Property_Time;
constexpr int PerceptionProperty_ARRAYSIZE = PerceptionProperty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionProperty_descriptor();
template<typename T>
inline const std::string& PerceptionProperty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerceptionProperty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerceptionProperty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PerceptionProperty_descriptor(), enum_t_value);
}
inline bool PerceptionProperty_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerceptionProperty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerceptionProperty>(
    PerceptionProperty_descriptor(), name, value);
}
enum WeatherType : int {
  WEATHER_NORMAL = 0,
  WEATHER_NORMAL2 = 1,
  WEATHER_RAINY = 2,
  WEATHER_SNOWY = 3,
  WEATHER_HEAVYRAIN = 4,
  WEATHER_OTHER = 5
};
bool WeatherType_IsValid(int value);
constexpr WeatherType WeatherType_MIN = WEATHER_NORMAL;
constexpr WeatherType WeatherType_MAX = WEATHER_OTHER;
constexpr int WeatherType_ARRAYSIZE = WeatherType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeatherType_descriptor();
template<typename T>
inline const std::string& WeatherType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WeatherType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WeatherType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WeatherType_descriptor(), enum_t_value);
}
inline bool WeatherType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WeatherType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WeatherType>(
    WeatherType_descriptor(), name, value);
}
enum SceneType : int {
  SCENE_HIGHWAY = 0,
  SCENE_URBAN = 1,
  SCENE_RURAL = 2,
  SCENE_TUNNEL = 3,
  SCENE_OTHER = 5,
  SCENE_CHARGESTATION = 4
};
bool SceneType_IsValid(int value);
constexpr SceneType SceneType_MIN = SCENE_HIGHWAY;
constexpr SceneType SceneType_MAX = SCENE_OTHER;
constexpr int SceneType_ARRAYSIZE = SceneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SceneType_descriptor();
template<typename T>
inline const std::string& SceneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SceneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SceneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SceneType_descriptor(), enum_t_value);
}
inline bool SceneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SceneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SceneType>(
    SceneType_descriptor(), name, value);
}
enum TimeType : int {
  TIME_DAY = 0,
  TIME_NIGHT = 1,
  TIME_OTHER = 2
};
bool TimeType_IsValid(int value);
constexpr TimeType TimeType_MIN = TIME_DAY;
constexpr TimeType TimeType_MAX = TIME_OTHER;
constexpr int TimeType_ARRAYSIZE = TimeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeType_descriptor();
template<typename T>
inline const std::string& TimeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeType_descriptor(), enum_t_value);
}
inline bool TimeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeType>(
    TimeType_descriptor(), name, value);
}
enum LightType : int {
  LIGHT_NATRUALLIGHT = 0,
  LIGHT_LAMPLIGHT = 1,
  LIGHT_HARDLIGHT = 2,
  LIGHT_LOWSUN = 3,
  LIGHT_DARK = 4,
  LIGHT_OTHER = 5
};
bool LightType_IsValid(int value);
constexpr LightType LightType_MIN = LIGHT_NATRUALLIGHT;
constexpr LightType LightType_MAX = LIGHT_OTHER;
constexpr int LightType_ARRAYSIZE = LightType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightType_descriptor();
template<typename T>
inline const std::string& LightType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightType_descriptor(), enum_t_value);
}
inline bool LightType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LightType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightType>(
    LightType_descriptor(), name, value);
}
enum WorkConditionType : int {
  WORK_CONDITION_WEATHER = 0,
  WORK_CONDITION_LIGHT = 1,
  WORK_CONDITION_SCENE = 2,
  WORK_CONDITION_TIME = 3
};
bool WorkConditionType_IsValid(int value);
constexpr WorkConditionType WorkConditionType_MIN = WORK_CONDITION_WEATHER;
constexpr WorkConditionType WorkConditionType_MAX = WORK_CONDITION_TIME;
constexpr int WorkConditionType_ARRAYSIZE = WorkConditionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkConditionType_descriptor();
template<typename T>
inline const std::string& WorkConditionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkConditionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkConditionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkConditionType_descriptor(), enum_t_value);
}
inline bool WorkConditionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkConditionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkConditionType>(
    WorkConditionType_descriptor(), name, value);
}
enum ImageFormat : int {
  GRAY = 0,
  YV12 = 1,
  JPEG = 2,
  PNG = 3,
  CR12 = 4,
  BAD = 5,
  NV12 = 6,
  NV21 = 7,
  TIMEOUT = 8,
  BYPASS_ONLY = 9
};
bool ImageFormat_IsValid(int value);
constexpr ImageFormat ImageFormat_MIN = GRAY;
constexpr ImageFormat ImageFormat_MAX = BYPASS_ONLY;
constexpr int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor();
template<typename T>
inline const std::string& ImageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFormat_descriptor(), enum_t_value);
}
inline bool ImageFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum ParsingFormat : int {
  ParsingFormat_Raw = 0,
  ParsingFormat_Label = 1,
  ParsingFormat_Label_RLE = 2
};
bool ParsingFormat_IsValid(int value);
constexpr ParsingFormat ParsingFormat_MIN = ParsingFormat_Raw;
constexpr ParsingFormat ParsingFormat_MAX = ParsingFormat_Label_RLE;
constexpr int ParsingFormat_ARRAYSIZE = ParsingFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParsingFormat_descriptor();
template<typename T>
inline const std::string& ParsingFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParsingFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParsingFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParsingFormat_descriptor(), enum_t_value);
}
inline bool ParsingFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParsingFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParsingFormat>(
    ParsingFormat_descriptor(), name, value);
}
enum LineType : int {
  LINE_LEFT = 1,
  LINE_RIGHT = 2,
  LINE_LEFT_LEFT = 4,
  LINE_RIGHT_RIGHT = 8,
  LINE_DOUBLE = 512,
  LINE_DASH = 1024,
  LINE_SOLID = 2048,
  LINE_WHITE = 4096,
  LINE_YELLOW = 8192,
  LINE_BLUE = 16384,
  LINE_GREEN = 32768,
  LINE_FENCE = 65536,
  LINE_ROAD_HEIGHT = 131072,
  LINE_DIVERSION_SEPARATE = 262144,
  LINE_BARRIER = 524288,
  LINE_DIVERSION_MERGE = 1048576,
  LINE_PERCEPTION = 2097152,
  LINE_TRACKING = 4194304,
  LINE_RAW = 8388608,
  LINE_ROAD = 16777216
};
bool LineType_IsValid(int value);
constexpr LineType LineType_MIN = LINE_LEFT;
constexpr LineType LineType_MAX = LINE_ROAD;
constexpr int LineType_ARRAYSIZE = LineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineType_descriptor();
template<typename T>
inline const std::string& LineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LineType_descriptor(), enum_t_value);
}
inline bool LineType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LineType>(
    LineType_descriptor(), name, value);
}
enum ObstacleType : int {
  ObstacleType_VehicleRear = 0,
  ObstacleType_VehicleFull = 1,
  ObstacleType_Pedestrian = 2,
  ObstacleType_TrafficSign = 3,
  ObstacleType_TrafficLight = 4,
  ObstacleType_ParkingSlot = 5,
  ObstacleType_RoadSign = 6,
  ObstacleType_CrosswalkLine = 7,
  ObstacleType_TrafficArrow = 8,
  ObstacleType_TrafficCone = 9,
  ObstacleType_Barrel = 10,
  ObstacleType_YieldMark = 11,
  ObstacleType_SpeedMark = 12,
  ObstacleType_StopLine = 14,
  ObstacleType_Diamond = 15,
  ObstacleType_BicycleSign = 16,
  ObstacleType_SpeedBumps = 17,
  ObstacleType_Cyclist = 18,
  ObstacleType_ParkingLock = 19,
  ObstacleType_SpeedCamera = 20
};
bool ObstacleType_IsValid(int value);
constexpr ObstacleType ObstacleType_MIN = ObstacleType_VehicleRear;
constexpr ObstacleType ObstacleType_MAX = ObstacleType_SpeedCamera;
constexpr int ObstacleType_ARRAYSIZE = ObstacleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleType_descriptor();
template<typename T>
inline const std::string& ObstacleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleType_descriptor(), enum_t_value);
}
inline bool ObstacleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstacleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleType>(
    ObstacleType_descriptor(), name, value);
}
enum ParkingSlotStatus : int {
  ParkingSlotStatus_Occupied = 0,
  ParkingSlotStatus_Free = 1
};
bool ParkingSlotStatus_IsValid(int value);
constexpr ParkingSlotStatus ParkingSlotStatus_MIN = ParkingSlotStatus_Occupied;
constexpr ParkingSlotStatus ParkingSlotStatus_MAX = ParkingSlotStatus_Free;
constexpr int ParkingSlotStatus_ARRAYSIZE = ParkingSlotStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlotStatus_descriptor();
template<typename T>
inline const std::string& ParkingSlotStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParkingSlotStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParkingSlotStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParkingSlotStatus_descriptor(), enum_t_value);
}
inline bool ParkingSlotStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParkingSlotStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParkingSlotStatus>(
    ParkingSlotStatus_descriptor(), name, value);
}
enum VehProperty : int {
  VehProperty_Type = 0,
  VehProperty_Classification = 1,
  VehProperty_Light = 2,
  VehProperty_3DBox = 3,
  VehProperty_KeyPoints = 4,
  VehProperty_VehBBox = 5
};
bool VehProperty_IsValid(int value);
constexpr VehProperty VehProperty_MIN = VehProperty_Type;
constexpr VehProperty VehProperty_MAX = VehProperty_VehBBox;
constexpr int VehProperty_ARRAYSIZE = VehProperty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehProperty_descriptor();
template<typename T>
inline const std::string& VehProperty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehProperty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehProperty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehProperty_descriptor(), enum_t_value);
}
inline bool VehProperty_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehProperty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehProperty>(
    VehProperty_descriptor(), name, value);
}
enum VehPropertyPerceptionType : int {
  Veh_PerceptionType_LicensePlate = 0,
  Veh_PerceptionType_Wheel = 1
};
bool VehPropertyPerceptionType_IsValid(int value);
constexpr VehPropertyPerceptionType VehPropertyPerceptionType_MIN = Veh_PerceptionType_LicensePlate;
constexpr VehPropertyPerceptionType VehPropertyPerceptionType_MAX = Veh_PerceptionType_Wheel;
constexpr int VehPropertyPerceptionType_ARRAYSIZE = VehPropertyPerceptionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehPropertyPerceptionType_descriptor();
template<typename T>
inline const std::string& VehPropertyPerceptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehPropertyPerceptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehPropertyPerceptionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehPropertyPerceptionType_descriptor(), enum_t_value);
}
inline bool VehPropertyPerceptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehPropertyPerceptionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehPropertyPerceptionType>(
    VehPropertyPerceptionType_descriptor(), name, value);
}
enum TrafficLightStyle : int {
  L_Circle = 0,
  L_Forward = 1,
  L_Left = 2,
  L_Right = 3,
  L_Return = 4,
  L_Other = 5,
  L_No_Drive_into = 6,
  L_unknown = 7
};
bool TrafficLightStyle_IsValid(int value);
constexpr TrafficLightStyle TrafficLightStyle_MIN = L_Circle;
constexpr TrafficLightStyle TrafficLightStyle_MAX = L_unknown;
constexpr int TrafficLightStyle_ARRAYSIZE = TrafficLightStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLightStyle_descriptor();
template<typename T>
inline const std::string& TrafficLightStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficLightStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficLightStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficLightStyle_descriptor(), enum_t_value);
}
inline bool TrafficLightStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrafficLightStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficLightStyle>(
    TrafficLightStyle_descriptor(), name, value);
}
enum TrafficLightStatus : int {
  Green = 0,
  Yellow = 1,
  Red = 2,
  Unknow = 3,
  Other = 4,
  Off = 5
};
bool TrafficLightStatus_IsValid(int value);
constexpr TrafficLightStatus TrafficLightStatus_MIN = Green;
constexpr TrafficLightStatus TrafficLightStatus_MAX = Off;
constexpr int TrafficLightStatus_ARRAYSIZE = TrafficLightStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLightStatus_descriptor();
template<typename T>
inline const std::string& TrafficLightStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficLightStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficLightStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficLightStatus_descriptor(), enum_t_value);
}
inline bool TrafficLightStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrafficLightStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficLightStatus>(
    TrafficLightStatus_descriptor(), name, value);
}
enum TrafficSignProperty : int {
  Construction = 0,
  MinSpeedLim100 = 1,
  MinSpeedLim110 = 2,
  MinSpeedLim60 = 3,
  MinSpeedLim70 = 4,
  MinSpeedLim80 = 5,
  MinSpeedLim90 = 6,
  NoPassingRev = 7,
  SpeedLim10 = 24,
  SpeedLim100 = 25,
  SpeedLim100_electric = 26,
  SpeedLim110 = 27,
  SpeedLim120 = 28,
  SpeedLim120_electric = 29,
  SpeedLim15 = 30,
  SpeedLim20 = 31,
  SpeedLim25 = 32,
  SpeedLim30 = 33,
  SpeedLim35 = 34,
  SpeedLim40 = 35,
  SpeedLim40_electric = 36,
  SpeedLim5 = 37,
  SpeedLim50 = 38,
  SpeedLim50_electric = 39,
  SpeedLim60 = 40,
  SpeedLim60_electric = 41,
  SpeedLim65 = 42,
  SpeedLim70 = 43,
  SpeedLim80 = 44,
  SpeedLim80_electric = 45,
  SpeedLim90 = 46,
  SpeedLim90_electric = 47,
  SpeedLimRev = 48,
  MinSpeedLim50 = 49,
  SpeedLim5_electric = 50
};
bool TrafficSignProperty_IsValid(int value);
constexpr TrafficSignProperty TrafficSignProperty_MIN = Construction;
constexpr TrafficSignProperty TrafficSignProperty_MAX = SpeedLim5_electric;
constexpr int TrafficSignProperty_ARRAYSIZE = TrafficSignProperty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSignProperty_descriptor();
template<typename T>
inline const std::string& TrafficSignProperty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficSignProperty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficSignProperty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficSignProperty_descriptor(), enum_t_value);
}
inline bool TrafficSignProperty_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrafficSignProperty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficSignProperty>(
    TrafficSignProperty_descriptor(), name, value);
}
enum RoadSignProperty : int {
  RsProperty_Type = 0
};
bool RoadSignProperty_IsValid(int value);
constexpr RoadSignProperty RoadSignProperty_MIN = RsProperty_Type;
constexpr RoadSignProperty RoadSignProperty_MAX = RsProperty_Type;
constexpr int RoadSignProperty_ARRAYSIZE = RoadSignProperty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadSignProperty_descriptor();
template<typename T>
inline const std::string& RoadSignProperty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoadSignProperty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoadSignProperty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoadSignProperty_descriptor(), enum_t_value);
}
inline bool RoadSignProperty_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoadSignProperty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoadSignProperty>(
    RoadSignProperty_descriptor(), name, value);
}
enum ObstacleRawModelType : int {
  ObstacleRawModel_Car = 0,
  ObstacleRawModel_FullCar = 1,
  ObstacleRawModel_Ped = 2,
  ObstacleRawModel_Head = 3,
  ObstacleRawModel_TrafficSign = 5,
  ObstacleRawModel_TrafficLight = 6,
  ObstacleRawModel_Lane = 7,
  ObstacleRawModel_RoadSign = 10,
  ObstacleRawModel_TrafficArrow = 11,
  ObstacleRawModel_Cyclist = 16,
  ObstacleRawModel_ParkingLock = 17,
  ObstacleRawModel_SpeedCamera = 18,
  ObstacleRawModel_ParkingSlot = 22
};
bool ObstacleRawModelType_IsValid(int value);
constexpr ObstacleRawModelType ObstacleRawModelType_MIN = ObstacleRawModel_Car;
constexpr ObstacleRawModelType ObstacleRawModelType_MAX = ObstacleRawModel_ParkingSlot;
constexpr int ObstacleRawModelType_ARRAYSIZE = ObstacleRawModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRawModelType_descriptor();
template<typename T>
inline const std::string& ObstacleRawModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleRawModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleRawModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleRawModelType_descriptor(), enum_t_value);
}
inline bool ObstacleRawModelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstacleRawModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleRawModelType>(
    ObstacleRawModelType_descriptor(), name, value);
}
enum LanePosition : int {
  LANE_POSITION_CENTER = 0,
  LANE_POSITION_LEFT = 1,
  LANE_POSITION_RIGHT = 2
};
bool LanePosition_IsValid(int value);
constexpr LanePosition LanePosition_MIN = LANE_POSITION_CENTER;
constexpr LanePosition LanePosition_MAX = LANE_POSITION_RIGHT;
constexpr int LanePosition_ARRAYSIZE = LanePosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanePosition_descriptor();
template<typename T>
inline const std::string& LanePosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LanePosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LanePosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LanePosition_descriptor(), enum_t_value);
}
inline bool LanePosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LanePosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LanePosition>(
    LanePosition_descriptor(), name, value);
}
enum FreeSpacePointType : int {
  ParsingLabelType_Invalid = 255
};
bool FreeSpacePointType_IsValid(int value);
constexpr FreeSpacePointType FreeSpacePointType_MIN = ParsingLabelType_Invalid;
constexpr FreeSpacePointType FreeSpacePointType_MAX = ParsingLabelType_Invalid;
constexpr int FreeSpacePointType_ARRAYSIZE = FreeSpacePointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FreeSpacePointType_descriptor();
template<typename T>
inline const std::string& FreeSpacePointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FreeSpacePointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FreeSpacePointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FreeSpacePointType_descriptor(), enum_t_value);
}
inline bool FreeSpacePointType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FreeSpacePointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FreeSpacePointType>(
    FreeSpacePointType_descriptor(), name, value);
}
enum CameraType : int {
  CameraType_PinHole = 0,
  CameraType_FishEye = 1
};
bool CameraType_IsValid(int value);
constexpr CameraType CameraType_MIN = CameraType_PinHole;
constexpr CameraType CameraType_MAX = CameraType_FishEye;
constexpr int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor();
template<typename T>
inline const std::string& CameraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraType_descriptor(), enum_t_value);
}
inline bool CameraType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum CameraVersion : int {
  CameraVersion_CV = 0,
  CameraVersion_VCS = 1
};
bool CameraVersion_IsValid(int value);
constexpr CameraVersion CameraVersion_MIN = CameraVersion_CV;
constexpr CameraVersion CameraVersion_MAX = CameraVersion_VCS;
constexpr int CameraVersion_ARRAYSIZE = CameraVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraVersion_descriptor();
template<typename T>
inline const std::string& CameraVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraVersion_descriptor(), enum_t_value);
}
inline bool CameraVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraVersion>(
    CameraVersion_descriptor(), name, value);
}
enum CalibrationStatus : int {
  CalibrationStatus_Default = 0,
  CalibrationStatus_IntrinsicDone = 1,
  CalibrationStatus_ExtrinsicDone = 2
};
bool CalibrationStatus_IsValid(int value);
constexpr CalibrationStatus CalibrationStatus_MIN = CalibrationStatus_Default;
constexpr CalibrationStatus CalibrationStatus_MAX = CalibrationStatus_ExtrinsicDone;
constexpr int CalibrationStatus_ARRAYSIZE = CalibrationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibrationStatus_descriptor();
template<typename T>
inline const std::string& CalibrationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalibrationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalibrationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalibrationStatus_descriptor(), enum_t_value);
}
inline bool CalibrationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CalibrationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalibrationStatus>(
    CalibrationStatus_descriptor(), name, value);
}
enum DataType : int {
  DATA_IMG = 0,
  DATA_PARSING = 1,
  DATA_RADAR = 2
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = DATA_IMG;
constexpr DataType DataType_MAX = DATA_RADAR;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum PasringLableType : int {
  PasringLableTypeRsh_Road = 0,
  PasringLableTypeRsh_Sidewalk = 1,
  PasringLableTypeRsh_Building = 2,
  PasringLableTypeRsh_LaneMarking = 3,
  PasringLableTypeRsh_Fence = 4,
  PasringLableTypeRsh_Pole = 5,
  PasringLableTypeRsh_TrafficLight = 6,
  PasringLableTypeRsh_TrafficSign = 7,
  PasringLableTypeRsh_Vegetation = 8,
  PasringLableTypeRsh_Terrain = 9,
  PasringLableTypeRsh_Sky = 10,
  PasringLableTypeRsh_Person = 11,
  PasringLableTypeRsh_Rider = 12,
  PasringLableTypeRsh_Car = 13,
  PasringLableTypeRsh_Truck = 14,
  PasringLableTypeRsh_Bus = 15,
  PasringLableTypeRsh_Train = 16,
  PasringLableTypeRsh_Motorcycle = 17,
  PasringLableTypeRsh_Bicycle = 18,
  PasringLableTypeRsh_GuidePost = 19,
  PasringLableTypeRsh_CrosswalkLine = 20,
  PasringLableTypeRsh_TrafficArrow = 21,
  PasringLableTypeRsh_SignLine = 22,
  PasringLableTypeRsh_GuideLine = 23,
  PasringLableTypeRsh_TrafficCone = 24,
  PasringLableTypeRsh_Barrel = 25,
  PasringLableTypeRsh_StopLine = 26,
  PasringLableTypeRsh_SpeedMark = 27,
  PasringLableTypeRsh_Diamond = 28,
  PasringLableTypeRsh_BicycleSign = 29,
  PasringLableTypeRsh_SpeedBumps = 30,
  PasringLableTypeRsh_Tricycle = 31,
  PasringLableTypeRsh_SlowDownTriangle = 32,
  PasringLableTypeRsh_Mask = 33,
  PasringLableTypeRsh_PotHole = 34,
  PasringLableTypeRsh_Other = 35,
  PasringLableTypeRsh_Curb = 36,
  PasringLableTypeRsh_ParkingLine = 37,
  PasringLableTypeRsh_ParkingSpace = 38,
  PasringLableTypeRsh_ParkingRod = 39,
  PasringLableTypeRsh_ParkingLock = 40,
  PasringLableTypeRsh_Column = 41
};
bool PasringLableType_IsValid(int value);
constexpr PasringLableType PasringLableType_MIN = PasringLableTypeRsh_Road;
constexpr PasringLableType PasringLableType_MAX = PasringLableTypeRsh_Column;
constexpr int PasringLableType_ARRAYSIZE = PasringLableType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PasringLableType_descriptor();
template<typename T>
inline const std::string& PasringLableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PasringLableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PasringLableType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PasringLableType_descriptor(), enum_t_value);
}
inline bool PasringLableType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PasringLableType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PasringLableType>(
    PasringLableType_descriptor(), name, value);
}
// ===================================================================

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Point)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PointI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.PointI) */ {
 public:
  inline PointI() : PointI(nullptr) {}
  virtual ~PointI();

  PointI(const PointI& from);
  PointI(PointI&& from) noexcept
    : PointI() {
    *this = ::std::move(from);
  }

  inline PointI& operator=(const PointI& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointI& operator=(PointI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointI& default_instance();

  static inline const PointI* internal_default_instance() {
    return reinterpret_cast<const PointI*>(
               &_PointI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointI& a, PointI& b) {
    a.Swap(&b);
  }
  inline void Swap(PointI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointI* New() const final {
    return CreateMaybeMessage<PointI>(nullptr);
  }

  PointI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointI& from);
  void MergeFrom(const PointI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.PointI";
  }
  protected:
  explicit PointI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.PointI)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Contour PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Contour) */ {
 public:
  inline Contour() : Contour(nullptr) {}
  virtual ~Contour();

  Contour(const Contour& from);
  Contour(Contour&& from) noexcept
    : Contour() {
    *this = ::std::move(from);
  }

  inline Contour& operator=(const Contour& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contour& operator=(Contour&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Contour& default_instance();

  static inline const Contour* internal_default_instance() {
    return reinterpret_cast<const Contour*>(
               &_Contour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Contour& a, Contour& b) {
    a.Swap(&b);
  }
  inline void Swap(Contour* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contour* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Contour* New() const final {
    return CreateMaybeMessage<Contour>(nullptr);
  }

  Contour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Contour>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Contour& from);
  void MergeFrom(const Contour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Contour";
  }
  protected:
  explicit Contour(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 1,
  };
  // repeated .CommonProto.Point pts = 1;
  int pts_size() const;
  private:
  int _internal_pts_size() const;
  public:
  void clear_pts();
  ::CommonProto::Point* mutable_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
      mutable_pts();
  private:
  const ::CommonProto::Point& _internal_pts(int index) const;
  ::CommonProto::Point* _internal_add_pts();
  public:
  const ::CommonProto::Point& pts(int index) const;
  ::CommonProto::Point* add_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
      pts() const;

  // @@protoc_insertion_point(class_scope:CommonProto.Contour)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point > pts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 1,
  };
  // repeated .CommonProto.Point pts = 1;
  int pts_size() const;
  private:
  int _internal_pts_size() const;
  public:
  void clear_pts();
  ::CommonProto::Point* mutable_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
      mutable_pts();
  private:
  const ::CommonProto::Point& _internal_pts(int index) const;
  ::CommonProto::Point* _internal_add_pts();
  public:
  const ::CommonProto::Point& pts(int index) const;
  ::CommonProto::Point* add_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
      pts() const;

  // @@protoc_insertion_point(class_scope:CommonProto.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point > pts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Rect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Rect) */ {
 public:
  inline Rect() : Rect(nullptr) {}
  virtual ~Rect();

  Rect(const Rect& from);
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect& default_instance();

  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(nullptr);
  }

  Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Rect";
  }
  protected:
  explicit Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // required float left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // required float top = 2;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // required float right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // required float bottom = 4;
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Rect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float left_;
  float top_;
  float right_;
  float bottom_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class OBBox2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.OBBox2D) */ {
 public:
  inline OBBox2D() : OBBox2D(nullptr) {}
  virtual ~OBBox2D();

  OBBox2D(const OBBox2D& from);
  OBBox2D(OBBox2D&& from) noexcept
    : OBBox2D() {
    *this = ::std::move(from);
  }

  inline OBBox2D& operator=(const OBBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBBox2D& operator=(OBBox2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OBBox2D& default_instance();

  static inline const OBBox2D* internal_default_instance() {
    return reinterpret_cast<const OBBox2D*>(
               &_OBBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OBBox2D& a, OBBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(OBBox2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBBox2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBBox2D* New() const final {
    return CreateMaybeMessage<OBBox2D>(nullptr);
  }

  OBBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBBox2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OBBox2D& from);
  void MergeFrom(const OBBox2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OBBox2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.OBBox2D";
  }
  protected:
  explicit OBBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesPtsFieldNumber = 2,
    kSizeFieldNumber = 3,
    kCornerFieldNumber = 1,
  };
  // repeated .CommonProto.Point axes_pts = 2;
  int axes_pts_size() const;
  private:
  int _internal_axes_pts_size() const;
  public:
  void clear_axes_pts();
  ::CommonProto::Point* mutable_axes_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
      mutable_axes_pts();
  private:
  const ::CommonProto::Point& _internal_axes_pts(int index) const;
  ::CommonProto::Point* _internal_add_axes_pts();
  public:
  const ::CommonProto::Point& axes_pts(int index) const;
  ::CommonProto::Point* add_axes_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
      axes_pts() const;

  // repeated float size = 3;
  int size_size() const;
  private:
  int _internal_size_size() const;
  public:
  void clear_size();
  private:
  float _internal_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_size() const;
  void _internal_add_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_size();
  public:
  float size(int index) const;
  void set_size(int index, float value);
  void add_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_size();

  // required .CommonProto.Point corner = 1;
  bool has_corner() const;
  private:
  bool _internal_has_corner() const;
  public:
  void clear_corner();
  const ::CommonProto::Point& corner() const;
  ::CommonProto::Point* release_corner();
  ::CommonProto::Point* mutable_corner();
  void set_allocated_corner(::CommonProto::Point* corner);
  private:
  const ::CommonProto::Point& _internal_corner() const;
  ::CommonProto::Point* _internal_mutable_corner();
  public:
  void unsafe_arena_set_allocated_corner(
      ::CommonProto::Point* corner);
  ::CommonProto::Point* unsafe_arena_release_corner();

  // @@protoc_insertion_point(class_scope:CommonProto.OBBox2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point > axes_pts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > size_;
  ::CommonProto::Point* corner_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Box3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Box3D) */ {
 public:
  inline Box3D() : Box3D(nullptr) {}
  virtual ~Box3D();

  Box3D(const Box3D& from);
  Box3D(Box3D&& from) noexcept
    : Box3D() {
    *this = ::std::move(from);
  }

  inline Box3D& operator=(const Box3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box3D& operator=(Box3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Box3D& default_instance();

  static inline const Box3D* internal_default_instance() {
    return reinterpret_cast<const Box3D*>(
               &_Box3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Box3D& a, Box3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Box3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Box3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Box3D* New() const final {
    return CreateMaybeMessage<Box3D>(nullptr);
  }

  Box3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Box3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Box3D& from);
  void MergeFrom(const Box3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Box3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Box3D";
  }
  protected:
  explicit Box3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerLtFieldNumber = 1,
    kLowerLbFieldNumber = 2,
    kLowerRbFieldNumber = 3,
    kLowerRtFieldNumber = 4,
    kUpperLtFieldNumber = 5,
    kUpperLbFieldNumber = 6,
    kUpperRbFieldNumber = 7,
    kUpperRtFieldNumber = 8,
    kConfFieldNumber = 9,
  };
  // required .CommonProto.Point lower_lt = 1;
  bool has_lower_lt() const;
  private:
  bool _internal_has_lower_lt() const;
  public:
  void clear_lower_lt();
  const ::CommonProto::Point& lower_lt() const;
  ::CommonProto::Point* release_lower_lt();
  ::CommonProto::Point* mutable_lower_lt();
  void set_allocated_lower_lt(::CommonProto::Point* lower_lt);
  private:
  const ::CommonProto::Point& _internal_lower_lt() const;
  ::CommonProto::Point* _internal_mutable_lower_lt();
  public:
  void unsafe_arena_set_allocated_lower_lt(
      ::CommonProto::Point* lower_lt);
  ::CommonProto::Point* unsafe_arena_release_lower_lt();

  // required .CommonProto.Point lower_lb = 2;
  bool has_lower_lb() const;
  private:
  bool _internal_has_lower_lb() const;
  public:
  void clear_lower_lb();
  const ::CommonProto::Point& lower_lb() const;
  ::CommonProto::Point* release_lower_lb();
  ::CommonProto::Point* mutable_lower_lb();
  void set_allocated_lower_lb(::CommonProto::Point* lower_lb);
  private:
  const ::CommonProto::Point& _internal_lower_lb() const;
  ::CommonProto::Point* _internal_mutable_lower_lb();
  public:
  void unsafe_arena_set_allocated_lower_lb(
      ::CommonProto::Point* lower_lb);
  ::CommonProto::Point* unsafe_arena_release_lower_lb();

  // required .CommonProto.Point lower_rb = 3;
  bool has_lower_rb() const;
  private:
  bool _internal_has_lower_rb() const;
  public:
  void clear_lower_rb();
  const ::CommonProto::Point& lower_rb() const;
  ::CommonProto::Point* release_lower_rb();
  ::CommonProto::Point* mutable_lower_rb();
  void set_allocated_lower_rb(::CommonProto::Point* lower_rb);
  private:
  const ::CommonProto::Point& _internal_lower_rb() const;
  ::CommonProto::Point* _internal_mutable_lower_rb();
  public:
  void unsafe_arena_set_allocated_lower_rb(
      ::CommonProto::Point* lower_rb);
  ::CommonProto::Point* unsafe_arena_release_lower_rb();

  // required .CommonProto.Point lower_rt = 4;
  bool has_lower_rt() const;
  private:
  bool _internal_has_lower_rt() const;
  public:
  void clear_lower_rt();
  const ::CommonProto::Point& lower_rt() const;
  ::CommonProto::Point* release_lower_rt();
  ::CommonProto::Point* mutable_lower_rt();
  void set_allocated_lower_rt(::CommonProto::Point* lower_rt);
  private:
  const ::CommonProto::Point& _internal_lower_rt() const;
  ::CommonProto::Point* _internal_mutable_lower_rt();
  public:
  void unsafe_arena_set_allocated_lower_rt(
      ::CommonProto::Point* lower_rt);
  ::CommonProto::Point* unsafe_arena_release_lower_rt();

  // required .CommonProto.Point upper_lt = 5;
  bool has_upper_lt() const;
  private:
  bool _internal_has_upper_lt() const;
  public:
  void clear_upper_lt();
  const ::CommonProto::Point& upper_lt() const;
  ::CommonProto::Point* release_upper_lt();
  ::CommonProto::Point* mutable_upper_lt();
  void set_allocated_upper_lt(::CommonProto::Point* upper_lt);
  private:
  const ::CommonProto::Point& _internal_upper_lt() const;
  ::CommonProto::Point* _internal_mutable_upper_lt();
  public:
  void unsafe_arena_set_allocated_upper_lt(
      ::CommonProto::Point* upper_lt);
  ::CommonProto::Point* unsafe_arena_release_upper_lt();

  // required .CommonProto.Point upper_lb = 6;
  bool has_upper_lb() const;
  private:
  bool _internal_has_upper_lb() const;
  public:
  void clear_upper_lb();
  const ::CommonProto::Point& upper_lb() const;
  ::CommonProto::Point* release_upper_lb();
  ::CommonProto::Point* mutable_upper_lb();
  void set_allocated_upper_lb(::CommonProto::Point* upper_lb);
  private:
  const ::CommonProto::Point& _internal_upper_lb() const;
  ::CommonProto::Point* _internal_mutable_upper_lb();
  public:
  void unsafe_arena_set_allocated_upper_lb(
      ::CommonProto::Point* upper_lb);
  ::CommonProto::Point* unsafe_arena_release_upper_lb();

  // required .CommonProto.Point upper_rb = 7;
  bool has_upper_rb() const;
  private:
  bool _internal_has_upper_rb() const;
  public:
  void clear_upper_rb();
  const ::CommonProto::Point& upper_rb() const;
  ::CommonProto::Point* release_upper_rb();
  ::CommonProto::Point* mutable_upper_rb();
  void set_allocated_upper_rb(::CommonProto::Point* upper_rb);
  private:
  const ::CommonProto::Point& _internal_upper_rb() const;
  ::CommonProto::Point* _internal_mutable_upper_rb();
  public:
  void unsafe_arena_set_allocated_upper_rb(
      ::CommonProto::Point* upper_rb);
  ::CommonProto::Point* unsafe_arena_release_upper_rb();

  // required .CommonProto.Point upper_rt = 8;
  bool has_upper_rt() const;
  private:
  bool _internal_has_upper_rt() const;
  public:
  void clear_upper_rt();
  const ::CommonProto::Point& upper_rt() const;
  ::CommonProto::Point* release_upper_rt();
  ::CommonProto::Point* mutable_upper_rt();
  void set_allocated_upper_rt(::CommonProto::Point* upper_rt);
  private:
  const ::CommonProto::Point& _internal_upper_rt() const;
  ::CommonProto::Point* _internal_mutable_upper_rt();
  public:
  void unsafe_arena_set_allocated_upper_rt(
      ::CommonProto::Point* upper_rt);
  ::CommonProto::Point* unsafe_arena_release_upper_rt();

  // optional float conf = 9;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  float conf() const;
  void set_conf(float value);
  private:
  float _internal_conf() const;
  void _internal_set_conf(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Box3D)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CommonProto::Point* lower_lt_;
  ::CommonProto::Point* lower_lb_;
  ::CommonProto::Point* lower_rb_;
  ::CommonProto::Point* lower_rt_;
  ::CommonProto::Point* upper_lt_;
  ::CommonProto::Point* upper_lb_;
  ::CommonProto::Point* upper_rb_;
  ::CommonProto::Point* upper_rt_;
  float conf_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KeyPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.KeyPoint) */ {
 public:
  inline KeyPoint() : KeyPoint(nullptr) {}
  virtual ~KeyPoint();

  KeyPoint(const KeyPoint& from);
  KeyPoint(KeyPoint&& from) noexcept
    : KeyPoint() {
    *this = ::std::move(from);
  }

  inline KeyPoint& operator=(const KeyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPoint& operator=(KeyPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyPoint& default_instance();

  static inline const KeyPoint* internal_default_instance() {
    return reinterpret_cast<const KeyPoint*>(
               &_KeyPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KeyPoint& a, KeyPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPoint* New() const final {
    return CreateMaybeMessage<KeyPoint>(nullptr);
  }

  KeyPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyPoint& from);
  void MergeFrom(const KeyPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.KeyPoint";
  }
  protected:
  explicit KeyPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfFieldNumber = 3,
  };
  // optional .CommonProto.Point pt = 1;
  bool has_pt() const;
  private:
  bool _internal_has_pt() const;
  public:
  void clear_pt();
  const ::CommonProto::Point& pt() const;
  ::CommonProto::Point* release_pt();
  ::CommonProto::Point* mutable_pt();
  void set_allocated_pt(::CommonProto::Point* pt);
  private:
  const ::CommonProto::Point& _internal_pt() const;
  ::CommonProto::Point* _internal_mutable_pt();
  public:
  void unsafe_arena_set_allocated_pt(
      ::CommonProto::Point* pt);
  ::CommonProto::Point* unsafe_arena_release_pt();

  // optional float type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  float type() const;
  void set_type(float value);
  private:
  float _internal_type() const;
  void _internal_set_type(float value);
  public:

  // optional float conf = 3;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  float conf() const;
  void set_conf(float value);
  private:
  float _internal_conf() const;
  void _internal_set_conf(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.KeyPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CommonProto::Point* pt_;
  float type_;
  float conf_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Category PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Category) */ {
 public:
  inline Category() : Category(nullptr) {}
  virtual ~Category();

  Category(const Category& from);
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  inline Category& operator=(Category&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Category& default_instance();

  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }
  inline void Swap(Category* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Category* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(nullptr);
  }

  Category* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Category* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Category";
  }
  protected:
  explicit Category(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 3,
    kPropertyTypeFieldNumber = 1,
    kPropertyFieldNumber = 2,
    kPropertyConfFieldNumber = 4,
  };
  // optional string property_name = 3;
  bool has_property_name() const;
  private:
  bool _internal_has_property_name() const;
  public:
  void clear_property_name();
  const std::string& property_name() const;
  void set_property_name(const std::string& value);
  void set_property_name(std::string&& value);
  void set_property_name(const char* value);
  void set_property_name(const char* value, size_t size);
  std::string* mutable_property_name();
  std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // optional int32 property_type = 1;
  bool has_property_type() const;
  private:
  bool _internal_has_property_type() const;
  public:
  void clear_property_type();
  ::PROTOBUF_NAMESPACE_ID::int32 property_type() const;
  void set_property_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property_type() const;
  void _internal_set_property_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  ::PROTOBUF_NAMESPACE_ID::int32 property() const;
  void set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property() const;
  void _internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float property_conf = 4;
  bool has_property_conf() const;
  private:
  bool _internal_has_property_conf() const;
  public:
  void clear_property_conf();
  float property_conf() const;
  void set_property_conf(float value);
  private:
  float _internal_property_conf() const;
  void _internal_set_property_conf(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Category)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 property_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 property_;
  float property_conf_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class WorkCondition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.WorkCondition) */ {
 public:
  inline WorkCondition() : WorkCondition(nullptr) {}
  virtual ~WorkCondition();

  WorkCondition(const WorkCondition& from);
  WorkCondition(WorkCondition&& from) noexcept
    : WorkCondition() {
    *this = ::std::move(from);
  }

  inline WorkCondition& operator=(const WorkCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkCondition& operator=(WorkCondition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkCondition& default_instance();

  static inline const WorkCondition* internal_default_instance() {
    return reinterpret_cast<const WorkCondition*>(
               &_WorkCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WorkCondition& a, WorkCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkCondition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkCondition* New() const final {
    return CreateMaybeMessage<WorkCondition>(nullptr);
  }

  WorkCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkCondition& from);
  void MergeFrom(const WorkCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.WorkCondition";
  }
  protected:
  explicit WorkCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kCamIdFieldNumber = 3,
  };
  // optional .CommonProto.Category category = 1;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const ::CommonProto::Category& category() const;
  ::CommonProto::Category* release_category();
  ::CommonProto::Category* mutable_category();
  void set_allocated_category(::CommonProto::Category* category);
  private:
  const ::CommonProto::Category& _internal_category() const;
  ::CommonProto::Category* _internal_mutable_category();
  public:
  void unsafe_arena_set_allocated_category(
      ::CommonProto::Category* category);
  ::CommonProto::Category* unsafe_arena_release_category();

  // optional int32 frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cam_id = 3;
  bool has_cam_id() const;
  private:
  bool _internal_has_cam_id() const;
  public:
  void clear_cam_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id() const;
  void set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cam_id() const;
  void _internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.WorkCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CommonProto::Category* category_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kTimeStampFieldNumber = 4,
    kChannelFieldNumber = 3,
    kSendModeFieldNumber = 5,
    kFormatFieldNumber = 6,
    kIndexFieldNumber = 7,
    kCountFieldNumber = 8,
    kDepthFieldNumber = 9,
    kAlignFieldNumber = 10,
    kImageCounterFieldNumber = 11,
  };
  // required int32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 time_stamp = 4;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 send_mode = 5;
  bool has_send_mode() const;
  private:
  bool _internal_has_send_mode() const;
  public:
  void clear_send_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 send_mode() const;
  void set_send_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_send_mode() const;
  void _internal_set_send_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 format = 6;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 index = 7;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 count = 8;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 depth = 9;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 align = 10;
  bool has_align() const;
  private:
  bool _internal_has_align() const;
  public:
  void clear_align();
  ::PROTOBUF_NAMESPACE_ID::int32 align() const;
  void set_align(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_align() const;
  void _internal_set_align(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 image_counter = 11;
  bool has_image_counter() const;
  private:
  bool _internal_has_image_counter() const;
  public:
  void clear_image_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 image_counter() const;
  void set_image_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_counter() const;
  void _internal_set_image_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Image)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 send_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 align_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_counter_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Velocity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Velocity) */ {
 public:
  inline Velocity() : Velocity(nullptr) {}
  virtual ~Velocity();

  Velocity(const Velocity& from);
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Velocity& default_instance();

  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Velocity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Velocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return CreateMaybeMessage<Velocity>(nullptr);
  }

  Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Velocity";
  }
  protected:
  explicit Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVxFieldNumber = 1,
    kVyFieldNumber = 2,
    kVzFieldNumber = 3,
  };
  // required float vx = 1;
  bool has_vx() const;
  private:
  bool _internal_has_vx() const;
  public:
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // required float vy = 2;
  bool has_vy() const;
  private:
  bool _internal_has_vy() const;
  public:
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // optional float vz = 3;
  bool has_vz() const;
  private:
  bool _internal_has_vz() const;
  public:
  void clear_vz();
  float vz() const;
  void set_vz(float value);
  private:
  float _internal_vz() const;
  void _internal_set_vz(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Velocity)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float vx_;
  float vy_;
  float vz_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Line PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  virtual ~Line();

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Line& default_instance();

  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const final {
    return CreateMaybeMessage<Line>(nullptr);
  }

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Line_EndPointType EndPointType;
  static constexpr EndPointType EndPointType_Far =
    Line_EndPointType_EndPointType_Far;
  static constexpr EndPointType EndPointType_Near =
    Line_EndPointType_EndPointType_Near;
  static inline bool EndPointType_IsValid(int value) {
    return Line_EndPointType_IsValid(value);
  }
  static constexpr EndPointType EndPointType_MIN =
    Line_EndPointType_EndPointType_MIN;
  static constexpr EndPointType EndPointType_MAX =
    Line_EndPointType_EndPointType_MAX;
  static constexpr int EndPointType_ARRAYSIZE =
    Line_EndPointType_EndPointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EndPointType_descriptor() {
    return Line_EndPointType_descriptor();
  }
  template<typename T>
  static inline const std::string& EndPointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EndPointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EndPointType_Name.");
    return Line_EndPointType_Name(enum_t_value);
  }
  static inline bool EndPointType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EndPointType* value) {
    return Line_EndPointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCoeffsFieldNumber = 7,
    kEndPointsFieldNumber = 8,
    kContoursFieldNumber = 11,
    kSigmaCoeffsFieldNumber = 20,
    kIdFieldNumber = 1,
    kLifeTimeFieldNumber = 3,
    kTypeFieldNumber = 9,
    kSourceFieldNumber = 10,
    kDistToFrontWheelFieldNumber = 12,
    kWidthFieldNumber = 13,
    kTypeSiblingFieldNumber = 14,
    kConfFieldNumber = 15,
  };
  // repeated float coeffs = 7;
  int coeffs_size() const;
  private:
  int _internal_coeffs_size() const;
  public:
  void clear_coeffs();
  private:
  float _internal_coeffs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_coeffs() const;
  void _internal_add_coeffs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_coeffs();
  public:
  float coeffs(int index) const;
  void set_coeffs(int index, float value);
  void add_coeffs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      coeffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_coeffs();

  // repeated .CommonProto.Point end_points = 8;
  int end_points_size() const;
  private:
  int _internal_end_points_size() const;
  public:
  void clear_end_points();
  ::CommonProto::Point* mutable_end_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
      mutable_end_points();
  private:
  const ::CommonProto::Point& _internal_end_points(int index) const;
  ::CommonProto::Point* _internal_add_end_points();
  public:
  const ::CommonProto::Point& end_points(int index) const;
  ::CommonProto::Point* add_end_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
      end_points() const;

  // repeated .CommonProto.Contour contours = 11;
  int contours_size() const;
  private:
  int _internal_contours_size() const;
  public:
  void clear_contours();
  ::CommonProto::Contour* mutable_contours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Contour >*
      mutable_contours();
  private:
  const ::CommonProto::Contour& _internal_contours(int index) const;
  ::CommonProto::Contour* _internal_add_contours();
  public:
  const ::CommonProto::Contour& contours(int index) const;
  ::CommonProto::Contour* add_contours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Contour >&
      contours() const;

  // repeated float sigma_coeffs = 20;
  int sigma_coeffs_size() const;
  private:
  int _internal_sigma_coeffs_size() const;
  public:
  void clear_sigma_coeffs();
  private:
  float _internal_sigma_coeffs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sigma_coeffs() const;
  void _internal_add_sigma_coeffs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sigma_coeffs();
  public:
  float sigma_coeffs(int index) const;
  void set_sigma_coeffs(int index, float value);
  void add_sigma_coeffs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sigma_coeffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sigma_coeffs();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 life_time = 3;
  bool has_life_time() const;
  private:
  bool _internal_has_life_time() const;
  public:
  void clear_life_time();
  ::PROTOBUF_NAMESPACE_ID::int32 life_time() const;
  void set_life_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_life_time() const;
  void _internal_set_life_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 type = 9;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 source = 10;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float dist_to_front_wheel = 12;
  bool has_dist_to_front_wheel() const;
  private:
  bool _internal_has_dist_to_front_wheel() const;
  public:
  void clear_dist_to_front_wheel();
  float dist_to_front_wheel() const;
  void set_dist_to_front_wheel(float value);
  private:
  float _internal_dist_to_front_wheel() const;
  void _internal_set_dist_to_front_wheel(float value);
  public:

  // optional float width = 13;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional int32 type_sibling = 14;
  bool has_type_sibling() const;
  private:
  bool _internal_has_type_sibling() const;
  public:
  void clear_type_sibling();
  ::PROTOBUF_NAMESPACE_ID::int32 type_sibling() const;
  void set_type_sibling(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_sibling() const;
  void _internal_set_type_sibling(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float conf = 15;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  float conf() const;
  void set_conf(float value);
  private:
  float _internal_conf() const;
  void _internal_set_conf(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > coeffs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point > end_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Contour > contours_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sigma_coeffs_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 life_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_;
  float dist_to_front_wheel_;
  float width_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_sibling_;
  float conf_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Lines PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Lines) */ {
 public:
  inline Lines() : Lines(nullptr) {}
  virtual ~Lines();

  Lines(const Lines& from);
  Lines(Lines&& from) noexcept
    : Lines() {
    *this = ::std::move(from);
  }

  inline Lines& operator=(const Lines& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lines& operator=(Lines&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lines& default_instance();

  static inline const Lines* internal_default_instance() {
    return reinterpret_cast<const Lines*>(
               &_Lines_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Lines& a, Lines& b) {
    a.Swap(&b);
  }
  inline void Swap(Lines* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lines* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lines* New() const final {
    return CreateMaybeMessage<Lines>(nullptr);
  }

  Lines* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lines>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lines& from);
  void MergeFrom(const Lines& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lines* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Lines";
  }
  protected:
  explicit Lines(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 2,
    kCamIdFieldNumber = 1,
  };
  // repeated .CommonProto.Line lines = 2;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::CommonProto::Line* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Line >*
      mutable_lines();
  private:
  const ::CommonProto::Line& _internal_lines(int index) const;
  ::CommonProto::Line* _internal_add_lines();
  public:
  const ::CommonProto::Line& lines(int index) const;
  ::CommonProto::Line* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Line >&
      lines() const;

  // optional int32 cam_id = 1;
  bool has_cam_id() const;
  private:
  bool _internal_has_cam_id() const;
  public:
  void clear_cam_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id() const;
  void set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cam_id() const;
  void _internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Lines)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Line > lines_;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class WorldSpaceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.WorldSpaceInfo) */ {
 public:
  inline WorldSpaceInfo() : WorldSpaceInfo(nullptr) {}
  virtual ~WorldSpaceInfo();

  WorldSpaceInfo(const WorldSpaceInfo& from);
  WorldSpaceInfo(WorldSpaceInfo&& from) noexcept
    : WorldSpaceInfo() {
    *this = ::std::move(from);
  }

  inline WorldSpaceInfo& operator=(const WorldSpaceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldSpaceInfo& operator=(WorldSpaceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldSpaceInfo& default_instance();

  static inline const WorldSpaceInfo* internal_default_instance() {
    return reinterpret_cast<const WorldSpaceInfo*>(
               &_WorldSpaceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(WorldSpaceInfo& a, WorldSpaceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldSpaceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldSpaceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldSpaceInfo* New() const final {
    return CreateMaybeMessage<WorldSpaceInfo>(nullptr);
  }

  WorldSpaceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldSpaceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldSpaceInfo& from);
  void MergeFrom(const WorldSpaceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldSpaceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.WorldSpaceInfo";
  }
  protected:
  explicit WorldSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigmaVelFieldNumber = 31,
    kSigmaPositionFieldNumber = 34,
    kVelFieldNumber = 2,
    kPolyFieldNumber = 6,
    kPositionFieldNumber = 7,
    kPositionObsFieldNumber = 12,
    kVelAbsWorldFieldNumber = 16,
    kYawFieldNumber = 1,
    kLengthFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kTraversableFieldNumber = 8,
    kHmwFieldNumber = 9,
    kTtcFieldNumber = 10,
    kCurrLaneFieldNumber = 11,
    kConfYawFieldNumber = 36,
    kSigmaYawFieldNumber = 30,
    kSigmaWidthFieldNumber = 32,
    kSigmaHeightFieldNumber = 33,
    kSigmaLengthFieldNumber = 35,
  };
  // repeated float sigma_vel = 31;
  int sigma_vel_size() const;
  private:
  int _internal_sigma_vel_size() const;
  public:
  void clear_sigma_vel();
  private:
  float _internal_sigma_vel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sigma_vel() const;
  void _internal_add_sigma_vel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sigma_vel();
  public:
  float sigma_vel(int index) const;
  void set_sigma_vel(int index, float value);
  void add_sigma_vel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sigma_vel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sigma_vel();

  // repeated float sigma_position = 34;
  int sigma_position_size() const;
  private:
  int _internal_sigma_position_size() const;
  public:
  void clear_sigma_position();
  private:
  float _internal_sigma_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sigma_position() const;
  void _internal_add_sigma_position(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sigma_position();
  public:
  float sigma_position(int index) const;
  void set_sigma_position(int index, float value);
  void add_sigma_position(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sigma_position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sigma_position();

  // optional .CommonProto.Velocity vel = 2;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::CommonProto::Velocity& vel() const;
  ::CommonProto::Velocity* release_vel();
  ::CommonProto::Velocity* mutable_vel();
  void set_allocated_vel(::CommonProto::Velocity* vel);
  private:
  const ::CommonProto::Velocity& _internal_vel() const;
  ::CommonProto::Velocity* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::CommonProto::Velocity* vel);
  ::CommonProto::Velocity* unsafe_arena_release_vel();

  // optional .CommonProto.Polygon poly = 6;
  bool has_poly() const;
  private:
  bool _internal_has_poly() const;
  public:
  void clear_poly();
  const ::CommonProto::Polygon& poly() const;
  ::CommonProto::Polygon* release_poly();
  ::CommonProto::Polygon* mutable_poly();
  void set_allocated_poly(::CommonProto::Polygon* poly);
  private:
  const ::CommonProto::Polygon& _internal_poly() const;
  ::CommonProto::Polygon* _internal_mutable_poly();
  public:
  void unsafe_arena_set_allocated_poly(
      ::CommonProto::Polygon* poly);
  ::CommonProto::Polygon* unsafe_arena_release_poly();

  // optional .CommonProto.Point position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::CommonProto::Point& position() const;
  ::CommonProto::Point* release_position();
  ::CommonProto::Point* mutable_position();
  void set_allocated_position(::CommonProto::Point* position);
  private:
  const ::CommonProto::Point& _internal_position() const;
  ::CommonProto::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::CommonProto::Point* position);
  ::CommonProto::Point* unsafe_arena_release_position();

  // optional .CommonProto.Point position_obs = 12;
  bool has_position_obs() const;
  private:
  bool _internal_has_position_obs() const;
  public:
  void clear_position_obs();
  const ::CommonProto::Point& position_obs() const;
  ::CommonProto::Point* release_position_obs();
  ::CommonProto::Point* mutable_position_obs();
  void set_allocated_position_obs(::CommonProto::Point* position_obs);
  private:
  const ::CommonProto::Point& _internal_position_obs() const;
  ::CommonProto::Point* _internal_mutable_position_obs();
  public:
  void unsafe_arena_set_allocated_position_obs(
      ::CommonProto::Point* position_obs);
  ::CommonProto::Point* unsafe_arena_release_position_obs();

  // optional .CommonProto.Velocity vel_abs_world = 16;
  bool has_vel_abs_world() const;
  private:
  bool _internal_has_vel_abs_world() const;
  public:
  void clear_vel_abs_world();
  const ::CommonProto::Velocity& vel_abs_world() const;
  ::CommonProto::Velocity* release_vel_abs_world();
  ::CommonProto::Velocity* mutable_vel_abs_world();
  void set_allocated_vel_abs_world(::CommonProto::Velocity* vel_abs_world);
  private:
  const ::CommonProto::Velocity& _internal_vel_abs_world() const;
  ::CommonProto::Velocity* _internal_mutable_vel_abs_world();
  public:
  void unsafe_arena_set_allocated_vel_abs_world(
      ::CommonProto::Velocity* vel_abs_world);
  ::CommonProto::Velocity* unsafe_arena_release_vel_abs_world();

  // optional float yaw = 1;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // optional float length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // optional float width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // optional int32 traversable = 8;
  bool has_traversable() const;
  private:
  bool _internal_has_traversable() const;
  public:
  void clear_traversable();
  ::PROTOBUF_NAMESPACE_ID::int32 traversable() const;
  void set_traversable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_traversable() const;
  void _internal_set_traversable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float hmw = 9;
  bool has_hmw() const;
  private:
  bool _internal_has_hmw() const;
  public:
  void clear_hmw();
  float hmw() const;
  void set_hmw(float value);
  private:
  float _internal_hmw() const;
  void _internal_set_hmw(float value);
  public:

  // optional float ttc = 10;
  bool has_ttc() const;
  private:
  bool _internal_has_ttc() const;
  public:
  void clear_ttc();
  float ttc() const;
  void set_ttc(float value);
  private:
  float _internal_ttc() const;
  void _internal_set_ttc(float value);
  public:

  // optional int32 curr_lane = 11;
  bool has_curr_lane() const;
  private:
  bool _internal_has_curr_lane() const;
  public:
  void clear_curr_lane();
  ::PROTOBUF_NAMESPACE_ID::int32 curr_lane() const;
  void set_curr_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curr_lane() const;
  void _internal_set_curr_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float conf_yaw = 36;
  bool has_conf_yaw() const;
  private:
  bool _internal_has_conf_yaw() const;
  public:
  void clear_conf_yaw();
  float conf_yaw() const;
  void set_conf_yaw(float value);
  private:
  float _internal_conf_yaw() const;
  void _internal_set_conf_yaw(float value);
  public:

  // optional float sigma_yaw = 30;
  bool has_sigma_yaw() const;
  private:
  bool _internal_has_sigma_yaw() const;
  public:
  void clear_sigma_yaw();
  float sigma_yaw() const;
  void set_sigma_yaw(float value);
  private:
  float _internal_sigma_yaw() const;
  void _internal_set_sigma_yaw(float value);
  public:

  // optional float sigma_width = 32;
  bool has_sigma_width() const;
  private:
  bool _internal_has_sigma_width() const;
  public:
  void clear_sigma_width();
  float sigma_width() const;
  void set_sigma_width(float value);
  private:
  float _internal_sigma_width() const;
  void _internal_set_sigma_width(float value);
  public:

  // optional float sigma_height = 33;
  bool has_sigma_height() const;
  private:
  bool _internal_has_sigma_height() const;
  public:
  void clear_sigma_height();
  float sigma_height() const;
  void set_sigma_height(float value);
  private:
  float _internal_sigma_height() const;
  void _internal_set_sigma_height(float value);
  public:

  // optional float sigma_length = 35;
  bool has_sigma_length() const;
  private:
  bool _internal_has_sigma_length() const;
  public:
  void clear_sigma_length();
  float sigma_length() const;
  void set_sigma_length(float value);
  private:
  float _internal_sigma_length() const;
  void _internal_set_sigma_length(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.WorldSpaceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sigma_vel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sigma_position_;
  ::CommonProto::Velocity* vel_;
  ::CommonProto::Polygon* poly_;
  ::CommonProto::Point* position_;
  ::CommonProto::Point* position_obs_;
  ::CommonProto::Velocity* vel_abs_world_;
  float yaw_;
  float length_;
  float width_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::int32 traversable_;
  float hmw_;
  float ttc_;
  ::PROTOBUF_NAMESPACE_ID::int32 curr_lane_;
  float conf_yaw_;
  float sigma_yaw_;
  float sigma_width_;
  float sigma_height_;
  float sigma_length_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ImageSpaceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ImageSpaceInfo) */ {
 public:
  inline ImageSpaceInfo() : ImageSpaceInfo(nullptr) {}
  virtual ~ImageSpaceInfo();

  ImageSpaceInfo(const ImageSpaceInfo& from);
  ImageSpaceInfo(ImageSpaceInfo&& from) noexcept
    : ImageSpaceInfo() {
    *this = ::std::move(from);
  }

  inline ImageSpaceInfo& operator=(const ImageSpaceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSpaceInfo& operator=(ImageSpaceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageSpaceInfo& default_instance();

  static inline const ImageSpaceInfo* internal_default_instance() {
    return reinterpret_cast<const ImageSpaceInfo*>(
               &_ImageSpaceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ImageSpaceInfo& a, ImageSpaceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSpaceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSpaceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSpaceInfo* New() const final {
    return CreateMaybeMessage<ImageSpaceInfo>(nullptr);
  }

  ImageSpaceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSpaceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageSpaceInfo& from);
  void MergeFrom(const ImageSpaceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSpaceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ImageSpaceInfo";
  }
  protected:
  explicit ImageSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectFieldNumber = 1,
    kBoxFieldNumber = 11,
    kPolyFieldNumber = 12,
    kSigmaWidthFieldNumber = 20,
    kSigmaHeightFieldNumber = 21,
    kSigmaXFieldNumber = 22,
    kSigmaYFieldNumber = 23,
  };
  // optional .CommonProto.Rect rect = 1;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::CommonProto::Rect& rect() const;
  ::CommonProto::Rect* release_rect();
  ::CommonProto::Rect* mutable_rect();
  void set_allocated_rect(::CommonProto::Rect* rect);
  private:
  const ::CommonProto::Rect& _internal_rect() const;
  ::CommonProto::Rect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::CommonProto::Rect* rect);
  ::CommonProto::Rect* unsafe_arena_release_rect();

  // optional .CommonProto.Box3D box = 11;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::CommonProto::Box3D& box() const;
  ::CommonProto::Box3D* release_box();
  ::CommonProto::Box3D* mutable_box();
  void set_allocated_box(::CommonProto::Box3D* box);
  private:
  const ::CommonProto::Box3D& _internal_box() const;
  ::CommonProto::Box3D* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::CommonProto::Box3D* box);
  ::CommonProto::Box3D* unsafe_arena_release_box();

  // optional .CommonProto.Polygon poly = 12;
  bool has_poly() const;
  private:
  bool _internal_has_poly() const;
  public:
  void clear_poly();
  const ::CommonProto::Polygon& poly() const;
  ::CommonProto::Polygon* release_poly();
  ::CommonProto::Polygon* mutable_poly();
  void set_allocated_poly(::CommonProto::Polygon* poly);
  private:
  const ::CommonProto::Polygon& _internal_poly() const;
  ::CommonProto::Polygon* _internal_mutable_poly();
  public:
  void unsafe_arena_set_allocated_poly(
      ::CommonProto::Polygon* poly);
  ::CommonProto::Polygon* unsafe_arena_release_poly();

  // optional float sigma_width = 20;
  bool has_sigma_width() const;
  private:
  bool _internal_has_sigma_width() const;
  public:
  void clear_sigma_width();
  float sigma_width() const;
  void set_sigma_width(float value);
  private:
  float _internal_sigma_width() const;
  void _internal_set_sigma_width(float value);
  public:

  // optional float sigma_height = 21;
  bool has_sigma_height() const;
  private:
  bool _internal_has_sigma_height() const;
  public:
  void clear_sigma_height();
  float sigma_height() const;
  void set_sigma_height(float value);
  private:
  float _internal_sigma_height() const;
  void _internal_set_sigma_height(float value);
  public:

  // optional float sigma_x = 22;
  bool has_sigma_x() const;
  private:
  bool _internal_has_sigma_x() const;
  public:
  void clear_sigma_x();
  float sigma_x() const;
  void set_sigma_x(float value);
  private:
  float _internal_sigma_x() const;
  void _internal_set_sigma_x(float value);
  public:

  // optional float sigma_y = 23;
  bool has_sigma_y() const;
  private:
  bool _internal_has_sigma_y() const;
  public:
  void clear_sigma_y();
  float sigma_y() const;
  void set_sigma_y(float value);
  private:
  float _internal_sigma_y() const;
  void _internal_set_sigma_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.ImageSpaceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CommonProto::Rect* rect_;
  ::CommonProto::Box3D* box_;
  ::CommonProto::Polygon* poly_;
  float sigma_width_;
  float sigma_height_;
  float sigma_x_;
  float sigma_y_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TrackingFeatureMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.TrackingFeatureMap) */ {
 public:
  inline TrackingFeatureMap() : TrackingFeatureMap(nullptr) {}
  virtual ~TrackingFeatureMap();

  TrackingFeatureMap(const TrackingFeatureMap& from);
  TrackingFeatureMap(TrackingFeatureMap&& from) noexcept
    : TrackingFeatureMap() {
    *this = ::std::move(from);
  }

  inline TrackingFeatureMap& operator=(const TrackingFeatureMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingFeatureMap& operator=(TrackingFeatureMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingFeatureMap& default_instance();

  static inline const TrackingFeatureMap* internal_default_instance() {
    return reinterpret_cast<const TrackingFeatureMap*>(
               &_TrackingFeatureMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TrackingFeatureMap& a, TrackingFeatureMap& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingFeatureMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingFeatureMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingFeatureMap* New() const final {
    return CreateMaybeMessage<TrackingFeatureMap>(nullptr);
  }

  TrackingFeatureMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingFeatureMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingFeatureMap& from);
  void MergeFrom(const TrackingFeatureMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingFeatureMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.TrackingFeatureMap";
  }
  protected:
  explicit TrackingFeatureMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // required bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.TrackingFeatureMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Obstacle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Obstacle) */ {
 public:
  inline Obstacle() : Obstacle(nullptr) {}
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle& default_instance();

  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Obstacle";
  }
  protected:
  explicit Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 13,
    kPropertyNameFieldNumber = 14,
    kPropertyTypeFieldNumber = 15,
    kPropertyConfFieldNumber = 16,
    kTrackingFmapFieldNumber = 17,
    kImgInfoFieldNumber = 6,
    kWorldInfoFieldNumber = 7,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfFieldNumber = 3,
    kLifeTimeFieldNumber = 4,
    kAgeFieldNumber = 5,
  };
  // repeated int32 property = 13;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_property() const;
  void _internal_add_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_property();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 property(int index) const;
  void set_property(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      property() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_property();

  // repeated string property_name = 14;
  int property_name_size() const;
  private:
  int _internal_property_name_size() const;
  public:
  void clear_property_name();
  const std::string& property_name(int index) const;
  std::string* mutable_property_name(int index);
  void set_property_name(int index, const std::string& value);
  void set_property_name(int index, std::string&& value);
  void set_property_name(int index, const char* value);
  void set_property_name(int index, const char* value, size_t size);
  std::string* add_property_name();
  void add_property_name(const std::string& value);
  void add_property_name(std::string&& value);
  void add_property_name(const char* value);
  void add_property_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& property_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_property_name();
  private:
  const std::string& _internal_property_name(int index) const;
  std::string* _internal_add_property_name();
  public:

  // repeated int32 property_type = 15;
  int property_type_size() const;
  private:
  int _internal_property_type_size() const;
  public:
  void clear_property_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_property_type() const;
  void _internal_add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_property_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 property_type(int index) const;
  void set_property_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      property_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_property_type();

  // repeated float property_conf = 16;
  int property_conf_size() const;
  private:
  int _internal_property_conf_size() const;
  public:
  void clear_property_conf();
  private:
  float _internal_property_conf(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_property_conf() const;
  void _internal_add_property_conf(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_property_conf();
  public:
  float property_conf(int index) const;
  void set_property_conf(int index, float value);
  void add_property_conf(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      property_conf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_property_conf();

  // repeated .CommonProto.TrackingFeatureMap tracking_fmap = 17;
  int tracking_fmap_size() const;
  private:
  int _internal_tracking_fmap_size() const;
  public:
  void clear_tracking_fmap();
  ::CommonProto::TrackingFeatureMap* mutable_tracking_fmap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::TrackingFeatureMap >*
      mutable_tracking_fmap();
  private:
  const ::CommonProto::TrackingFeatureMap& _internal_tracking_fmap(int index) const;
  ::CommonProto::TrackingFeatureMap* _internal_add_tracking_fmap();
  public:
  const ::CommonProto::TrackingFeatureMap& tracking_fmap(int index) const;
  ::CommonProto::TrackingFeatureMap* add_tracking_fmap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::TrackingFeatureMap >&
      tracking_fmap() const;

  // optional .CommonProto.ImageSpaceInfo img_info = 6;
  bool has_img_info() const;
  private:
  bool _internal_has_img_info() const;
  public:
  void clear_img_info();
  const ::CommonProto::ImageSpaceInfo& img_info() const;
  ::CommonProto::ImageSpaceInfo* release_img_info();
  ::CommonProto::ImageSpaceInfo* mutable_img_info();
  void set_allocated_img_info(::CommonProto::ImageSpaceInfo* img_info);
  private:
  const ::CommonProto::ImageSpaceInfo& _internal_img_info() const;
  ::CommonProto::ImageSpaceInfo* _internal_mutable_img_info();
  public:
  void unsafe_arena_set_allocated_img_info(
      ::CommonProto::ImageSpaceInfo* img_info);
  ::CommonProto::ImageSpaceInfo* unsafe_arena_release_img_info();

  // optional .CommonProto.WorldSpaceInfo world_info = 7;
  bool has_world_info() const;
  private:
  bool _internal_has_world_info() const;
  public:
  void clear_world_info();
  const ::CommonProto::WorldSpaceInfo& world_info() const;
  ::CommonProto::WorldSpaceInfo* release_world_info();
  ::CommonProto::WorldSpaceInfo* mutable_world_info();
  void set_allocated_world_info(::CommonProto::WorldSpaceInfo* world_info);
  private:
  const ::CommonProto::WorldSpaceInfo& _internal_world_info() const;
  ::CommonProto::WorldSpaceInfo* _internal_mutable_world_info();
  public:
  void unsafe_arena_set_allocated_world_info(
      ::CommonProto::WorldSpaceInfo* world_info);
  ::CommonProto::WorldSpaceInfo* unsafe_arena_release_world_info();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 conf = 3;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  ::PROTOBUF_NAMESPACE_ID::int32 conf() const;
  void set_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conf() const;
  void _internal_set_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 life_time = 4;
  bool has_life_time() const;
  private:
  bool _internal_has_life_time() const;
  public:
  void clear_life_time();
  ::PROTOBUF_NAMESPACE_ID::int32 life_time() const;
  void set_life_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_life_time() const;
  void _internal_set_life_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 age = 5;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Obstacle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > property_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> property_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > property_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > property_conf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::TrackingFeatureMap > tracking_fmap_;
  ::CommonProto::ImageSpaceInfo* img_info_;
  ::CommonProto::WorldSpaceInfo* world_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 conf_;
  ::PROTOBUF_NAMESPACE_ID::int32 life_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Obstacles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Obstacles) */ {
 public:
  inline Obstacles() : Obstacles(nullptr) {}
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);
  Obstacles(Obstacles&& from) noexcept
    : Obstacles() {
    *this = ::std::move(from);
  }

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacles& operator=(Obstacles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacles& default_instance();

  static inline const Obstacles* internal_default_instance() {
    return reinterpret_cast<const Obstacles*>(
               &_Obstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Obstacles& a, Obstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obstacles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacles* New() const final {
    return CreateMaybeMessage<Obstacles>(nullptr);
  }

  Obstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Obstacles";
  }
  protected:
  explicit Obstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 2,
    kCamIdFieldNumber = 1,
    kConfScaleFieldNumber = 3,
  };
  // repeated .CommonProto.Obstacle obstacle = 2;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::CommonProto::Obstacle* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacle >*
      mutable_obstacle();
  private:
  const ::CommonProto::Obstacle& _internal_obstacle(int index) const;
  ::CommonProto::Obstacle* _internal_add_obstacle();
  public:
  const ::CommonProto::Obstacle& obstacle(int index) const;
  ::CommonProto::Obstacle* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacle >&
      obstacle() const;

  // optional int32 cam_id = 1;
  bool has_cam_id() const;
  private:
  bool _internal_has_cam_id() const;
  public:
  void clear_cam_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id() const;
  void set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cam_id() const;
  void _internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float conf_scale = 3 [default = 0.1];
  bool has_conf_scale() const;
  private:
  bool _internal_has_conf_scale() const;
  public:
  void clear_conf_scale();
  float conf_scale() const;
  void set_conf_scale(float value);
  private:
  float _internal_conf_scale() const;
  void _internal_set_conf_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Obstacles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacle > obstacle_;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id_;
  float conf_scale_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FeatureMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.FeatureMap) */ {
 public:
  inline FeatureMap() : FeatureMap(nullptr) {}
  virtual ~FeatureMap();

  FeatureMap(const FeatureMap& from);
  FeatureMap(FeatureMap&& from) noexcept
    : FeatureMap() {
    *this = ::std::move(from);
  }

  inline FeatureMap& operator=(const FeatureMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureMap& operator=(FeatureMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureMap& default_instance();

  static inline const FeatureMap* internal_default_instance() {
    return reinterpret_cast<const FeatureMap*>(
               &_FeatureMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FeatureMap& a, FeatureMap& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureMap* New() const final {
    return CreateMaybeMessage<FeatureMap>(nullptr);
  }

  FeatureMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureMap& from);
  void MergeFrom(const FeatureMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.FeatureMap";
  }
  protected:
  explicit FeatureMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // required bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.FeatureMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ObstacleRaw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ObstacleRaw) */ {
 public:
  inline ObstacleRaw() : ObstacleRaw(nullptr) {}
  virtual ~ObstacleRaw();

  ObstacleRaw(const ObstacleRaw& from);
  ObstacleRaw(ObstacleRaw&& from) noexcept
    : ObstacleRaw() {
    *this = ::std::move(from);
  }

  inline ObstacleRaw& operator=(const ObstacleRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleRaw& operator=(ObstacleRaw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleRaw& default_instance();

  static inline const ObstacleRaw* internal_default_instance() {
    return reinterpret_cast<const ObstacleRaw*>(
               &_ObstacleRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ObstacleRaw& a, ObstacleRaw& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleRaw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleRaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleRaw* New() const final {
    return CreateMaybeMessage<ObstacleRaw>(nullptr);
  }

  ObstacleRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleRaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleRaw& from);
  void MergeFrom(const ObstacleRaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleRaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ObstacleRaw";
  }
  protected:
  explicit ObstacleRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 6,
    kPropertyNameFieldNumber = 7,
    kPropertyTypeFieldNumber = 8,
    kPropertyConfFieldNumber = 9,
    kRectFieldNumber = 1,
    kConfFieldNumber = 2,
    kModelFieldNumber = 3,
  };
  // repeated int32 property = 6;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_property() const;
  void _internal_add_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_property();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 property(int index) const;
  void set_property(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      property() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_property();

  // repeated string property_name = 7;
  int property_name_size() const;
  private:
  int _internal_property_name_size() const;
  public:
  void clear_property_name();
  const std::string& property_name(int index) const;
  std::string* mutable_property_name(int index);
  void set_property_name(int index, const std::string& value);
  void set_property_name(int index, std::string&& value);
  void set_property_name(int index, const char* value);
  void set_property_name(int index, const char* value, size_t size);
  std::string* add_property_name();
  void add_property_name(const std::string& value);
  void add_property_name(std::string&& value);
  void add_property_name(const char* value);
  void add_property_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& property_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_property_name();
  private:
  const std::string& _internal_property_name(int index) const;
  std::string* _internal_add_property_name();
  public:

  // repeated int32 property_type = 8;
  int property_type_size() const;
  private:
  int _internal_property_type_size() const;
  public:
  void clear_property_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_property_type() const;
  void _internal_add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_property_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 property_type(int index) const;
  void set_property_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      property_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_property_type();

  // repeated float property_conf = 9;
  int property_conf_size() const;
  private:
  int _internal_property_conf_size() const;
  public:
  void clear_property_conf();
  private:
  float _internal_property_conf(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_property_conf() const;
  void _internal_add_property_conf(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_property_conf();
  public:
  float property_conf(int index) const;
  void set_property_conf(int index, float value);
  void add_property_conf(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      property_conf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_property_conf();

  // required .CommonProto.Rect rect = 1;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::CommonProto::Rect& rect() const;
  ::CommonProto::Rect* release_rect();
  ::CommonProto::Rect* mutable_rect();
  void set_allocated_rect(::CommonProto::Rect* rect);
  private:
  const ::CommonProto::Rect& _internal_rect() const;
  ::CommonProto::Rect* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::CommonProto::Rect* rect);
  ::CommonProto::Rect* unsafe_arena_release_rect();

  // required float conf = 2;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  float conf() const;
  void set_conf(float value);
  private:
  float _internal_conf() const;
  void _internal_set_conf(float value);
  public:

  // required int32 model = 3;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  ::PROTOBUF_NAMESPACE_ID::int32 model() const;
  void set_model(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model() const;
  void _internal_set_model(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.ObstacleRaw)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > property_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> property_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > property_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > property_conf_;
  ::CommonProto::Rect* rect_;
  float conf_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ObstacleRaws PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ObstacleRaws) */ {
 public:
  inline ObstacleRaws() : ObstacleRaws(nullptr) {}
  virtual ~ObstacleRaws();

  ObstacleRaws(const ObstacleRaws& from);
  ObstacleRaws(ObstacleRaws&& from) noexcept
    : ObstacleRaws() {
    *this = ::std::move(from);
  }

  inline ObstacleRaws& operator=(const ObstacleRaws& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleRaws& operator=(ObstacleRaws&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleRaws& default_instance();

  static inline const ObstacleRaws* internal_default_instance() {
    return reinterpret_cast<const ObstacleRaws*>(
               &_ObstacleRaws_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ObstacleRaws& a, ObstacleRaws& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleRaws* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleRaws* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleRaws* New() const final {
    return CreateMaybeMessage<ObstacleRaws>(nullptr);
  }

  ObstacleRaws* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleRaws>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleRaws& from);
  void MergeFrom(const ObstacleRaws& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleRaws* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ObstacleRaws";
  }
  protected:
  explicit ObstacleRaws(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 2,
    kCamIdFieldNumber = 1,
    kConfScaleFieldNumber = 3,
  };
  // repeated .CommonProto.ObstacleRaw obstacle = 2;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::CommonProto::ObstacleRaw* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_obstacle();
  private:
  const ::CommonProto::ObstacleRaw& _internal_obstacle(int index) const;
  ::CommonProto::ObstacleRaw* _internal_add_obstacle();
  public:
  const ::CommonProto::ObstacleRaw& obstacle(int index) const;
  ::CommonProto::ObstacleRaw* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      obstacle() const;

  // optional int32 cam_id = 1;
  bool has_cam_id() const;
  private:
  bool _internal_has_cam_id() const;
  public:
  void clear_cam_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id() const;
  void set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cam_id() const;
  void _internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float conf_scale = 3 [default = 0.1];
  bool has_conf_scale() const;
  private:
  bool _internal_has_conf_scale() const;
  public:
  void clear_conf_scale();
  float conf_scale() const;
  void set_conf_scale(float value);
  private:
  float _internal_conf_scale() const;
  void _internal_set_conf_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.ObstacleRaws)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw > obstacle_;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id_;
  float conf_scale_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FreeSpacePoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.FreeSpacePoints) */ {
 public:
  inline FreeSpacePoints() : FreeSpacePoints(nullptr) {}
  virtual ~FreeSpacePoints();

  FreeSpacePoints(const FreeSpacePoints& from);
  FreeSpacePoints(FreeSpacePoints&& from) noexcept
    : FreeSpacePoints() {
    *this = ::std::move(from);
  }

  inline FreeSpacePoints& operator=(const FreeSpacePoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreeSpacePoints& operator=(FreeSpacePoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreeSpacePoints& default_instance();

  static inline const FreeSpacePoints* internal_default_instance() {
    return reinterpret_cast<const FreeSpacePoints*>(
               &_FreeSpacePoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FreeSpacePoints& a, FreeSpacePoints& b) {
    a.Swap(&b);
  }
  inline void Swap(FreeSpacePoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreeSpacePoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreeSpacePoints* New() const final {
    return CreateMaybeMessage<FreeSpacePoints>(nullptr);
  }

  FreeSpacePoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreeSpacePoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreeSpacePoints& from);
  void MergeFrom(const FreeSpacePoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreeSpacePoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.FreeSpacePoints";
  }
  protected:
  explicit FreeSpacePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kPtsVcsFieldNumber = 5,
    kPtsImgFieldNumber = 6,
    kCamIdFieldNumber = 4,
  };
  // repeated int32 property = 3;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_property() const;
  void _internal_add_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_property();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 property(int index) const;
  void set_property(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      property() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_property();

  // repeated .CommonProto.Point pts_vcs = 5;
  int pts_vcs_size() const;
  private:
  int _internal_pts_vcs_size() const;
  public:
  void clear_pts_vcs();
  ::CommonProto::Point* mutable_pts_vcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
      mutable_pts_vcs();
  private:
  const ::CommonProto::Point& _internal_pts_vcs(int index) const;
  ::CommonProto::Point* _internal_add_pts_vcs();
  public:
  const ::CommonProto::Point& pts_vcs(int index) const;
  ::CommonProto::Point* add_pts_vcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
      pts_vcs() const;

  // repeated .CommonProto.Point pts_img = 6;
  int pts_img_size() const;
  private:
  int _internal_pts_img_size() const;
  public:
  void clear_pts_img();
  ::CommonProto::Point* mutable_pts_img(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
      mutable_pts_img();
  private:
  const ::CommonProto::Point& _internal_pts_img(int index) const;
  ::CommonProto::Point* _internal_add_pts_img();
  public:
  const ::CommonProto::Point& pts_img(int index) const;
  ::CommonProto::Point* add_pts_img();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
      pts_img() const;

  // optional int32 cam_id = 4;
  bool has_cam_id() const;
  private:
  bool _internal_has_cam_id() const;
  public:
  void clear_cam_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id() const;
  void set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cam_id() const;
  void _internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.FreeSpacePoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > property_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point > pts_vcs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point > pts_img_;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CameraMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.CameraMatrix) */ {
 public:
  inline CameraMatrix() : CameraMatrix(nullptr) {}
  virtual ~CameraMatrix();

  CameraMatrix(const CameraMatrix& from);
  CameraMatrix(CameraMatrix&& from) noexcept
    : CameraMatrix() {
    *this = ::std::move(from);
  }

  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraMatrix& operator=(CameraMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraMatrix& default_instance();

  static inline const CameraMatrix* internal_default_instance() {
    return reinterpret_cast<const CameraMatrix*>(
               &_CameraMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CameraMatrix& a, CameraMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraMatrix* New() const final {
    return CreateMaybeMessage<CameraMatrix>(nullptr);
  }

  CameraMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraMatrix& from);
  void MergeFrom(const CameraMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.CameraMatrix";
  }
  protected:
  explicit CameraMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatGnd2ImgFieldNumber = 1,
    kMatImg2GndFieldNumber = 2,
    kMatVcsgnd2ImgFieldNumber = 3,
    kMatImg2VcsgndFieldNumber = 4,
    kMatLocal2ImgFieldNumber = 5,
    kMatImg2LocalFieldNumber = 6,
  };
  // repeated float mat_gnd2img = 1;
  int mat_gnd2img_size() const;
  private:
  int _internal_mat_gnd2img_size() const;
  public:
  void clear_mat_gnd2img();
  private:
  float _internal_mat_gnd2img(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mat_gnd2img() const;
  void _internal_add_mat_gnd2img(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mat_gnd2img();
  public:
  float mat_gnd2img(int index) const;
  void set_mat_gnd2img(int index, float value);
  void add_mat_gnd2img(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_gnd2img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_gnd2img();

  // repeated float mat_img2gnd = 2;
  int mat_img2gnd_size() const;
  private:
  int _internal_mat_img2gnd_size() const;
  public:
  void clear_mat_img2gnd();
  private:
  float _internal_mat_img2gnd(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mat_img2gnd() const;
  void _internal_add_mat_img2gnd(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mat_img2gnd();
  public:
  float mat_img2gnd(int index) const;
  void set_mat_img2gnd(int index, float value);
  void add_mat_img2gnd(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_img2gnd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_img2gnd();

  // repeated float mat_vcsgnd2img = 3;
  int mat_vcsgnd2img_size() const;
  private:
  int _internal_mat_vcsgnd2img_size() const;
  public:
  void clear_mat_vcsgnd2img();
  private:
  float _internal_mat_vcsgnd2img(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mat_vcsgnd2img() const;
  void _internal_add_mat_vcsgnd2img(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mat_vcsgnd2img();
  public:
  float mat_vcsgnd2img(int index) const;
  void set_mat_vcsgnd2img(int index, float value);
  void add_mat_vcsgnd2img(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_vcsgnd2img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_vcsgnd2img();

  // repeated float mat_img2vcsgnd = 4;
  int mat_img2vcsgnd_size() const;
  private:
  int _internal_mat_img2vcsgnd_size() const;
  public:
  void clear_mat_img2vcsgnd();
  private:
  float _internal_mat_img2vcsgnd(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mat_img2vcsgnd() const;
  void _internal_add_mat_img2vcsgnd(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mat_img2vcsgnd();
  public:
  float mat_img2vcsgnd(int index) const;
  void set_mat_img2vcsgnd(int index, float value);
  void add_mat_img2vcsgnd(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_img2vcsgnd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_img2vcsgnd();

  // repeated float mat_local2img = 5;
  int mat_local2img_size() const;
  private:
  int _internal_mat_local2img_size() const;
  public:
  void clear_mat_local2img();
  private:
  float _internal_mat_local2img(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mat_local2img() const;
  void _internal_add_mat_local2img(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mat_local2img();
  public:
  float mat_local2img(int index) const;
  void set_mat_local2img(int index, float value);
  void add_mat_local2img(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_local2img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_local2img();

  // repeated float mat_img2local = 6;
  int mat_img2local_size() const;
  private:
  int _internal_mat_img2local_size() const;
  public:
  void clear_mat_img2local();
  private:
  float _internal_mat_img2local(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mat_img2local() const;
  void _internal_add_mat_img2local(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mat_img2local();
  public:
  float mat_img2local(int index) const;
  void set_mat_img2local(int index, float value);
  void add_mat_img2local(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_img2local() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_img2local();

  // @@protoc_insertion_point(class_scope:CommonProto.CameraMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_gnd2img_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_img2gnd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_vcsgnd2img_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_img2vcsgnd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_local2img_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_img2local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DistortParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.DistortParam) */ {
 public:
  inline DistortParam() : DistortParam(nullptr) {}
  virtual ~DistortParam();

  DistortParam(const DistortParam& from);
  DistortParam(DistortParam&& from) noexcept
    : DistortParam() {
    *this = ::std::move(from);
  }

  inline DistortParam& operator=(const DistortParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistortParam& operator=(DistortParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistortParam& default_instance();

  static inline const DistortParam* internal_default_instance() {
    return reinterpret_cast<const DistortParam*>(
               &_DistortParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DistortParam& a, DistortParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DistortParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistortParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistortParam* New() const final {
    return CreateMaybeMessage<DistortParam>(nullptr);
  }

  DistortParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistortParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistortParam& from);
  void MergeFrom(const DistortParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistortParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.DistortParam";
  }
  protected:
  explicit DistortParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 1,
  };
  // repeated float param = 1;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  private:
  float _internal_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_param() const;
  void _internal_add_param(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_param();
  public:
  float param(int index) const;
  void set_param(int index, float value);
  void add_param(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:CommonProto.DistortParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class VCSParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.VCSParam) */ {
 public:
  inline VCSParam() : VCSParam(nullptr) {}
  virtual ~VCSParam();

  VCSParam(const VCSParam& from);
  VCSParam(VCSParam&& from) noexcept
    : VCSParam() {
    *this = ::std::move(from);
  }

  inline VCSParam& operator=(const VCSParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VCSParam& operator=(VCSParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VCSParam& default_instance();

  static inline const VCSParam* internal_default_instance() {
    return reinterpret_cast<const VCSParam*>(
               &_VCSParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(VCSParam& a, VCSParam& b) {
    a.Swap(&b);
  }
  inline void Swap(VCSParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VCSParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VCSParam* New() const final {
    return CreateMaybeMessage<VCSParam>(nullptr);
  }

  VCSParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VCSParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VCSParam& from);
  void MergeFrom(const VCSParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VCSParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.VCSParam";
  }
  protected:
  explicit VCSParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 1,
    kTranslationFieldNumber = 2,
  };
  // repeated float rotation = 1;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  private:
  float _internal_rotation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rotation() const;
  void _internal_add_rotation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rotation();
  public:
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotation();

  // repeated float translation = 2;
  int translation_size() const;
  private:
  int _internal_translation_size() const;
  public:
  void clear_translation();
  private:
  float _internal_translation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_translation() const;
  void _internal_add_translation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_translation();
  public:
  float translation(int index) const;
  void set_translation(int index, float value);
  void add_translation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      translation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_translation();

  // @@protoc_insertion_point(class_scope:CommonProto.VCSParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > translation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CameraParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.CameraParam) */ {
 public:
  inline CameraParam() : CameraParam(nullptr) {}
  virtual ~CameraParam();

  CameraParam(const CameraParam& from);
  CameraParam(CameraParam&& from) noexcept
    : CameraParam() {
    *this = ::std::move(from);
  }

  inline CameraParam& operator=(const CameraParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraParam& operator=(CameraParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraParam& default_instance();

  static inline const CameraParam* internal_default_instance() {
    return reinterpret_cast<const CameraParam*>(
               &_CameraParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CameraParam& a, CameraParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraParam* New() const final {
    return CreateMaybeMessage<CameraParam>(nullptr);
  }

  CameraParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraParam& from);
  void MergeFrom(const CameraParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.CameraParam";
  }
  protected:
  explicit CameraParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorFieldNumber = 50,
    kDistortFieldNumber = 20,
    kVcsFieldNumber = 21,
    kMatFieldNumber = 30,
    kFocalUFieldNumber = 1,
    kFocalVFieldNumber = 2,
    kCenterUFieldNumber = 3,
    kCenterVFieldNumber = 4,
    kCameraXFieldNumber = 5,
    kCameraYFieldNumber = 6,
    kCameraZFieldNumber = 7,
    kPitchFieldNumber = 8,
    kYawFieldNumber = 9,
    kRollFieldNumber = 10,
    kTypeFieldNumber = 11,
    kFovFieldNumber = 12,
    kVersionFieldNumber = 13,
    kCaliStatusFieldNumber = 14,
  };
  // optional string vendor = 50;
  bool has_vendor() const;
  private:
  bool _internal_has_vendor() const;
  public:
  void clear_vendor();
  const std::string& vendor() const;
  void set_vendor(const std::string& value);
  void set_vendor(std::string&& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  std::string* mutable_vendor();
  std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // optional .CommonProto.DistortParam distort = 20;
  bool has_distort() const;
  private:
  bool _internal_has_distort() const;
  public:
  void clear_distort();
  const ::CommonProto::DistortParam& distort() const;
  ::CommonProto::DistortParam* release_distort();
  ::CommonProto::DistortParam* mutable_distort();
  void set_allocated_distort(::CommonProto::DistortParam* distort);
  private:
  const ::CommonProto::DistortParam& _internal_distort() const;
  ::CommonProto::DistortParam* _internal_mutable_distort();
  public:
  void unsafe_arena_set_allocated_distort(
      ::CommonProto::DistortParam* distort);
  ::CommonProto::DistortParam* unsafe_arena_release_distort();

  // optional .CommonProto.VCSParam vcs = 21;
  bool has_vcs() const;
  private:
  bool _internal_has_vcs() const;
  public:
  void clear_vcs();
  const ::CommonProto::VCSParam& vcs() const;
  ::CommonProto::VCSParam* release_vcs();
  ::CommonProto::VCSParam* mutable_vcs();
  void set_allocated_vcs(::CommonProto::VCSParam* vcs);
  private:
  const ::CommonProto::VCSParam& _internal_vcs() const;
  ::CommonProto::VCSParam* _internal_mutable_vcs();
  public:
  void unsafe_arena_set_allocated_vcs(
      ::CommonProto::VCSParam* vcs);
  ::CommonProto::VCSParam* unsafe_arena_release_vcs();

  // optional .CommonProto.CameraMatrix mat = 30;
  bool has_mat() const;
  private:
  bool _internal_has_mat() const;
  public:
  void clear_mat();
  const ::CommonProto::CameraMatrix& mat() const;
  ::CommonProto::CameraMatrix* release_mat();
  ::CommonProto::CameraMatrix* mutable_mat();
  void set_allocated_mat(::CommonProto::CameraMatrix* mat);
  private:
  const ::CommonProto::CameraMatrix& _internal_mat() const;
  ::CommonProto::CameraMatrix* _internal_mutable_mat();
  public:
  void unsafe_arena_set_allocated_mat(
      ::CommonProto::CameraMatrix* mat);
  ::CommonProto::CameraMatrix* unsafe_arena_release_mat();

  // required float focal_u = 1;
  bool has_focal_u() const;
  private:
  bool _internal_has_focal_u() const;
  public:
  void clear_focal_u();
  float focal_u() const;
  void set_focal_u(float value);
  private:
  float _internal_focal_u() const;
  void _internal_set_focal_u(float value);
  public:

  // required float focal_v = 2;
  bool has_focal_v() const;
  private:
  bool _internal_has_focal_v() const;
  public:
  void clear_focal_v();
  float focal_v() const;
  void set_focal_v(float value);
  private:
  float _internal_focal_v() const;
  void _internal_set_focal_v(float value);
  public:

  // required float center_u = 3;
  bool has_center_u() const;
  private:
  bool _internal_has_center_u() const;
  public:
  void clear_center_u();
  float center_u() const;
  void set_center_u(float value);
  private:
  float _internal_center_u() const;
  void _internal_set_center_u(float value);
  public:

  // required float center_v = 4;
  bool has_center_v() const;
  private:
  bool _internal_has_center_v() const;
  public:
  void clear_center_v();
  float center_v() const;
  void set_center_v(float value);
  private:
  float _internal_center_v() const;
  void _internal_set_center_v(float value);
  public:

  // required float camera_x = 5;
  bool has_camera_x() const;
  private:
  bool _internal_has_camera_x() const;
  public:
  void clear_camera_x();
  float camera_x() const;
  void set_camera_x(float value);
  private:
  float _internal_camera_x() const;
  void _internal_set_camera_x(float value);
  public:

  // required float camera_y = 6;
  bool has_camera_y() const;
  private:
  bool _internal_has_camera_y() const;
  public:
  void clear_camera_y();
  float camera_y() const;
  void set_camera_y(float value);
  private:
  float _internal_camera_y() const;
  void _internal_set_camera_y(float value);
  public:

  // required float camera_z = 7;
  bool has_camera_z() const;
  private:
  bool _internal_has_camera_z() const;
  public:
  void clear_camera_z();
  float camera_z() const;
  void set_camera_z(float value);
  private:
  float _internal_camera_z() const;
  void _internal_set_camera_z(float value);
  public:

  // required float pitch = 8;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // required float yaw = 9;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // required float roll = 10;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // optional int32 type = 11 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float fov = 12;
  bool has_fov() const;
  private:
  bool _internal_has_fov() const;
  public:
  void clear_fov();
  float fov() const;
  void set_fov(float value);
  private:
  float _internal_fov() const;
  void _internal_set_fov(float value);
  public:

  // optional int32 version = 13 [default = 0];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .CommonProto.CalibrationStatus cali_status = 14;
  bool has_cali_status() const;
  private:
  bool _internal_has_cali_status() const;
  public:
  void clear_cali_status();
  ::CommonProto::CalibrationStatus cali_status() const;
  void set_cali_status(::CommonProto::CalibrationStatus value);
  private:
  ::CommonProto::CalibrationStatus _internal_cali_status() const;
  void _internal_set_cali_status(::CommonProto::CalibrationStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.CameraParam)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::CommonProto::DistortParam* distort_;
  ::CommonProto::VCSParam* vcs_;
  ::CommonProto::CameraMatrix* mat_;
  float focal_u_;
  float focal_v_;
  float center_u_;
  float center_v_;
  float camera_x_;
  float camera_y_;
  float camera_z_;
  float pitch_;
  float yaw_;
  float roll_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float fov_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  int cali_status_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MotionFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.MotionFrame) */ {
 public:
  inline MotionFrame() : MotionFrame(nullptr) {}
  virtual ~MotionFrame();

  MotionFrame(const MotionFrame& from);
  MotionFrame(MotionFrame&& from) noexcept
    : MotionFrame() {
    *this = ::std::move(from);
  }

  inline MotionFrame& operator=(const MotionFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionFrame& operator=(MotionFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionFrame& default_instance();

  static inline const MotionFrame* internal_default_instance() {
    return reinterpret_cast<const MotionFrame*>(
               &_MotionFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MotionFrame& a, MotionFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionFrame* New() const final {
    return CreateMaybeMessage<MotionFrame>(nullptr);
  }

  MotionFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionFrame& from);
  void MergeFrom(const MotionFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.MotionFrame";
  }
  protected:
  explicit MotionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
    kAccFieldNumber = 2,
    kTimeStampFieldNumber = 4,
    kYawRateFieldNumber = 3,
    kTurningRadiusFieldNumber = 5,
    kIsStableFieldNumber = 6,
  };
  // required float speed = 1;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // optional float acc = 2;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  float acc() const;
  void set_acc(float value);
  private:
  float _internal_acc() const;
  void _internal_set_acc(float value);
  public:

  // required int64 time_stamp = 4;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required float yaw_rate = 3;
  bool has_yaw_rate() const;
  private:
  bool _internal_has_yaw_rate() const;
  public:
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);
  private:
  float _internal_yaw_rate() const;
  void _internal_set_yaw_rate(float value);
  public:

  // optional float turning_radius = 5;
  bool has_turning_radius() const;
  private:
  bool _internal_has_turning_radius() const;
  public:
  void clear_turning_radius();
  float turning_radius() const;
  void set_turning_radius(float value);
  private:
  float _internal_turning_radius() const;
  void _internal_set_turning_radius(float value);
  public:

  // optional bool is_stable = 6;
  bool has_is_stable() const;
  private:
  bool _internal_has_is_stable() const;
  public:
  void clear_is_stable();
  bool is_stable() const;
  void set_is_stable(bool value);
  private:
  bool _internal_is_stable() const;
  void _internal_set_is_stable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.MotionFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float speed_;
  float acc_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  float yaw_rate_;
  float turning_radius_;
  bool is_stable_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class OdometryFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.OdometryFrame) */ {
 public:
  inline OdometryFrame() : OdometryFrame(nullptr) {}
  virtual ~OdometryFrame();

  OdometryFrame(const OdometryFrame& from);
  OdometryFrame(OdometryFrame&& from) noexcept
    : OdometryFrame() {
    *this = ::std::move(from);
  }

  inline OdometryFrame& operator=(const OdometryFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdometryFrame& operator=(OdometryFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdometryFrame& default_instance();

  static inline const OdometryFrame* internal_default_instance() {
    return reinterpret_cast<const OdometryFrame*>(
               &_OdometryFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(OdometryFrame& a, OdometryFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(OdometryFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdometryFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdometryFrame* New() const final {
    return CreateMaybeMessage<OdometryFrame>(nullptr);
  }

  OdometryFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdometryFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdometryFrame& from);
  void MergeFrom(const OdometryFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdometryFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.OdometryFrame";
  }
  protected:
  explicit OdometryFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kYawFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kTimeStampFieldNumber = 6,
    kYawRateFieldNumber = 5,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float yaw = 3;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // required float speed = 4;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // required int64 time_stamp = 6;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required float yaw_rate = 5;
  bool has_yaw_rate() const;
  private:
  bool _internal_has_yaw_rate() const;
  public:
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);
  private:
  float _internal_yaw_rate() const;
  void _internal_set_yaw_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.OdometryFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float yaw_;
  float speed_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  float yaw_rate_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SerializedData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.SerializedData) */ {
 public:
  inline SerializedData() : SerializedData(nullptr) {}
  virtual ~SerializedData();

  SerializedData(const SerializedData& from);
  SerializedData(SerializedData&& from) noexcept
    : SerializedData() {
    *this = ::std::move(from);
  }

  inline SerializedData& operator=(const SerializedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedData& operator=(SerializedData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializedData& default_instance();

  static inline const SerializedData* internal_default_instance() {
    return reinterpret_cast<const SerializedData*>(
               &_SerializedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SerializedData& a, SerializedData& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedData* New() const final {
    return CreateMaybeMessage<SerializedData>(nullptr);
  }

  SerializedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializedData& from);
  void MergeFrom(const SerializedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.SerializedData";
  }
  protected:
  explicit SerializedData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kProtoFieldNumber = 2,
    kChannelFieldNumber = 4,
    kWithDataFieldFieldNumber = 5,
  };
  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required bytes proto = 2;
  bool has_proto() const;
  private:
  bool _internal_has_proto() const;
  public:
  void clear_proto();
  const std::string& proto() const;
  void set_proto(const std::string& value);
  void set_proto(std::string&& value);
  void set_proto(const char* value);
  void set_proto(const void* value, size_t size);
  std::string* mutable_proto();
  std::string* release_proto();
  void set_allocated_proto(std::string* proto);
  private:
  const std::string& _internal_proto() const;
  void _internal_set_proto(const std::string& value);
  std::string* _internal_mutable_proto();
  public:

  // required int32 channel = 4 [default = 0];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool with_data_field = 5 [default = true];
  bool has_with_data_field() const;
  private:
  bool _internal_has_with_data_field() const;
  public:
  void clear_with_data_field();
  bool with_data_field() const;
  void set_with_data_field(bool value);
  private:
  bool _internal_with_data_field() const;
  void _internal_set_with_data_field(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.SerializedData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  bool with_data_field_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DataDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.DataDescriptor) */ {
 public:
  inline DataDescriptor() : DataDescriptor(nullptr) {}
  virtual ~DataDescriptor();

  DataDescriptor(const DataDescriptor& from);
  DataDescriptor(DataDescriptor&& from) noexcept
    : DataDescriptor() {
    *this = ::std::move(from);
  }

  inline DataDescriptor& operator=(const DataDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataDescriptor& operator=(DataDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataDescriptor& default_instance();

  static inline const DataDescriptor* internal_default_instance() {
    return reinterpret_cast<const DataDescriptor*>(
               &_DataDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DataDescriptor& a, DataDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(DataDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataDescriptor* New() const final {
    return CreateMaybeMessage<DataDescriptor>(nullptr);
  }

  DataDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataDescriptor& from);
  void MergeFrom(const DataDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.DataDescriptor";
  }
  protected:
  explicit DataDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional .CommonProto.SerializedData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CommonProto::SerializedData& data() const;
  ::CommonProto::SerializedData* release_data();
  ::CommonProto::SerializedData* mutable_data();
  void set_allocated_data(::CommonProto::SerializedData* data);
  private:
  const ::CommonProto::SerializedData& _internal_data() const;
  ::CommonProto::SerializedData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CommonProto::SerializedData* data);
  ::CommonProto::SerializedData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:CommonProto.DataDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::CommonProto::SerializedData* data_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 1,
    kGFieldNumber = 2,
    kRFieldNumber = 3,
  };
  // required uint32 b = 1;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 g = 2;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 r = 3;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.Color)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ParsingSetting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ParsingSetting) */ {
 public:
  inline ParsingSetting() : ParsingSetting(nullptr) {}
  virtual ~ParsingSetting();

  ParsingSetting(const ParsingSetting& from);
  ParsingSetting(ParsingSetting&& from) noexcept
    : ParsingSetting() {
    *this = ::std::move(from);
  }

  inline ParsingSetting& operator=(const ParsingSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParsingSetting& operator=(ParsingSetting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParsingSetting& default_instance();

  static inline const ParsingSetting* internal_default_instance() {
    return reinterpret_cast<const ParsingSetting*>(
               &_ParsingSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ParsingSetting& a, ParsingSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(ParsingSetting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParsingSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParsingSetting* New() const final {
    return CreateMaybeMessage<ParsingSetting>(nullptr);
  }

  ParsingSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParsingSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParsingSetting& from);
  void MergeFrom(const ParsingSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParsingSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ParsingSetting";
  }
  protected:
  explicit ParsingSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelLabelsFieldNumber = 3,
    kChannelColorsFieldNumber = 4,
    kFreespaceChannelsFieldNumber = 5,
    kBoundspaceChannelsFieldNumber = 6,
    kParsingTypeFieldNumber = 1,
    kParsingChannelsFieldNumber = 2,
  };
  // repeated uint64 channel_labels = 3;
  int channel_labels_size() const;
  private:
  int _internal_channel_labels_size() const;
  public:
  void clear_channel_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_channel_labels() const;
  void _internal_add_channel_labels(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_channel_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_labels(int index) const;
  void set_channel_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_channel_labels(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      channel_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_channel_labels();

  // repeated .CommonProto.Color channel_colors = 4;
  int channel_colors_size() const;
  private:
  int _internal_channel_colors_size() const;
  public:
  void clear_channel_colors();
  ::CommonProto::Color* mutable_channel_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color >*
      mutable_channel_colors();
  private:
  const ::CommonProto::Color& _internal_channel_colors(int index) const;
  ::CommonProto::Color* _internal_add_channel_colors();
  public:
  const ::CommonProto::Color& channel_colors(int index) const;
  ::CommonProto::Color* add_channel_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color >&
      channel_colors() const;

  // repeated int32 freespace_channels = 5;
  int freespace_channels_size() const;
  private:
  int _internal_freespace_channels_size() const;
  public:
  void clear_freespace_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_freespace_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_freespace_channels() const;
  void _internal_add_freespace_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_freespace_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 freespace_channels(int index) const;
  void set_freespace_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_freespace_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      freespace_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_freespace_channels();

  // repeated int32 boundspace_channels = 6;
  int boundspace_channels_size() const;
  private:
  int _internal_boundspace_channels_size() const;
  public:
  void clear_boundspace_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boundspace_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_boundspace_channels() const;
  void _internal_add_boundspace_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_boundspace_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 boundspace_channels(int index) const;
  void set_boundspace_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_boundspace_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      boundspace_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_boundspace_channels();

  // required int32 parsing_type = 1;
  bool has_parsing_type() const;
  private:
  bool _internal_has_parsing_type() const;
  public:
  void clear_parsing_type();
  ::PROTOBUF_NAMESPACE_ID::int32 parsing_type() const;
  void set_parsing_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parsing_type() const;
  void _internal_set_parsing_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 parsing_channels = 2;
  bool has_parsing_channels() const;
  private:
  bool _internal_has_parsing_channels() const;
  public:
  void clear_parsing_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 parsing_channels() const;
  void set_parsing_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parsing_channels() const;
  void _internal_set_parsing_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.ParsingSetting)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > channel_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color > channel_colors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > freespace_channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > boundspace_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 parsing_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 parsing_channels_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ImageFailStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ImageFailStatus) */ {
 public:
  inline ImageFailStatus() : ImageFailStatus(nullptr) {}
  virtual ~ImageFailStatus();

  ImageFailStatus(const ImageFailStatus& from);
  ImageFailStatus(ImageFailStatus&& from) noexcept
    : ImageFailStatus() {
    *this = ::std::move(from);
  }

  inline ImageFailStatus& operator=(const ImageFailStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageFailStatus& operator=(ImageFailStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageFailStatus& default_instance();

  static inline const ImageFailStatus* internal_default_instance() {
    return reinterpret_cast<const ImageFailStatus*>(
               &_ImageFailStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ImageFailStatus& a, ImageFailStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageFailStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageFailStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageFailStatus* New() const final {
    return CreateMaybeMessage<ImageFailStatus>(nullptr);
  }

  ImageFailStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageFailStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageFailStatus& from);
  void MergeFrom(const ImageFailStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageFailStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ImageFailStatus";
  }
  protected:
  explicit ImageFailStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ImageFailStatus_ImgFailTypes ImgFailTypes;
  static constexpr ImgFailTypes IMG_NORMAL =
    ImageFailStatus_ImgFailTypes_IMG_NORMAL;
  static constexpr ImgFailTypes IMG_BLUR =
    ImageFailStatus_ImgFailTypes_IMG_BLUR;
  static constexpr ImgFailTypes IMG_SHELTER =
    ImageFailStatus_ImgFailTypes_IMG_SHELTER;
  static constexpr ImgFailTypes IMG_FREEZE =
    ImageFailStatus_ImgFailTypes_IMG_FREEZE;
  static constexpr ImgFailTypes IMG_GLARE =
    ImageFailStatus_ImgFailTypes_IMG_GLARE;
  static inline bool ImgFailTypes_IsValid(int value) {
    return ImageFailStatus_ImgFailTypes_IsValid(value);
  }
  static constexpr ImgFailTypes ImgFailTypes_MIN =
    ImageFailStatus_ImgFailTypes_ImgFailTypes_MIN;
  static constexpr ImgFailTypes ImgFailTypes_MAX =
    ImageFailStatus_ImgFailTypes_ImgFailTypes_MAX;
  static constexpr int ImgFailTypes_ARRAYSIZE =
    ImageFailStatus_ImgFailTypes_ImgFailTypes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImgFailTypes_descriptor() {
    return ImageFailStatus_ImgFailTypes_descriptor();
  }
  template<typename T>
  static inline const std::string& ImgFailTypes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImgFailTypes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImgFailTypes_Name.");
    return ImageFailStatus_ImgFailTypes_Name(enum_t_value);
  }
  static inline bool ImgFailTypes_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImgFailTypes* value) {
    return ImageFailStatus_ImgFailTypes_Parse(name, value);
  }

  typedef ImageFailStatus_ImgFailLevel ImgFailLevel;
  static constexpr ImgFailLevel FAIL_NONE =
    ImageFailStatus_ImgFailLevel_FAIL_NONE;
  static constexpr ImgFailLevel FAIL_MILD =
    ImageFailStatus_ImgFailLevel_FAIL_MILD;
  static constexpr ImgFailLevel FAIL_MODERATE =
    ImageFailStatus_ImgFailLevel_FAIL_MODERATE;
  static constexpr ImgFailLevel FAIL_SEVERE =
    ImageFailStatus_ImgFailLevel_FAIL_SEVERE;
  static inline bool ImgFailLevel_IsValid(int value) {
    return ImageFailStatus_ImgFailLevel_IsValid(value);
  }
  static constexpr ImgFailLevel ImgFailLevel_MIN =
    ImageFailStatus_ImgFailLevel_ImgFailLevel_MIN;
  static constexpr ImgFailLevel ImgFailLevel_MAX =
    ImageFailStatus_ImgFailLevel_ImgFailLevel_MAX;
  static constexpr int ImgFailLevel_ARRAYSIZE =
    ImageFailStatus_ImgFailLevel_ImgFailLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImgFailLevel_descriptor() {
    return ImageFailStatus_ImgFailLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& ImgFailLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImgFailLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImgFailLevel_Name.");
    return ImageFailStatus_ImgFailLevel_Name(enum_t_value);
  }
  static inline bool ImgFailLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImgFailLevel* value) {
    return ImageFailStatus_ImgFailLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRegionsFieldNumber = 4,
    kFailTypeFieldNumber = 1,
    kScoreFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // repeated .CommonProto.Polygon regions = 4;
  int regions_size() const;
  private:
  int _internal_regions_size() const;
  public:
  void clear_regions();
  ::CommonProto::Polygon* mutable_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Polygon >*
      mutable_regions();
  private:
  const ::CommonProto::Polygon& _internal_regions(int index) const;
  ::CommonProto::Polygon* _internal_add_regions();
  public:
  const ::CommonProto::Polygon& regions(int index) const;
  ::CommonProto::Polygon* add_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Polygon >&
      regions() const;

  // required int32 fail_type = 1;
  bool has_fail_type() const;
  private:
  bool _internal_has_fail_type() const;
  public:
  void clear_fail_type();
  ::PROTOBUF_NAMESPACE_ID::int32 fail_type() const;
  void set_fail_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fail_type() const;
  void _internal_set_fail_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional int32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.ImageFailStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Polygon > regions_;
  ::PROTOBUF_NAMESPACE_ID::int32 fail_type_;
  float score_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ImageFail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommonProto.ImageFail) */ {
 public:
  inline ImageFail() : ImageFail(nullptr) {}
  virtual ~ImageFail();

  ImageFail(const ImageFail& from);
  ImageFail(ImageFail&& from) noexcept
    : ImageFail() {
    *this = ::std::move(from);
  }

  inline ImageFail& operator=(const ImageFail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageFail& operator=(ImageFail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageFail& default_instance();

  static inline const ImageFail* internal_default_instance() {
    return reinterpret_cast<const ImageFail*>(
               &_ImageFail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ImageFail& a, ImageFail& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageFail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageFail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageFail* New() const final {
    return CreateMaybeMessage<ImageFail>(nullptr);
  }

  ImageFail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageFail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageFail& from);
  void MergeFrom(const ImageFail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageFail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommonProto.ImageFail";
  }
  protected:
  explicit ImageFail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailStatusFieldNumber = 3,
    kCamIdFieldNumber = 1,
    kFrameIdFieldNumber = 2,
  };
  // repeated .CommonProto.ImageFailStatus fail_status = 3;
  int fail_status_size() const;
  private:
  int _internal_fail_status_size() const;
  public:
  void clear_fail_status();
  ::CommonProto::ImageFailStatus* mutable_fail_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ImageFailStatus >*
      mutable_fail_status();
  private:
  const ::CommonProto::ImageFailStatus& _internal_fail_status(int index) const;
  ::CommonProto::ImageFailStatus* _internal_add_fail_status();
  public:
  const ::CommonProto::ImageFailStatus& fail_status(int index) const;
  ::CommonProto::ImageFailStatus* add_fail_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ImageFailStatus >&
      fail_status() const;

  // required int32 cam_id = 1;
  bool has_cam_id() const;
  private:
  bool _internal_has_cam_id() const;
  public:
  void clear_cam_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id() const;
  void set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cam_id() const;
  void _internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommonProto.ImageFail)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ImageFailStatus > fail_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// required float x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Point::_internal_x() const {
  return x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:CommonProto.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CommonProto.Point.x)
}

// required float y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Point::_internal_y() const {
  return y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:CommonProto.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CommonProto.Point.y)
}

// optional float z = 3;
inline bool Point::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point::has_z() const {
  return _internal_has_z();
}
inline void Point::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Point::_internal_z() const {
  return z_;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:CommonProto.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Point::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CommonProto.Point.z)
}

// -------------------------------------------------------------------

// PointI

// required int32 x = 1;
inline bool PointI::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointI::has_x() const {
  return _internal_has_x();
}
inline void PointI::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointI::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointI::x() const {
  // @@protoc_insertion_point(field_get:CommonProto.PointI.x)
  return _internal_x();
}
inline void PointI::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void PointI::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CommonProto.PointI.x)
}

// required int32 y = 2;
inline bool PointI::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointI::has_y() const {
  return _internal_has_y();
}
inline void PointI::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointI::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointI::y() const {
  // @@protoc_insertion_point(field_get:CommonProto.PointI.y)
  return _internal_y();
}
inline void PointI::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void PointI::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CommonProto.PointI.y)
}

// optional int32 z = 3;
inline bool PointI::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointI::has_z() const {
  return _internal_has_z();
}
inline void PointI::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointI::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointI::z() const {
  // @@protoc_insertion_point(field_get:CommonProto.PointI.z)
  return _internal_z();
}
inline void PointI::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void PointI::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CommonProto.PointI.z)
}

// -------------------------------------------------------------------

// Contour

// repeated .CommonProto.Point pts = 1;
inline int Contour::_internal_pts_size() const {
  return pts_.size();
}
inline int Contour::pts_size() const {
  return _internal_pts_size();
}
inline void Contour::clear_pts() {
  pts_.Clear();
}
inline ::CommonProto::Point* Contour::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Contour.pts)
  return pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
Contour::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Contour.pts)
  return &pts_;
}
inline const ::CommonProto::Point& Contour::_internal_pts(int index) const {
  return pts_.Get(index);
}
inline const ::CommonProto::Point& Contour::pts(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Contour.pts)
  return _internal_pts(index);
}
inline ::CommonProto::Point* Contour::_internal_add_pts() {
  return pts_.Add();
}
inline ::CommonProto::Point* Contour::add_pts() {
  // @@protoc_insertion_point(field_add:CommonProto.Contour.pts)
  return _internal_add_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
Contour::pts() const {
  // @@protoc_insertion_point(field_list:CommonProto.Contour.pts)
  return pts_;
}

// -------------------------------------------------------------------

// Polygon

// repeated .CommonProto.Point pts = 1;
inline int Polygon::_internal_pts_size() const {
  return pts_.size();
}
inline int Polygon::pts_size() const {
  return _internal_pts_size();
}
inline void Polygon::clear_pts() {
  pts_.Clear();
}
inline ::CommonProto::Point* Polygon::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Polygon.pts)
  return pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
Polygon::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Polygon.pts)
  return &pts_;
}
inline const ::CommonProto::Point& Polygon::_internal_pts(int index) const {
  return pts_.Get(index);
}
inline const ::CommonProto::Point& Polygon::pts(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Polygon.pts)
  return _internal_pts(index);
}
inline ::CommonProto::Point* Polygon::_internal_add_pts() {
  return pts_.Add();
}
inline ::CommonProto::Point* Polygon::add_pts() {
  // @@protoc_insertion_point(field_add:CommonProto.Polygon.pts)
  return _internal_add_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
Polygon::pts() const {
  // @@protoc_insertion_point(field_list:CommonProto.Polygon.pts)
  return pts_;
}

// -------------------------------------------------------------------

// Rect

// required float left = 1;
inline bool Rect::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rect::has_left() const {
  return _internal_has_left();
}
inline void Rect::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Rect::_internal_left() const {
  return left_;
}
inline float Rect::left() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.left)
  return _internal_left();
}
inline void Rect::_internal_set_left(float value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void Rect::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:CommonProto.Rect.left)
}

// required float top = 2;
inline bool Rect::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rect::has_top() const {
  return _internal_has_top();
}
inline void Rect::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Rect::_internal_top() const {
  return top_;
}
inline float Rect::top() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.top)
  return _internal_top();
}
inline void Rect::_internal_set_top(float value) {
  _has_bits_[0] |= 0x00000002u;
  top_ = value;
}
inline void Rect::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:CommonProto.Rect.top)
}

// required float right = 3;
inline bool Rect::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rect::has_right() const {
  return _internal_has_right();
}
inline void Rect::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Rect::_internal_right() const {
  return right_;
}
inline float Rect::right() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.right)
  return _internal_right();
}
inline void Rect::_internal_set_right(float value) {
  _has_bits_[0] |= 0x00000004u;
  right_ = value;
}
inline void Rect::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:CommonProto.Rect.right)
}

// required float bottom = 4;
inline bool Rect::_internal_has_bottom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Rect::has_bottom() const {
  return _internal_has_bottom();
}
inline void Rect::clear_bottom() {
  bottom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Rect::_internal_bottom() const {
  return bottom_;
}
inline float Rect::bottom() const {
  // @@protoc_insertion_point(field_get:CommonProto.Rect.bottom)
  return _internal_bottom();
}
inline void Rect::_internal_set_bottom(float value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_ = value;
}
inline void Rect::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:CommonProto.Rect.bottom)
}

// -------------------------------------------------------------------

// OBBox2D

// required .CommonProto.Point corner = 1;
inline bool OBBox2D::_internal_has_corner() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || corner_ != nullptr);
  return value;
}
inline bool OBBox2D::has_corner() const {
  return _internal_has_corner();
}
inline void OBBox2D::clear_corner() {
  if (corner_ != nullptr) corner_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::Point& OBBox2D::_internal_corner() const {
  const ::CommonProto::Point* p = corner_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& OBBox2D::corner() const {
  // @@protoc_insertion_point(field_get:CommonProto.OBBox2D.corner)
  return _internal_corner();
}
inline void OBBox2D::unsafe_arena_set_allocated_corner(
    ::CommonProto::Point* corner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corner_);
  }
  corner_ = corner;
  if (corner) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.OBBox2D.corner)
}
inline ::CommonProto::Point* OBBox2D::release_corner() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Point* temp = corner_;
  corner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* OBBox2D::unsafe_arena_release_corner() {
  // @@protoc_insertion_point(field_release:CommonProto.OBBox2D.corner)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Point* temp = corner_;
  corner_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* OBBox2D::_internal_mutable_corner() {
  _has_bits_[0] |= 0x00000001u;
  if (corner_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    corner_ = p;
  }
  return corner_;
}
inline ::CommonProto::Point* OBBox2D::mutable_corner() {
  // @@protoc_insertion_point(field_mutable:CommonProto.OBBox2D.corner)
  return _internal_mutable_corner();
}
inline void OBBox2D::set_allocated_corner(::CommonProto::Point* corner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete corner_;
  }
  if (corner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(corner);
    if (message_arena != submessage_arena) {
      corner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  corner_ = corner;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.OBBox2D.corner)
}

// repeated .CommonProto.Point axes_pts = 2;
inline int OBBox2D::_internal_axes_pts_size() const {
  return axes_pts_.size();
}
inline int OBBox2D::axes_pts_size() const {
  return _internal_axes_pts_size();
}
inline void OBBox2D::clear_axes_pts() {
  axes_pts_.Clear();
}
inline ::CommonProto::Point* OBBox2D::mutable_axes_pts(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.OBBox2D.axes_pts)
  return axes_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
OBBox2D::mutable_axes_pts() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.OBBox2D.axes_pts)
  return &axes_pts_;
}
inline const ::CommonProto::Point& OBBox2D::_internal_axes_pts(int index) const {
  return axes_pts_.Get(index);
}
inline const ::CommonProto::Point& OBBox2D::axes_pts(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.OBBox2D.axes_pts)
  return _internal_axes_pts(index);
}
inline ::CommonProto::Point* OBBox2D::_internal_add_axes_pts() {
  return axes_pts_.Add();
}
inline ::CommonProto::Point* OBBox2D::add_axes_pts() {
  // @@protoc_insertion_point(field_add:CommonProto.OBBox2D.axes_pts)
  return _internal_add_axes_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
OBBox2D::axes_pts() const {
  // @@protoc_insertion_point(field_list:CommonProto.OBBox2D.axes_pts)
  return axes_pts_;
}

// repeated float size = 3;
inline int OBBox2D::_internal_size_size() const {
  return size_.size();
}
inline int OBBox2D::size_size() const {
  return _internal_size_size();
}
inline void OBBox2D::clear_size() {
  size_.Clear();
}
inline float OBBox2D::_internal_size(int index) const {
  return size_.Get(index);
}
inline float OBBox2D::size(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.OBBox2D.size)
  return _internal_size(index);
}
inline void OBBox2D::set_size(int index, float value) {
  size_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.OBBox2D.size)
}
inline void OBBox2D::_internal_add_size(float value) {
  size_.Add(value);
}
inline void OBBox2D::add_size(float value) {
  _internal_add_size(value);
  // @@protoc_insertion_point(field_add:CommonProto.OBBox2D.size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OBBox2D::_internal_size() const {
  return size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OBBox2D::size() const {
  // @@protoc_insertion_point(field_list:CommonProto.OBBox2D.size)
  return _internal_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OBBox2D::_internal_mutable_size() {
  return &size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OBBox2D::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.OBBox2D.size)
  return _internal_mutable_size();
}

// -------------------------------------------------------------------

// Box3D

// required .CommonProto.Point lower_lt = 1;
inline bool Box3D::_internal_has_lower_lt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lower_lt_ != nullptr);
  return value;
}
inline bool Box3D::has_lower_lt() const {
  return _internal_has_lower_lt();
}
inline void Box3D::clear_lower_lt() {
  if (lower_lt_ != nullptr) lower_lt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::Point& Box3D::_internal_lower_lt() const {
  const ::CommonProto::Point* p = lower_lt_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& Box3D::lower_lt() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.lower_lt)
  return _internal_lower_lt();
}
inline void Box3D::unsafe_arena_set_allocated_lower_lt(
    ::CommonProto::Point* lower_lt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_lt_);
  }
  lower_lt_ = lower_lt;
  if (lower_lt) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Box3D.lower_lt)
}
inline ::CommonProto::Point* Box3D::release_lower_lt() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Point* temp = lower_lt_;
  lower_lt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* Box3D::unsafe_arena_release_lower_lt() {
  // @@protoc_insertion_point(field_release:CommonProto.Box3D.lower_lt)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Point* temp = lower_lt_;
  lower_lt_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* Box3D::_internal_mutable_lower_lt() {
  _has_bits_[0] |= 0x00000001u;
  if (lower_lt_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    lower_lt_ = p;
  }
  return lower_lt_;
}
inline ::CommonProto::Point* Box3D::mutable_lower_lt() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.lower_lt)
  return _internal_mutable_lower_lt();
}
inline void Box3D::set_allocated_lower_lt(::CommonProto::Point* lower_lt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_lt_;
  }
  if (lower_lt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_lt);
    if (message_arena != submessage_arena) {
      lower_lt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_lt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lower_lt_ = lower_lt;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.lower_lt)
}

// required .CommonProto.Point lower_lb = 2;
inline bool Box3D::_internal_has_lower_lb() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lower_lb_ != nullptr);
  return value;
}
inline bool Box3D::has_lower_lb() const {
  return _internal_has_lower_lb();
}
inline void Box3D::clear_lower_lb() {
  if (lower_lb_ != nullptr) lower_lb_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommonProto::Point& Box3D::_internal_lower_lb() const {
  const ::CommonProto::Point* p = lower_lb_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& Box3D::lower_lb() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.lower_lb)
  return _internal_lower_lb();
}
inline void Box3D::unsafe_arena_set_allocated_lower_lb(
    ::CommonProto::Point* lower_lb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_lb_);
  }
  lower_lb_ = lower_lb;
  if (lower_lb) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Box3D.lower_lb)
}
inline ::CommonProto::Point* Box3D::release_lower_lb() {
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::Point* temp = lower_lb_;
  lower_lb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* Box3D::unsafe_arena_release_lower_lb() {
  // @@protoc_insertion_point(field_release:CommonProto.Box3D.lower_lb)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::Point* temp = lower_lb_;
  lower_lb_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* Box3D::_internal_mutable_lower_lb() {
  _has_bits_[0] |= 0x00000002u;
  if (lower_lb_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    lower_lb_ = p;
  }
  return lower_lb_;
}
inline ::CommonProto::Point* Box3D::mutable_lower_lb() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.lower_lb)
  return _internal_mutable_lower_lb();
}
inline void Box3D::set_allocated_lower_lb(::CommonProto::Point* lower_lb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_lb_;
  }
  if (lower_lb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_lb);
    if (message_arena != submessage_arena) {
      lower_lb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_lb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lower_lb_ = lower_lb;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.lower_lb)
}

// required .CommonProto.Point lower_rb = 3;
inline bool Box3D::_internal_has_lower_rb() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lower_rb_ != nullptr);
  return value;
}
inline bool Box3D::has_lower_rb() const {
  return _internal_has_lower_rb();
}
inline void Box3D::clear_lower_rb() {
  if (lower_rb_ != nullptr) lower_rb_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CommonProto::Point& Box3D::_internal_lower_rb() const {
  const ::CommonProto::Point* p = lower_rb_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& Box3D::lower_rb() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.lower_rb)
  return _internal_lower_rb();
}
inline void Box3D::unsafe_arena_set_allocated_lower_rb(
    ::CommonProto::Point* lower_rb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_rb_);
  }
  lower_rb_ = lower_rb;
  if (lower_rb) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Box3D.lower_rb)
}
inline ::CommonProto::Point* Box3D::release_lower_rb() {
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::Point* temp = lower_rb_;
  lower_rb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* Box3D::unsafe_arena_release_lower_rb() {
  // @@protoc_insertion_point(field_release:CommonProto.Box3D.lower_rb)
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::Point* temp = lower_rb_;
  lower_rb_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* Box3D::_internal_mutable_lower_rb() {
  _has_bits_[0] |= 0x00000004u;
  if (lower_rb_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    lower_rb_ = p;
  }
  return lower_rb_;
}
inline ::CommonProto::Point* Box3D::mutable_lower_rb() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.lower_rb)
  return _internal_mutable_lower_rb();
}
inline void Box3D::set_allocated_lower_rb(::CommonProto::Point* lower_rb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_rb_;
  }
  if (lower_rb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_rb);
    if (message_arena != submessage_arena) {
      lower_rb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_rb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lower_rb_ = lower_rb;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.lower_rb)
}

// required .CommonProto.Point lower_rt = 4;
inline bool Box3D::_internal_has_lower_rt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || lower_rt_ != nullptr);
  return value;
}
inline bool Box3D::has_lower_rt() const {
  return _internal_has_lower_rt();
}
inline void Box3D::clear_lower_rt() {
  if (lower_rt_ != nullptr) lower_rt_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CommonProto::Point& Box3D::_internal_lower_rt() const {
  const ::CommonProto::Point* p = lower_rt_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& Box3D::lower_rt() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.lower_rt)
  return _internal_lower_rt();
}
inline void Box3D::unsafe_arena_set_allocated_lower_rt(
    ::CommonProto::Point* lower_rt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_rt_);
  }
  lower_rt_ = lower_rt;
  if (lower_rt) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Box3D.lower_rt)
}
inline ::CommonProto::Point* Box3D::release_lower_rt() {
  _has_bits_[0] &= ~0x00000008u;
  ::CommonProto::Point* temp = lower_rt_;
  lower_rt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* Box3D::unsafe_arena_release_lower_rt() {
  // @@protoc_insertion_point(field_release:CommonProto.Box3D.lower_rt)
  _has_bits_[0] &= ~0x00000008u;
  ::CommonProto::Point* temp = lower_rt_;
  lower_rt_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* Box3D::_internal_mutable_lower_rt() {
  _has_bits_[0] |= 0x00000008u;
  if (lower_rt_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    lower_rt_ = p;
  }
  return lower_rt_;
}
inline ::CommonProto::Point* Box3D::mutable_lower_rt() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.lower_rt)
  return _internal_mutable_lower_rt();
}
inline void Box3D::set_allocated_lower_rt(::CommonProto::Point* lower_rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_rt_;
  }
  if (lower_rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_rt);
    if (message_arena != submessage_arena) {
      lower_rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_rt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lower_rt_ = lower_rt;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.lower_rt)
}

// required .CommonProto.Point upper_lt = 5;
inline bool Box3D::_internal_has_upper_lt() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || upper_lt_ != nullptr);
  return value;
}
inline bool Box3D::has_upper_lt() const {
  return _internal_has_upper_lt();
}
inline void Box3D::clear_upper_lt() {
  if (upper_lt_ != nullptr) upper_lt_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CommonProto::Point& Box3D::_internal_upper_lt() const {
  const ::CommonProto::Point* p = upper_lt_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& Box3D::upper_lt() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.upper_lt)
  return _internal_upper_lt();
}
inline void Box3D::unsafe_arena_set_allocated_upper_lt(
    ::CommonProto::Point* upper_lt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_lt_);
  }
  upper_lt_ = upper_lt;
  if (upper_lt) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Box3D.upper_lt)
}
inline ::CommonProto::Point* Box3D::release_upper_lt() {
  _has_bits_[0] &= ~0x00000010u;
  ::CommonProto::Point* temp = upper_lt_;
  upper_lt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* Box3D::unsafe_arena_release_upper_lt() {
  // @@protoc_insertion_point(field_release:CommonProto.Box3D.upper_lt)
  _has_bits_[0] &= ~0x00000010u;
  ::CommonProto::Point* temp = upper_lt_;
  upper_lt_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* Box3D::_internal_mutable_upper_lt() {
  _has_bits_[0] |= 0x00000010u;
  if (upper_lt_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    upper_lt_ = p;
  }
  return upper_lt_;
}
inline ::CommonProto::Point* Box3D::mutable_upper_lt() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.upper_lt)
  return _internal_mutable_upper_lt();
}
inline void Box3D::set_allocated_upper_lt(::CommonProto::Point* upper_lt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_lt_;
  }
  if (upper_lt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_lt);
    if (message_arena != submessage_arena) {
      upper_lt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_lt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  upper_lt_ = upper_lt;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.upper_lt)
}

// required .CommonProto.Point upper_lb = 6;
inline bool Box3D::_internal_has_upper_lb() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || upper_lb_ != nullptr);
  return value;
}
inline bool Box3D::has_upper_lb() const {
  return _internal_has_upper_lb();
}
inline void Box3D::clear_upper_lb() {
  if (upper_lb_ != nullptr) upper_lb_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CommonProto::Point& Box3D::_internal_upper_lb() const {
  const ::CommonProto::Point* p = upper_lb_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& Box3D::upper_lb() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.upper_lb)
  return _internal_upper_lb();
}
inline void Box3D::unsafe_arena_set_allocated_upper_lb(
    ::CommonProto::Point* upper_lb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_lb_);
  }
  upper_lb_ = upper_lb;
  if (upper_lb) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Box3D.upper_lb)
}
inline ::CommonProto::Point* Box3D::release_upper_lb() {
  _has_bits_[0] &= ~0x00000020u;
  ::CommonProto::Point* temp = upper_lb_;
  upper_lb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* Box3D::unsafe_arena_release_upper_lb() {
  // @@protoc_insertion_point(field_release:CommonProto.Box3D.upper_lb)
  _has_bits_[0] &= ~0x00000020u;
  ::CommonProto::Point* temp = upper_lb_;
  upper_lb_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* Box3D::_internal_mutable_upper_lb() {
  _has_bits_[0] |= 0x00000020u;
  if (upper_lb_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    upper_lb_ = p;
  }
  return upper_lb_;
}
inline ::CommonProto::Point* Box3D::mutable_upper_lb() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.upper_lb)
  return _internal_mutable_upper_lb();
}
inline void Box3D::set_allocated_upper_lb(::CommonProto::Point* upper_lb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_lb_;
  }
  if (upper_lb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_lb);
    if (message_arena != submessage_arena) {
      upper_lb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_lb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  upper_lb_ = upper_lb;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.upper_lb)
}

// required .CommonProto.Point upper_rb = 7;
inline bool Box3D::_internal_has_upper_rb() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || upper_rb_ != nullptr);
  return value;
}
inline bool Box3D::has_upper_rb() const {
  return _internal_has_upper_rb();
}
inline void Box3D::clear_upper_rb() {
  if (upper_rb_ != nullptr) upper_rb_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CommonProto::Point& Box3D::_internal_upper_rb() const {
  const ::CommonProto::Point* p = upper_rb_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& Box3D::upper_rb() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.upper_rb)
  return _internal_upper_rb();
}
inline void Box3D::unsafe_arena_set_allocated_upper_rb(
    ::CommonProto::Point* upper_rb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_rb_);
  }
  upper_rb_ = upper_rb;
  if (upper_rb) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Box3D.upper_rb)
}
inline ::CommonProto::Point* Box3D::release_upper_rb() {
  _has_bits_[0] &= ~0x00000040u;
  ::CommonProto::Point* temp = upper_rb_;
  upper_rb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* Box3D::unsafe_arena_release_upper_rb() {
  // @@protoc_insertion_point(field_release:CommonProto.Box3D.upper_rb)
  _has_bits_[0] &= ~0x00000040u;
  ::CommonProto::Point* temp = upper_rb_;
  upper_rb_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* Box3D::_internal_mutable_upper_rb() {
  _has_bits_[0] |= 0x00000040u;
  if (upper_rb_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    upper_rb_ = p;
  }
  return upper_rb_;
}
inline ::CommonProto::Point* Box3D::mutable_upper_rb() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.upper_rb)
  return _internal_mutable_upper_rb();
}
inline void Box3D::set_allocated_upper_rb(::CommonProto::Point* upper_rb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_rb_;
  }
  if (upper_rb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_rb);
    if (message_arena != submessage_arena) {
      upper_rb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_rb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  upper_rb_ = upper_rb;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.upper_rb)
}

// required .CommonProto.Point upper_rt = 8;
inline bool Box3D::_internal_has_upper_rt() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || upper_rt_ != nullptr);
  return value;
}
inline bool Box3D::has_upper_rt() const {
  return _internal_has_upper_rt();
}
inline void Box3D::clear_upper_rt() {
  if (upper_rt_ != nullptr) upper_rt_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::CommonProto::Point& Box3D::_internal_upper_rt() const {
  const ::CommonProto::Point* p = upper_rt_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& Box3D::upper_rt() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.upper_rt)
  return _internal_upper_rt();
}
inline void Box3D::unsafe_arena_set_allocated_upper_rt(
    ::CommonProto::Point* upper_rt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_rt_);
  }
  upper_rt_ = upper_rt;
  if (upper_rt) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Box3D.upper_rt)
}
inline ::CommonProto::Point* Box3D::release_upper_rt() {
  _has_bits_[0] &= ~0x00000080u;
  ::CommonProto::Point* temp = upper_rt_;
  upper_rt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* Box3D::unsafe_arena_release_upper_rt() {
  // @@protoc_insertion_point(field_release:CommonProto.Box3D.upper_rt)
  _has_bits_[0] &= ~0x00000080u;
  ::CommonProto::Point* temp = upper_rt_;
  upper_rt_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* Box3D::_internal_mutable_upper_rt() {
  _has_bits_[0] |= 0x00000080u;
  if (upper_rt_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    upper_rt_ = p;
  }
  return upper_rt_;
}
inline ::CommonProto::Point* Box3D::mutable_upper_rt() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Box3D.upper_rt)
  return _internal_mutable_upper_rt();
}
inline void Box3D::set_allocated_upper_rt(::CommonProto::Point* upper_rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_rt_;
  }
  if (upper_rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_rt);
    if (message_arena != submessage_arena) {
      upper_rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_rt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  upper_rt_ = upper_rt;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Box3D.upper_rt)
}

// optional float conf = 9;
inline bool Box3D::_internal_has_conf() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Box3D::has_conf() const {
  return _internal_has_conf();
}
inline void Box3D::clear_conf() {
  conf_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Box3D::_internal_conf() const {
  return conf_;
}
inline float Box3D::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.Box3D.conf)
  return _internal_conf();
}
inline void Box3D::_internal_set_conf(float value) {
  _has_bits_[0] |= 0x00000100u;
  conf_ = value;
}
inline void Box3D::set_conf(float value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:CommonProto.Box3D.conf)
}

// -------------------------------------------------------------------

// KeyPoint

// optional .CommonProto.Point pt = 1;
inline bool KeyPoint::_internal_has_pt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pt_ != nullptr);
  return value;
}
inline bool KeyPoint::has_pt() const {
  return _internal_has_pt();
}
inline void KeyPoint::clear_pt() {
  if (pt_ != nullptr) pt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::Point& KeyPoint::_internal_pt() const {
  const ::CommonProto::Point* p = pt_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& KeyPoint::pt() const {
  // @@protoc_insertion_point(field_get:CommonProto.KeyPoint.pt)
  return _internal_pt();
}
inline void KeyPoint::unsafe_arena_set_allocated_pt(
    ::CommonProto::Point* pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pt_);
  }
  pt_ = pt;
  if (pt) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.KeyPoint.pt)
}
inline ::CommonProto::Point* KeyPoint::release_pt() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Point* temp = pt_;
  pt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* KeyPoint::unsafe_arena_release_pt() {
  // @@protoc_insertion_point(field_release:CommonProto.KeyPoint.pt)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Point* temp = pt_;
  pt_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* KeyPoint::_internal_mutable_pt() {
  _has_bits_[0] |= 0x00000001u;
  if (pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    pt_ = p;
  }
  return pt_;
}
inline ::CommonProto::Point* KeyPoint::mutable_pt() {
  // @@protoc_insertion_point(field_mutable:CommonProto.KeyPoint.pt)
  return _internal_mutable_pt();
}
inline void KeyPoint::set_allocated_pt(::CommonProto::Point* pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pt_;
  }
  if (pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pt);
    if (message_arena != submessage_arena) {
      pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pt_ = pt;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.KeyPoint.pt)
}

// optional float type = 2;
inline bool KeyPoint::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeyPoint::has_type() const {
  return _internal_has_type();
}
inline void KeyPoint::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float KeyPoint::_internal_type() const {
  return type_;
}
inline float KeyPoint::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.KeyPoint.type)
  return _internal_type();
}
inline void KeyPoint::_internal_set_type(float value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void KeyPoint::set_type(float value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.KeyPoint.type)
}

// optional float conf = 3;
inline bool KeyPoint::_internal_has_conf() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KeyPoint::has_conf() const {
  return _internal_has_conf();
}
inline void KeyPoint::clear_conf() {
  conf_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float KeyPoint::_internal_conf() const {
  return conf_;
}
inline float KeyPoint::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.KeyPoint.conf)
  return _internal_conf();
}
inline void KeyPoint::_internal_set_conf(float value) {
  _has_bits_[0] |= 0x00000004u;
  conf_ = value;
}
inline void KeyPoint::set_conf(float value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:CommonProto.KeyPoint.conf)
}

// -------------------------------------------------------------------

// Category

// optional int32 property_type = 1;
inline bool Category::_internal_has_property_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Category::has_property_type() const {
  return _internal_has_property_type();
}
inline void Category::clear_property_type() {
  property_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Category::_internal_property_type() const {
  return property_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Category::property_type() const {
  // @@protoc_insertion_point(field_get:CommonProto.Category.property_type)
  return _internal_property_type();
}
inline void Category::_internal_set_property_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  property_type_ = value;
}
inline void Category::set_property_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_property_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.Category.property_type)
}

// optional int32 property = 2;
inline bool Category::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Category::has_property() const {
  return _internal_has_property();
}
inline void Category::clear_property() {
  property_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Category::_internal_property() const {
  return property_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Category::property() const {
  // @@protoc_insertion_point(field_get:CommonProto.Category.property)
  return _internal_property();
}
inline void Category::_internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  property_ = value;
}
inline void Category::set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:CommonProto.Category.property)
}

// optional string property_name = 3;
inline bool Category::_internal_has_property_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Category::has_property_name() const {
  return _internal_has_property_name();
}
inline void Category::clear_property_name() {
  property_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Category::property_name() const {
  // @@protoc_insertion_point(field_get:CommonProto.Category.property_name)
  return _internal_property_name();
}
inline void Category::set_property_name(const std::string& value) {
  _internal_set_property_name(value);
  // @@protoc_insertion_point(field_set:CommonProto.Category.property_name)
}
inline std::string* Category::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Category.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& Category::_internal_property_name() const {
  return property_name_.Get();
}
inline void Category::_internal_set_property_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Category::set_property_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommonProto.Category.property_name)
}
inline void Category::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommonProto.Category.property_name)
}
inline void Category::set_property_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommonProto.Category.property_name)
}
inline std::string* Category::_internal_mutable_property_name() {
  _has_bits_[0] |= 0x00000001u;
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Category::release_property_name() {
  // @@protoc_insertion_point(field_release:CommonProto.Category.property_name)
  if (!_internal_has_property_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Category.property_name)
}

// optional float property_conf = 4;
inline bool Category::_internal_has_property_conf() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Category::has_property_conf() const {
  return _internal_has_property_conf();
}
inline void Category::clear_property_conf() {
  property_conf_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Category::_internal_property_conf() const {
  return property_conf_;
}
inline float Category::property_conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.Category.property_conf)
  return _internal_property_conf();
}
inline void Category::_internal_set_property_conf(float value) {
  _has_bits_[0] |= 0x00000008u;
  property_conf_ = value;
}
inline void Category::set_property_conf(float value) {
  _internal_set_property_conf(value);
  // @@protoc_insertion_point(field_set:CommonProto.Category.property_conf)
}

// -------------------------------------------------------------------

// WorkCondition

// optional .CommonProto.Category category = 1;
inline bool WorkCondition::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || category_ != nullptr);
  return value;
}
inline bool WorkCondition::has_category() const {
  return _internal_has_category();
}
inline void WorkCondition::clear_category() {
  if (category_ != nullptr) category_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::Category& WorkCondition::_internal_category() const {
  const ::CommonProto::Category* p = category_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Category&>(
      ::CommonProto::_Category_default_instance_);
}
inline const ::CommonProto::Category& WorkCondition::category() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorkCondition.category)
  return _internal_category();
}
inline void WorkCondition::unsafe_arena_set_allocated_category(
    ::CommonProto::Category* category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_);
  }
  category_ = category;
  if (category) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.WorkCondition.category)
}
inline ::CommonProto::Category* WorkCondition::release_category() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Category* temp = category_;
  category_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Category* WorkCondition::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_release:CommonProto.WorkCondition.category)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Category* temp = category_;
  category_ = nullptr;
  return temp;
}
inline ::CommonProto::Category* WorkCondition::_internal_mutable_category() {
  _has_bits_[0] |= 0x00000001u;
  if (category_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Category>(GetArena());
    category_ = p;
  }
  return category_;
}
inline ::CommonProto::Category* WorkCondition::mutable_category() {
  // @@protoc_insertion_point(field_mutable:CommonProto.WorkCondition.category)
  return _internal_mutable_category();
}
inline void WorkCondition::set_allocated_category(::CommonProto::Category* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete category_;
  }
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(category);
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorkCondition.category)
}

// optional int32 frame_id = 2;
inline bool WorkCondition::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkCondition::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void WorkCondition::clear_frame_id() {
  frame_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkCondition::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkCondition::frame_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorkCondition.frame_id)
  return _internal_frame_id();
}
inline void WorkCondition::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_ = value;
}
inline void WorkCondition::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorkCondition.frame_id)
}

// optional int32 cam_id = 3;
inline bool WorkCondition::_internal_has_cam_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WorkCondition::has_cam_id() const {
  return _internal_has_cam_id();
}
inline void WorkCondition::clear_cam_id() {
  cam_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkCondition::_internal_cam_id() const {
  return cam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkCondition::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorkCondition.cam_id)
  return _internal_cam_id();
}
inline void WorkCondition::_internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cam_id_ = value;
}
inline void WorkCondition::set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cam_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorkCondition.cam_id)
}

// -------------------------------------------------------------------

// Image

// required int32 width = 1;
inline bool Image::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Image::has_width() const {
  return _internal_has_width();
}
inline void Image::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.width)
}

// required int32 height = 2;
inline bool Image::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Image::has_height() const {
  return _internal_has_height();
}
inline void Image::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.height)
}

// required int32 channel = 3;
inline bool Image::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Image::has_channel() const {
  return _internal_has_channel();
}
inline void Image::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::channel() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.channel)
  return _internal_channel();
}
inline void Image::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  channel_ = value;
}
inline void Image::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.channel)
}

// optional int64 time_stamp = 4;
inline bool Image::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Image::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void Image::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Image::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Image::time_stamp() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.time_stamp)
  return _internal_time_stamp();
}
inline void Image::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_stamp_ = value;
}
inline void Image::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.time_stamp)
}

// optional int32 send_mode = 5;
inline bool Image::_internal_has_send_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Image::has_send_mode() const {
  return _internal_has_send_mode();
}
inline void Image::clear_send_mode() {
  send_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_send_mode() const {
  return send_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::send_mode() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.send_mode)
  return _internal_send_mode();
}
inline void Image::_internal_set_send_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  send_mode_ = value;
}
inline void Image::set_send_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_send_mode(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.send_mode)
}

// optional int32 format = 6;
inline bool Image::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Image::has_format() const {
  return _internal_has_format();
}
inline void Image::clear_format() {
  format_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::format() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.format)
  return _internal_format();
}
inline void Image::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
}
inline void Image::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.format)
}

// optional int32 index = 7;
inline bool Image::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Image::has_index() const {
  return _internal_has_index();
}
inline void Image::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::index() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.index)
  return _internal_index();
}
inline void Image::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  index_ = value;
}
inline void Image::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.index)
}

// optional int32 count = 8;
inline bool Image::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Image::has_count() const {
  return _internal_has_count();
}
inline void Image::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::count() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.count)
  return _internal_count();
}
inline void Image::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  count_ = value;
}
inline void Image::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.count)
}

// optional int32 depth = 9;
inline bool Image::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Image::has_depth() const {
  return _internal_has_depth();
}
inline void Image::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::depth() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.depth)
  return _internal_depth();
}
inline void Image::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  depth_ = value;
}
inline void Image::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.depth)
}

// optional int32 align = 10;
inline bool Image::_internal_has_align() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Image::has_align() const {
  return _internal_has_align();
}
inline void Image::clear_align() {
  align_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_align() const {
  return align_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::align() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.align)
  return _internal_align();
}
inline void Image::_internal_set_align(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  align_ = value;
}
inline void Image::set_align(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_align(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.align)
}

// optional int32 image_counter = 11;
inline bool Image::_internal_has_image_counter() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Image::has_image_counter() const {
  return _internal_has_image_counter();
}
inline void Image::clear_image_counter() {
  image_counter_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_image_counter() const {
  return image_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::image_counter() const {
  // @@protoc_insertion_point(field_get:CommonProto.Image.image_counter)
  return _internal_image_counter();
}
inline void Image::_internal_set_image_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  image_counter_ = value;
}
inline void Image::set_image_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_counter(value);
  // @@protoc_insertion_point(field_set:CommonProto.Image.image_counter)
}

// -------------------------------------------------------------------

// Velocity

// required float vx = 1;
inline bool Velocity::_internal_has_vx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Velocity::has_vx() const {
  return _internal_has_vx();
}
inline void Velocity::clear_vx() {
  vx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Velocity::_internal_vx() const {
  return vx_;
}
inline float Velocity::vx() const {
  // @@protoc_insertion_point(field_get:CommonProto.Velocity.vx)
  return _internal_vx();
}
inline void Velocity::_internal_set_vx(float value) {
  _has_bits_[0] |= 0x00000001u;
  vx_ = value;
}
inline void Velocity::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:CommonProto.Velocity.vx)
}

// required float vy = 2;
inline bool Velocity::_internal_has_vy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Velocity::has_vy() const {
  return _internal_has_vy();
}
inline void Velocity::clear_vy() {
  vy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Velocity::_internal_vy() const {
  return vy_;
}
inline float Velocity::vy() const {
  // @@protoc_insertion_point(field_get:CommonProto.Velocity.vy)
  return _internal_vy();
}
inline void Velocity::_internal_set_vy(float value) {
  _has_bits_[0] |= 0x00000002u;
  vy_ = value;
}
inline void Velocity::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:CommonProto.Velocity.vy)
}

// optional float vz = 3;
inline bool Velocity::_internal_has_vz() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Velocity::has_vz() const {
  return _internal_has_vz();
}
inline void Velocity::clear_vz() {
  vz_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Velocity::_internal_vz() const {
  return vz_;
}
inline float Velocity::vz() const {
  // @@protoc_insertion_point(field_get:CommonProto.Velocity.vz)
  return _internal_vz();
}
inline void Velocity::_internal_set_vz(float value) {
  _has_bits_[0] |= 0x00000004u;
  vz_ = value;
}
inline void Velocity::set_vz(float value) {
  _internal_set_vz(value);
  // @@protoc_insertion_point(field_set:CommonProto.Velocity.vz)
}

// -------------------------------------------------------------------

// Line

// required int32 id = 1;
inline bool Line::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Line::has_id() const {
  return _internal_has_id();
}
inline void Line::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.id)
  return _internal_id();
}
inline void Line::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Line::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.id)
}

// optional int32 life_time = 3;
inline bool Line::_internal_has_life_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Line::has_life_time() const {
  return _internal_has_life_time();
}
inline void Line::clear_life_time() {
  life_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_life_time() const {
  return life_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::life_time() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.life_time)
  return _internal_life_time();
}
inline void Line::_internal_set_life_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  life_time_ = value;
}
inline void Line::set_life_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_life_time(value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.life_time)
}

// repeated float coeffs = 7;
inline int Line::_internal_coeffs_size() const {
  return coeffs_.size();
}
inline int Line::coeffs_size() const {
  return _internal_coeffs_size();
}
inline void Line::clear_coeffs() {
  coeffs_.Clear();
}
inline float Line::_internal_coeffs(int index) const {
  return coeffs_.Get(index);
}
inline float Line::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.coeffs)
  return _internal_coeffs(index);
}
inline void Line::set_coeffs(int index, float value) {
  coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.coeffs)
}
inline void Line::_internal_add_coeffs(float value) {
  coeffs_.Add(value);
}
inline void Line::add_coeffs(float value) {
  _internal_add_coeffs(value);
  // @@protoc_insertion_point(field_add:CommonProto.Line.coeffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Line::_internal_coeffs() const {
  return coeffs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Line::coeffs() const {
  // @@protoc_insertion_point(field_list:CommonProto.Line.coeffs)
  return _internal_coeffs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Line::_internal_mutable_coeffs() {
  return &coeffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Line::mutable_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Line.coeffs)
  return _internal_mutable_coeffs();
}

// repeated .CommonProto.Point end_points = 8;
inline int Line::_internal_end_points_size() const {
  return end_points_.size();
}
inline int Line::end_points_size() const {
  return _internal_end_points_size();
}
inline void Line::clear_end_points() {
  end_points_.Clear();
}
inline ::CommonProto::Point* Line::mutable_end_points(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Line.end_points)
  return end_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
Line::mutable_end_points() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Line.end_points)
  return &end_points_;
}
inline const ::CommonProto::Point& Line::_internal_end_points(int index) const {
  return end_points_.Get(index);
}
inline const ::CommonProto::Point& Line::end_points(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.end_points)
  return _internal_end_points(index);
}
inline ::CommonProto::Point* Line::_internal_add_end_points() {
  return end_points_.Add();
}
inline ::CommonProto::Point* Line::add_end_points() {
  // @@protoc_insertion_point(field_add:CommonProto.Line.end_points)
  return _internal_add_end_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
Line::end_points() const {
  // @@protoc_insertion_point(field_list:CommonProto.Line.end_points)
  return end_points_;
}

// optional int32 type = 9;
inline bool Line::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Line::has_type() const {
  return _internal_has_type();
}
inline void Line::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.type)
  return _internal_type();
}
inline void Line::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Line::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.type)
}

// optional int32 source = 10;
inline bool Line::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Line::has_source() const {
  return _internal_has_source();
}
inline void Line::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::source() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.source)
  return _internal_source();
}
inline void Line::_internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  source_ = value;
}
inline void Line::set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.source)
}

// repeated .CommonProto.Contour contours = 11;
inline int Line::_internal_contours_size() const {
  return contours_.size();
}
inline int Line::contours_size() const {
  return _internal_contours_size();
}
inline void Line::clear_contours() {
  contours_.Clear();
}
inline ::CommonProto::Contour* Line::mutable_contours(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Line.contours)
  return contours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Contour >*
Line::mutable_contours() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Line.contours)
  return &contours_;
}
inline const ::CommonProto::Contour& Line::_internal_contours(int index) const {
  return contours_.Get(index);
}
inline const ::CommonProto::Contour& Line::contours(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.contours)
  return _internal_contours(index);
}
inline ::CommonProto::Contour* Line::_internal_add_contours() {
  return contours_.Add();
}
inline ::CommonProto::Contour* Line::add_contours() {
  // @@protoc_insertion_point(field_add:CommonProto.Line.contours)
  return _internal_add_contours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Contour >&
Line::contours() const {
  // @@protoc_insertion_point(field_list:CommonProto.Line.contours)
  return contours_;
}

// optional float dist_to_front_wheel = 12;
inline bool Line::_internal_has_dist_to_front_wheel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Line::has_dist_to_front_wheel() const {
  return _internal_has_dist_to_front_wheel();
}
inline void Line::clear_dist_to_front_wheel() {
  dist_to_front_wheel_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Line::_internal_dist_to_front_wheel() const {
  return dist_to_front_wheel_;
}
inline float Line::dist_to_front_wheel() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.dist_to_front_wheel)
  return _internal_dist_to_front_wheel();
}
inline void Line::_internal_set_dist_to_front_wheel(float value) {
  _has_bits_[0] |= 0x00000010u;
  dist_to_front_wheel_ = value;
}
inline void Line::set_dist_to_front_wheel(float value) {
  _internal_set_dist_to_front_wheel(value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.dist_to_front_wheel)
}

// optional float width = 13;
inline bool Line::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Line::has_width() const {
  return _internal_has_width();
}
inline void Line::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Line::_internal_width() const {
  return width_;
}
inline float Line::width() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.width)
  return _internal_width();
}
inline void Line::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000020u;
  width_ = value;
}
inline void Line::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.width)
}

// optional int32 type_sibling = 14;
inline bool Line::_internal_has_type_sibling() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Line::has_type_sibling() const {
  return _internal_has_type_sibling();
}
inline void Line::clear_type_sibling() {
  type_sibling_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_type_sibling() const {
  return type_sibling_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::type_sibling() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.type_sibling)
  return _internal_type_sibling();
}
inline void Line::_internal_set_type_sibling(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  type_sibling_ = value;
}
inline void Line::set_type_sibling(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_sibling(value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.type_sibling)
}

// optional float conf = 15;
inline bool Line::_internal_has_conf() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Line::has_conf() const {
  return _internal_has_conf();
}
inline void Line::clear_conf() {
  conf_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Line::_internal_conf() const {
  return conf_;
}
inline float Line::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.conf)
  return _internal_conf();
}
inline void Line::_internal_set_conf(float value) {
  _has_bits_[0] |= 0x00000080u;
  conf_ = value;
}
inline void Line::set_conf(float value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.conf)
}

// repeated float sigma_coeffs = 20;
inline int Line::_internal_sigma_coeffs_size() const {
  return sigma_coeffs_.size();
}
inline int Line::sigma_coeffs_size() const {
  return _internal_sigma_coeffs_size();
}
inline void Line::clear_sigma_coeffs() {
  sigma_coeffs_.Clear();
}
inline float Line::_internal_sigma_coeffs(int index) const {
  return sigma_coeffs_.Get(index);
}
inline float Line::sigma_coeffs(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Line.sigma_coeffs)
  return _internal_sigma_coeffs(index);
}
inline void Line::set_sigma_coeffs(int index, float value) {
  sigma_coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Line.sigma_coeffs)
}
inline void Line::_internal_add_sigma_coeffs(float value) {
  sigma_coeffs_.Add(value);
}
inline void Line::add_sigma_coeffs(float value) {
  _internal_add_sigma_coeffs(value);
  // @@protoc_insertion_point(field_add:CommonProto.Line.sigma_coeffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Line::_internal_sigma_coeffs() const {
  return sigma_coeffs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Line::sigma_coeffs() const {
  // @@protoc_insertion_point(field_list:CommonProto.Line.sigma_coeffs)
  return _internal_sigma_coeffs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Line::_internal_mutable_sigma_coeffs() {
  return &sigma_coeffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Line::mutable_sigma_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Line.sigma_coeffs)
  return _internal_mutable_sigma_coeffs();
}

// -------------------------------------------------------------------

// Lines

// optional int32 cam_id = 1;
inline bool Lines::_internal_has_cam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Lines::has_cam_id() const {
  return _internal_has_cam_id();
}
inline void Lines::clear_cam_id() {
  cam_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lines::_internal_cam_id() const {
  return cam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lines::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Lines.cam_id)
  return _internal_cam_id();
}
inline void Lines::_internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cam_id_ = value;
}
inline void Lines::set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cam_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.Lines.cam_id)
}

// repeated .CommonProto.Line lines = 2;
inline int Lines::_internal_lines_size() const {
  return lines_.size();
}
inline int Lines::lines_size() const {
  return _internal_lines_size();
}
inline void Lines::clear_lines() {
  lines_.Clear();
}
inline ::CommonProto::Line* Lines::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Lines.lines)
  return lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Line >*
Lines::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Lines.lines)
  return &lines_;
}
inline const ::CommonProto::Line& Lines::_internal_lines(int index) const {
  return lines_.Get(index);
}
inline const ::CommonProto::Line& Lines::lines(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Lines.lines)
  return _internal_lines(index);
}
inline ::CommonProto::Line* Lines::_internal_add_lines() {
  return lines_.Add();
}
inline ::CommonProto::Line* Lines::add_lines() {
  // @@protoc_insertion_point(field_add:CommonProto.Lines.lines)
  return _internal_add_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Line >&
Lines::lines() const {
  // @@protoc_insertion_point(field_list:CommonProto.Lines.lines)
  return lines_;
}

// -------------------------------------------------------------------

// WorldSpaceInfo

// optional float yaw = 1;
inline bool WorldSpaceInfo::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_yaw() const {
  return _internal_has_yaw();
}
inline void WorldSpaceInfo::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float WorldSpaceInfo::_internal_yaw() const {
  return yaw_;
}
inline float WorldSpaceInfo::yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.yaw)
  return _internal_yaw();
}
inline void WorldSpaceInfo::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000020u;
  yaw_ = value;
}
inline void WorldSpaceInfo::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.yaw)
}

// optional .CommonProto.Velocity vel = 2;
inline bool WorldSpaceInfo::_internal_has_vel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vel_ != nullptr);
  return value;
}
inline bool WorldSpaceInfo::has_vel() const {
  return _internal_has_vel();
}
inline void WorldSpaceInfo::clear_vel() {
  if (vel_ != nullptr) vel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::Velocity& WorldSpaceInfo::_internal_vel() const {
  const ::CommonProto::Velocity* p = vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Velocity&>(
      ::CommonProto::_Velocity_default_instance_);
}
inline const ::CommonProto::Velocity& WorldSpaceInfo::vel() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.vel)
  return _internal_vel();
}
inline void WorldSpaceInfo::unsafe_arena_set_allocated_vel(
    ::CommonProto::Velocity* vel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  vel_ = vel;
  if (vel) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.WorldSpaceInfo.vel)
}
inline ::CommonProto::Velocity* WorldSpaceInfo::release_vel() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Velocity* temp = vel_;
  vel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Velocity* WorldSpaceInfo::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:CommonProto.WorldSpaceInfo.vel)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Velocity* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::CommonProto::Velocity* WorldSpaceInfo::_internal_mutable_vel() {
  _has_bits_[0] |= 0x00000001u;
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Velocity>(GetArena());
    vel_ = p;
  }
  return vel_;
}
inline ::CommonProto::Velocity* WorldSpaceInfo::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.vel)
  return _internal_mutable_vel();
}
inline void WorldSpaceInfo::set_allocated_vel(::CommonProto::Velocity* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vel_;
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vel);
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.vel)
}

// optional float length = 3;
inline bool WorldSpaceInfo::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_length() const {
  return _internal_has_length();
}
inline void WorldSpaceInfo::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float WorldSpaceInfo::_internal_length() const {
  return length_;
}
inline float WorldSpaceInfo::length() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.length)
  return _internal_length();
}
inline void WorldSpaceInfo::_internal_set_length(float value) {
  _has_bits_[0] |= 0x00000040u;
  length_ = value;
}
inline void WorldSpaceInfo::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.length)
}

// optional float width = 4;
inline bool WorldSpaceInfo::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_width() const {
  return _internal_has_width();
}
inline void WorldSpaceInfo::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float WorldSpaceInfo::_internal_width() const {
  return width_;
}
inline float WorldSpaceInfo::width() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.width)
  return _internal_width();
}
inline void WorldSpaceInfo::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000080u;
  width_ = value;
}
inline void WorldSpaceInfo::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.width)
}

// optional float height = 5;
inline bool WorldSpaceInfo::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_height() const {
  return _internal_has_height();
}
inline void WorldSpaceInfo::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float WorldSpaceInfo::_internal_height() const {
  return height_;
}
inline float WorldSpaceInfo::height() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.height)
  return _internal_height();
}
inline void WorldSpaceInfo::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000100u;
  height_ = value;
}
inline void WorldSpaceInfo::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.height)
}

// optional .CommonProto.Polygon poly = 6;
inline bool WorldSpaceInfo::_internal_has_poly() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || poly_ != nullptr);
  return value;
}
inline bool WorldSpaceInfo::has_poly() const {
  return _internal_has_poly();
}
inline void WorldSpaceInfo::clear_poly() {
  if (poly_ != nullptr) poly_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommonProto::Polygon& WorldSpaceInfo::_internal_poly() const {
  const ::CommonProto::Polygon* p = poly_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Polygon&>(
      ::CommonProto::_Polygon_default_instance_);
}
inline const ::CommonProto::Polygon& WorldSpaceInfo::poly() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.poly)
  return _internal_poly();
}
inline void WorldSpaceInfo::unsafe_arena_set_allocated_poly(
    ::CommonProto::Polygon* poly) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(poly_);
  }
  poly_ = poly;
  if (poly) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.WorldSpaceInfo.poly)
}
inline ::CommonProto::Polygon* WorldSpaceInfo::release_poly() {
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::Polygon* temp = poly_;
  poly_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Polygon* WorldSpaceInfo::unsafe_arena_release_poly() {
  // @@protoc_insertion_point(field_release:CommonProto.WorldSpaceInfo.poly)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::Polygon* temp = poly_;
  poly_ = nullptr;
  return temp;
}
inline ::CommonProto::Polygon* WorldSpaceInfo::_internal_mutable_poly() {
  _has_bits_[0] |= 0x00000002u;
  if (poly_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Polygon>(GetArena());
    poly_ = p;
  }
  return poly_;
}
inline ::CommonProto::Polygon* WorldSpaceInfo::mutable_poly() {
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.poly)
  return _internal_mutable_poly();
}
inline void WorldSpaceInfo::set_allocated_poly(::CommonProto::Polygon* poly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete poly_;
  }
  if (poly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(poly);
    if (message_arena != submessage_arena) {
      poly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poly, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  poly_ = poly;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.poly)
}

// optional .CommonProto.Point position = 7;
inline bool WorldSpaceInfo::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool WorldSpaceInfo::has_position() const {
  return _internal_has_position();
}
inline void WorldSpaceInfo::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CommonProto::Point& WorldSpaceInfo::_internal_position() const {
  const ::CommonProto::Point* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& WorldSpaceInfo::position() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.position)
  return _internal_position();
}
inline void WorldSpaceInfo::unsafe_arena_set_allocated_position(
    ::CommonProto::Point* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.WorldSpaceInfo.position)
}
inline ::CommonProto::Point* WorldSpaceInfo::release_position() {
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::Point* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* WorldSpaceInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:CommonProto.WorldSpaceInfo.position)
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* WorldSpaceInfo::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000004u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::CommonProto::Point* WorldSpaceInfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.position)
  return _internal_mutable_position();
}
inline void WorldSpaceInfo::set_allocated_position(::CommonProto::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.position)
}

// optional int32 traversable = 8;
inline bool WorldSpaceInfo::_internal_has_traversable() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_traversable() const {
  return _internal_has_traversable();
}
inline void WorldSpaceInfo::clear_traversable() {
  traversable_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldSpaceInfo::_internal_traversable() const {
  return traversable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldSpaceInfo::traversable() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.traversable)
  return _internal_traversable();
}
inline void WorldSpaceInfo::_internal_set_traversable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  traversable_ = value;
}
inline void WorldSpaceInfo::set_traversable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_traversable(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.traversable)
}

// optional float hmw = 9;
inline bool WorldSpaceInfo::_internal_has_hmw() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_hmw() const {
  return _internal_has_hmw();
}
inline void WorldSpaceInfo::clear_hmw() {
  hmw_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float WorldSpaceInfo::_internal_hmw() const {
  return hmw_;
}
inline float WorldSpaceInfo::hmw() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.hmw)
  return _internal_hmw();
}
inline void WorldSpaceInfo::_internal_set_hmw(float value) {
  _has_bits_[0] |= 0x00000400u;
  hmw_ = value;
}
inline void WorldSpaceInfo::set_hmw(float value) {
  _internal_set_hmw(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.hmw)
}

// optional float ttc = 10;
inline bool WorldSpaceInfo::_internal_has_ttc() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_ttc() const {
  return _internal_has_ttc();
}
inline void WorldSpaceInfo::clear_ttc() {
  ttc_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float WorldSpaceInfo::_internal_ttc() const {
  return ttc_;
}
inline float WorldSpaceInfo::ttc() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.ttc)
  return _internal_ttc();
}
inline void WorldSpaceInfo::_internal_set_ttc(float value) {
  _has_bits_[0] |= 0x00000800u;
  ttc_ = value;
}
inline void WorldSpaceInfo::set_ttc(float value) {
  _internal_set_ttc(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.ttc)
}

// optional int32 curr_lane = 11;
inline bool WorldSpaceInfo::_internal_has_curr_lane() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_curr_lane() const {
  return _internal_has_curr_lane();
}
inline void WorldSpaceInfo::clear_curr_lane() {
  curr_lane_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldSpaceInfo::_internal_curr_lane() const {
  return curr_lane_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldSpaceInfo::curr_lane() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.curr_lane)
  return _internal_curr_lane();
}
inline void WorldSpaceInfo::_internal_set_curr_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  curr_lane_ = value;
}
inline void WorldSpaceInfo::set_curr_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curr_lane(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.curr_lane)
}

// optional .CommonProto.Point position_obs = 12;
inline bool WorldSpaceInfo::_internal_has_position_obs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || position_obs_ != nullptr);
  return value;
}
inline bool WorldSpaceInfo::has_position_obs() const {
  return _internal_has_position_obs();
}
inline void WorldSpaceInfo::clear_position_obs() {
  if (position_obs_ != nullptr) position_obs_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CommonProto::Point& WorldSpaceInfo::_internal_position_obs() const {
  const ::CommonProto::Point* p = position_obs_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Point&>(
      ::CommonProto::_Point_default_instance_);
}
inline const ::CommonProto::Point& WorldSpaceInfo::position_obs() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.position_obs)
  return _internal_position_obs();
}
inline void WorldSpaceInfo::unsafe_arena_set_allocated_position_obs(
    ::CommonProto::Point* position_obs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_obs_);
  }
  position_obs_ = position_obs;
  if (position_obs) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.WorldSpaceInfo.position_obs)
}
inline ::CommonProto::Point* WorldSpaceInfo::release_position_obs() {
  _has_bits_[0] &= ~0x00000008u;
  ::CommonProto::Point* temp = position_obs_;
  position_obs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Point* WorldSpaceInfo::unsafe_arena_release_position_obs() {
  // @@protoc_insertion_point(field_release:CommonProto.WorldSpaceInfo.position_obs)
  _has_bits_[0] &= ~0x00000008u;
  ::CommonProto::Point* temp = position_obs_;
  position_obs_ = nullptr;
  return temp;
}
inline ::CommonProto::Point* WorldSpaceInfo::_internal_mutable_position_obs() {
  _has_bits_[0] |= 0x00000008u;
  if (position_obs_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Point>(GetArena());
    position_obs_ = p;
  }
  return position_obs_;
}
inline ::CommonProto::Point* WorldSpaceInfo::mutable_position_obs() {
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.position_obs)
  return _internal_mutable_position_obs();
}
inline void WorldSpaceInfo::set_allocated_position_obs(::CommonProto::Point* position_obs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_obs_;
  }
  if (position_obs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_obs);
    if (message_arena != submessage_arena) {
      position_obs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_obs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  position_obs_ = position_obs;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.position_obs)
}

// optional .CommonProto.Velocity vel_abs_world = 16;
inline bool WorldSpaceInfo::_internal_has_vel_abs_world() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || vel_abs_world_ != nullptr);
  return value;
}
inline bool WorldSpaceInfo::has_vel_abs_world() const {
  return _internal_has_vel_abs_world();
}
inline void WorldSpaceInfo::clear_vel_abs_world() {
  if (vel_abs_world_ != nullptr) vel_abs_world_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CommonProto::Velocity& WorldSpaceInfo::_internal_vel_abs_world() const {
  const ::CommonProto::Velocity* p = vel_abs_world_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Velocity&>(
      ::CommonProto::_Velocity_default_instance_);
}
inline const ::CommonProto::Velocity& WorldSpaceInfo::vel_abs_world() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.vel_abs_world)
  return _internal_vel_abs_world();
}
inline void WorldSpaceInfo::unsafe_arena_set_allocated_vel_abs_world(
    ::CommonProto::Velocity* vel_abs_world) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_abs_world_);
  }
  vel_abs_world_ = vel_abs_world;
  if (vel_abs_world) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.WorldSpaceInfo.vel_abs_world)
}
inline ::CommonProto::Velocity* WorldSpaceInfo::release_vel_abs_world() {
  _has_bits_[0] &= ~0x00000010u;
  ::CommonProto::Velocity* temp = vel_abs_world_;
  vel_abs_world_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Velocity* WorldSpaceInfo::unsafe_arena_release_vel_abs_world() {
  // @@protoc_insertion_point(field_release:CommonProto.WorldSpaceInfo.vel_abs_world)
  _has_bits_[0] &= ~0x00000010u;
  ::CommonProto::Velocity* temp = vel_abs_world_;
  vel_abs_world_ = nullptr;
  return temp;
}
inline ::CommonProto::Velocity* WorldSpaceInfo::_internal_mutable_vel_abs_world() {
  _has_bits_[0] |= 0x00000010u;
  if (vel_abs_world_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Velocity>(GetArena());
    vel_abs_world_ = p;
  }
  return vel_abs_world_;
}
inline ::CommonProto::Velocity* WorldSpaceInfo::mutable_vel_abs_world() {
  // @@protoc_insertion_point(field_mutable:CommonProto.WorldSpaceInfo.vel_abs_world)
  return _internal_mutable_vel_abs_world();
}
inline void WorldSpaceInfo::set_allocated_vel_abs_world(::CommonProto::Velocity* vel_abs_world) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vel_abs_world_;
  }
  if (vel_abs_world) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vel_abs_world);
    if (message_arena != submessage_arena) {
      vel_abs_world = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_abs_world, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  vel_abs_world_ = vel_abs_world;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.WorldSpaceInfo.vel_abs_world)
}

// optional float sigma_yaw = 30;
inline bool WorldSpaceInfo::_internal_has_sigma_yaw() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_sigma_yaw() const {
  return _internal_has_sigma_yaw();
}
inline void WorldSpaceInfo::clear_sigma_yaw() {
  sigma_yaw_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float WorldSpaceInfo::_internal_sigma_yaw() const {
  return sigma_yaw_;
}
inline float WorldSpaceInfo::sigma_yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_yaw)
  return _internal_sigma_yaw();
}
inline void WorldSpaceInfo::_internal_set_sigma_yaw(float value) {
  _has_bits_[0] |= 0x00004000u;
  sigma_yaw_ = value;
}
inline void WorldSpaceInfo::set_sigma_yaw(float value) {
  _internal_set_sigma_yaw(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_yaw)
}

// repeated float sigma_vel = 31;
inline int WorldSpaceInfo::_internal_sigma_vel_size() const {
  return sigma_vel_.size();
}
inline int WorldSpaceInfo::sigma_vel_size() const {
  return _internal_sigma_vel_size();
}
inline void WorldSpaceInfo::clear_sigma_vel() {
  sigma_vel_.Clear();
}
inline float WorldSpaceInfo::_internal_sigma_vel(int index) const {
  return sigma_vel_.Get(index);
}
inline float WorldSpaceInfo::sigma_vel(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_vel)
  return _internal_sigma_vel(index);
}
inline void WorldSpaceInfo::set_sigma_vel(int index, float value) {
  sigma_vel_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_vel)
}
inline void WorldSpaceInfo::_internal_add_sigma_vel(float value) {
  sigma_vel_.Add(value);
}
inline void WorldSpaceInfo::add_sigma_vel(float value) {
  _internal_add_sigma_vel(value);
  // @@protoc_insertion_point(field_add:CommonProto.WorldSpaceInfo.sigma_vel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WorldSpaceInfo::_internal_sigma_vel() const {
  return sigma_vel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WorldSpaceInfo::sigma_vel() const {
  // @@protoc_insertion_point(field_list:CommonProto.WorldSpaceInfo.sigma_vel)
  return _internal_sigma_vel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WorldSpaceInfo::_internal_mutable_sigma_vel() {
  return &sigma_vel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WorldSpaceInfo::mutable_sigma_vel() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.WorldSpaceInfo.sigma_vel)
  return _internal_mutable_sigma_vel();
}

// optional float sigma_width = 32;
inline bool WorldSpaceInfo::_internal_has_sigma_width() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_sigma_width() const {
  return _internal_has_sigma_width();
}
inline void WorldSpaceInfo::clear_sigma_width() {
  sigma_width_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float WorldSpaceInfo::_internal_sigma_width() const {
  return sigma_width_;
}
inline float WorldSpaceInfo::sigma_width() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_width)
  return _internal_sigma_width();
}
inline void WorldSpaceInfo::_internal_set_sigma_width(float value) {
  _has_bits_[0] |= 0x00008000u;
  sigma_width_ = value;
}
inline void WorldSpaceInfo::set_sigma_width(float value) {
  _internal_set_sigma_width(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_width)
}

// optional float sigma_height = 33;
inline bool WorldSpaceInfo::_internal_has_sigma_height() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_sigma_height() const {
  return _internal_has_sigma_height();
}
inline void WorldSpaceInfo::clear_sigma_height() {
  sigma_height_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float WorldSpaceInfo::_internal_sigma_height() const {
  return sigma_height_;
}
inline float WorldSpaceInfo::sigma_height() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_height)
  return _internal_sigma_height();
}
inline void WorldSpaceInfo::_internal_set_sigma_height(float value) {
  _has_bits_[0] |= 0x00010000u;
  sigma_height_ = value;
}
inline void WorldSpaceInfo::set_sigma_height(float value) {
  _internal_set_sigma_height(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_height)
}

// repeated float sigma_position = 34;
inline int WorldSpaceInfo::_internal_sigma_position_size() const {
  return sigma_position_.size();
}
inline int WorldSpaceInfo::sigma_position_size() const {
  return _internal_sigma_position_size();
}
inline void WorldSpaceInfo::clear_sigma_position() {
  sigma_position_.Clear();
}
inline float WorldSpaceInfo::_internal_sigma_position(int index) const {
  return sigma_position_.Get(index);
}
inline float WorldSpaceInfo::sigma_position(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_position)
  return _internal_sigma_position(index);
}
inline void WorldSpaceInfo::set_sigma_position(int index, float value) {
  sigma_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_position)
}
inline void WorldSpaceInfo::_internal_add_sigma_position(float value) {
  sigma_position_.Add(value);
}
inline void WorldSpaceInfo::add_sigma_position(float value) {
  _internal_add_sigma_position(value);
  // @@protoc_insertion_point(field_add:CommonProto.WorldSpaceInfo.sigma_position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WorldSpaceInfo::_internal_sigma_position() const {
  return sigma_position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WorldSpaceInfo::sigma_position() const {
  // @@protoc_insertion_point(field_list:CommonProto.WorldSpaceInfo.sigma_position)
  return _internal_sigma_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WorldSpaceInfo::_internal_mutable_sigma_position() {
  return &sigma_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WorldSpaceInfo::mutable_sigma_position() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.WorldSpaceInfo.sigma_position)
  return _internal_mutable_sigma_position();
}

// optional float sigma_length = 35;
inline bool WorldSpaceInfo::_internal_has_sigma_length() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_sigma_length() const {
  return _internal_has_sigma_length();
}
inline void WorldSpaceInfo::clear_sigma_length() {
  sigma_length_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float WorldSpaceInfo::_internal_sigma_length() const {
  return sigma_length_;
}
inline float WorldSpaceInfo::sigma_length() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.sigma_length)
  return _internal_sigma_length();
}
inline void WorldSpaceInfo::_internal_set_sigma_length(float value) {
  _has_bits_[0] |= 0x00020000u;
  sigma_length_ = value;
}
inline void WorldSpaceInfo::set_sigma_length(float value) {
  _internal_set_sigma_length(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.sigma_length)
}

// optional float conf_yaw = 36;
inline bool WorldSpaceInfo::_internal_has_conf_yaw() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool WorldSpaceInfo::has_conf_yaw() const {
  return _internal_has_conf_yaw();
}
inline void WorldSpaceInfo::clear_conf_yaw() {
  conf_yaw_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float WorldSpaceInfo::_internal_conf_yaw() const {
  return conf_yaw_;
}
inline float WorldSpaceInfo::conf_yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.WorldSpaceInfo.conf_yaw)
  return _internal_conf_yaw();
}
inline void WorldSpaceInfo::_internal_set_conf_yaw(float value) {
  _has_bits_[0] |= 0x00002000u;
  conf_yaw_ = value;
}
inline void WorldSpaceInfo::set_conf_yaw(float value) {
  _internal_set_conf_yaw(value);
  // @@protoc_insertion_point(field_set:CommonProto.WorldSpaceInfo.conf_yaw)
}

// -------------------------------------------------------------------

// ImageSpaceInfo

// optional .CommonProto.Rect rect = 1;
inline bool ImageSpaceInfo::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool ImageSpaceInfo::has_rect() const {
  return _internal_has_rect();
}
inline void ImageSpaceInfo::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::Rect& ImageSpaceInfo::_internal_rect() const {
  const ::CommonProto::Rect* p = rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Rect&>(
      ::CommonProto::_Rect_default_instance_);
}
inline const ::CommonProto::Rect& ImageSpaceInfo::rect() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.rect)
  return _internal_rect();
}
inline void ImageSpaceInfo::unsafe_arena_set_allocated_rect(
    ::CommonProto::Rect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.ImageSpaceInfo.rect)
}
inline ::CommonProto::Rect* ImageSpaceInfo::release_rect() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Rect* temp = rect_;
  rect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Rect* ImageSpaceInfo::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:CommonProto.ImageSpaceInfo.rect)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Rect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::CommonProto::Rect* ImageSpaceInfo::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000001u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Rect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::CommonProto::Rect* ImageSpaceInfo::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageSpaceInfo.rect)
  return _internal_mutable_rect();
}
inline void ImageSpaceInfo::set_allocated_rect(::CommonProto::Rect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ImageSpaceInfo.rect)
}

// optional .CommonProto.Box3D box = 11;
inline bool ImageSpaceInfo::_internal_has_box() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || box_ != nullptr);
  return value;
}
inline bool ImageSpaceInfo::has_box() const {
  return _internal_has_box();
}
inline void ImageSpaceInfo::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommonProto::Box3D& ImageSpaceInfo::_internal_box() const {
  const ::CommonProto::Box3D* p = box_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Box3D&>(
      ::CommonProto::_Box3D_default_instance_);
}
inline const ::CommonProto::Box3D& ImageSpaceInfo::box() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.box)
  return _internal_box();
}
inline void ImageSpaceInfo::unsafe_arena_set_allocated_box(
    ::CommonProto::Box3D* box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_);
  }
  box_ = box;
  if (box) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.ImageSpaceInfo.box)
}
inline ::CommonProto::Box3D* ImageSpaceInfo::release_box() {
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::Box3D* temp = box_;
  box_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Box3D* ImageSpaceInfo::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:CommonProto.ImageSpaceInfo.box)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::Box3D* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::CommonProto::Box3D* ImageSpaceInfo::_internal_mutable_box() {
  _has_bits_[0] |= 0x00000002u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Box3D>(GetArena());
    box_ = p;
  }
  return box_;
}
inline ::CommonProto::Box3D* ImageSpaceInfo::mutable_box() {
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageSpaceInfo.box)
  return _internal_mutable_box();
}
inline void ImageSpaceInfo::set_allocated_box(::CommonProto::Box3D* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete box_;
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ImageSpaceInfo.box)
}

// optional .CommonProto.Polygon poly = 12;
inline bool ImageSpaceInfo::_internal_has_poly() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || poly_ != nullptr);
  return value;
}
inline bool ImageSpaceInfo::has_poly() const {
  return _internal_has_poly();
}
inline void ImageSpaceInfo::clear_poly() {
  if (poly_ != nullptr) poly_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CommonProto::Polygon& ImageSpaceInfo::_internal_poly() const {
  const ::CommonProto::Polygon* p = poly_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Polygon&>(
      ::CommonProto::_Polygon_default_instance_);
}
inline const ::CommonProto::Polygon& ImageSpaceInfo::poly() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.poly)
  return _internal_poly();
}
inline void ImageSpaceInfo::unsafe_arena_set_allocated_poly(
    ::CommonProto::Polygon* poly) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(poly_);
  }
  poly_ = poly;
  if (poly) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.ImageSpaceInfo.poly)
}
inline ::CommonProto::Polygon* ImageSpaceInfo::release_poly() {
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::Polygon* temp = poly_;
  poly_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Polygon* ImageSpaceInfo::unsafe_arena_release_poly() {
  // @@protoc_insertion_point(field_release:CommonProto.ImageSpaceInfo.poly)
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::Polygon* temp = poly_;
  poly_ = nullptr;
  return temp;
}
inline ::CommonProto::Polygon* ImageSpaceInfo::_internal_mutable_poly() {
  _has_bits_[0] |= 0x00000004u;
  if (poly_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Polygon>(GetArena());
    poly_ = p;
  }
  return poly_;
}
inline ::CommonProto::Polygon* ImageSpaceInfo::mutable_poly() {
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageSpaceInfo.poly)
  return _internal_mutable_poly();
}
inline void ImageSpaceInfo::set_allocated_poly(::CommonProto::Polygon* poly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete poly_;
  }
  if (poly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(poly);
    if (message_arena != submessage_arena) {
      poly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poly, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  poly_ = poly;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ImageSpaceInfo.poly)
}

// optional float sigma_width = 20;
inline bool ImageSpaceInfo::_internal_has_sigma_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageSpaceInfo::has_sigma_width() const {
  return _internal_has_sigma_width();
}
inline void ImageSpaceInfo::clear_sigma_width() {
  sigma_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ImageSpaceInfo::_internal_sigma_width() const {
  return sigma_width_;
}
inline float ImageSpaceInfo::sigma_width() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.sigma_width)
  return _internal_sigma_width();
}
inline void ImageSpaceInfo::_internal_set_sigma_width(float value) {
  _has_bits_[0] |= 0x00000008u;
  sigma_width_ = value;
}
inline void ImageSpaceInfo::set_sigma_width(float value) {
  _internal_set_sigma_width(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageSpaceInfo.sigma_width)
}

// optional float sigma_height = 21;
inline bool ImageSpaceInfo::_internal_has_sigma_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageSpaceInfo::has_sigma_height() const {
  return _internal_has_sigma_height();
}
inline void ImageSpaceInfo::clear_sigma_height() {
  sigma_height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ImageSpaceInfo::_internal_sigma_height() const {
  return sigma_height_;
}
inline float ImageSpaceInfo::sigma_height() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.sigma_height)
  return _internal_sigma_height();
}
inline void ImageSpaceInfo::_internal_set_sigma_height(float value) {
  _has_bits_[0] |= 0x00000010u;
  sigma_height_ = value;
}
inline void ImageSpaceInfo::set_sigma_height(float value) {
  _internal_set_sigma_height(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageSpaceInfo.sigma_height)
}

// optional float sigma_x = 22;
inline bool ImageSpaceInfo::_internal_has_sigma_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageSpaceInfo::has_sigma_x() const {
  return _internal_has_sigma_x();
}
inline void ImageSpaceInfo::clear_sigma_x() {
  sigma_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ImageSpaceInfo::_internal_sigma_x() const {
  return sigma_x_;
}
inline float ImageSpaceInfo::sigma_x() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.sigma_x)
  return _internal_sigma_x();
}
inline void ImageSpaceInfo::_internal_set_sigma_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  sigma_x_ = value;
}
inline void ImageSpaceInfo::set_sigma_x(float value) {
  _internal_set_sigma_x(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageSpaceInfo.sigma_x)
}

// optional float sigma_y = 23;
inline bool ImageSpaceInfo::_internal_has_sigma_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ImageSpaceInfo::has_sigma_y() const {
  return _internal_has_sigma_y();
}
inline void ImageSpaceInfo::clear_sigma_y() {
  sigma_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ImageSpaceInfo::_internal_sigma_y() const {
  return sigma_y_;
}
inline float ImageSpaceInfo::sigma_y() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageSpaceInfo.sigma_y)
  return _internal_sigma_y();
}
inline void ImageSpaceInfo::_internal_set_sigma_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  sigma_y_ = value;
}
inline void ImageSpaceInfo::set_sigma_y(float value) {
  _internal_set_sigma_y(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageSpaceInfo.sigma_y)
}

// -------------------------------------------------------------------

// TrackingFeatureMap

// required bytes data = 1;
inline bool TrackingFeatureMap::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackingFeatureMap::has_data() const {
  return _internal_has_data();
}
inline void TrackingFeatureMap::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackingFeatureMap::data() const {
  // @@protoc_insertion_point(field_get:CommonProto.TrackingFeatureMap.data)
  return _internal_data();
}
inline void TrackingFeatureMap::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CommonProto.TrackingFeatureMap.data)
}
inline std::string* TrackingFeatureMap::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CommonProto.TrackingFeatureMap.data)
  return _internal_mutable_data();
}
inline const std::string& TrackingFeatureMap::_internal_data() const {
  return data_.Get();
}
inline void TrackingFeatureMap::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrackingFeatureMap::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommonProto.TrackingFeatureMap.data)
}
inline void TrackingFeatureMap::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommonProto.TrackingFeatureMap.data)
}
inline void TrackingFeatureMap::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommonProto.TrackingFeatureMap.data)
}
inline std::string* TrackingFeatureMap::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrackingFeatureMap::release_data() {
  // @@protoc_insertion_point(field_release:CommonProto.TrackingFeatureMap.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackingFeatureMap::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommonProto.TrackingFeatureMap.data)
}

// -------------------------------------------------------------------

// Obstacle

// required int32 id = 1;
inline bool Obstacle::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Obstacle::has_id() const {
  return _internal_has_id();
}
inline void Obstacle::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.id)
  return _internal_id();
}
inline void Obstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Obstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.id)
}

// required int32 type = 2;
inline bool Obstacle::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Obstacle::has_type() const {
  return _internal_has_type();
}
inline void Obstacle::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.type)
  return _internal_type();
}
inline void Obstacle::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void Obstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.type)
}

// optional int32 conf = 3;
inline bool Obstacle::_internal_has_conf() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Obstacle::has_conf() const {
  return _internal_has_conf();
}
inline void Obstacle::clear_conf() {
  conf_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_conf() const {
  return conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.conf)
  return _internal_conf();
}
inline void Obstacle::_internal_set_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  conf_ = value;
}
inline void Obstacle::set_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.conf)
}

// optional int32 life_time = 4;
inline bool Obstacle::_internal_has_life_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Obstacle::has_life_time() const {
  return _internal_has_life_time();
}
inline void Obstacle::clear_life_time() {
  life_time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_life_time() const {
  return life_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::life_time() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.life_time)
  return _internal_life_time();
}
inline void Obstacle::_internal_set_life_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  life_time_ = value;
}
inline void Obstacle::set_life_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_life_time(value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.life_time)
}

// optional int32 age = 5;
inline bool Obstacle::_internal_has_age() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Obstacle::has_age() const {
  return _internal_has_age();
}
inline void Obstacle::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::age() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.age)
  return _internal_age();
}
inline void Obstacle::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  age_ = value;
}
inline void Obstacle::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.age)
}

// optional .CommonProto.ImageSpaceInfo img_info = 6;
inline bool Obstacle::_internal_has_img_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || img_info_ != nullptr);
  return value;
}
inline bool Obstacle::has_img_info() const {
  return _internal_has_img_info();
}
inline void Obstacle::clear_img_info() {
  if (img_info_ != nullptr) img_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::ImageSpaceInfo& Obstacle::_internal_img_info() const {
  const ::CommonProto::ImageSpaceInfo* p = img_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::ImageSpaceInfo&>(
      ::CommonProto::_ImageSpaceInfo_default_instance_);
}
inline const ::CommonProto::ImageSpaceInfo& Obstacle::img_info() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.img_info)
  return _internal_img_info();
}
inline void Obstacle::unsafe_arena_set_allocated_img_info(
    ::CommonProto::ImageSpaceInfo* img_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(img_info_);
  }
  img_info_ = img_info;
  if (img_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Obstacle.img_info)
}
inline ::CommonProto::ImageSpaceInfo* Obstacle::release_img_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::ImageSpaceInfo* temp = img_info_;
  img_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::ImageSpaceInfo* Obstacle::unsafe_arena_release_img_info() {
  // @@protoc_insertion_point(field_release:CommonProto.Obstacle.img_info)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::ImageSpaceInfo* temp = img_info_;
  img_info_ = nullptr;
  return temp;
}
inline ::CommonProto::ImageSpaceInfo* Obstacle::_internal_mutable_img_info() {
  _has_bits_[0] |= 0x00000001u;
  if (img_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::ImageSpaceInfo>(GetArena());
    img_info_ = p;
  }
  return img_info_;
}
inline ::CommonProto::ImageSpaceInfo* Obstacle::mutable_img_info() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacle.img_info)
  return _internal_mutable_img_info();
}
inline void Obstacle::set_allocated_img_info(::CommonProto::ImageSpaceInfo* img_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete img_info_;
  }
  if (img_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(img_info);
    if (message_arena != submessage_arena) {
      img_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, img_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  img_info_ = img_info;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Obstacle.img_info)
}

// optional .CommonProto.WorldSpaceInfo world_info = 7;
inline bool Obstacle::_internal_has_world_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || world_info_ != nullptr);
  return value;
}
inline bool Obstacle::has_world_info() const {
  return _internal_has_world_info();
}
inline void Obstacle::clear_world_info() {
  if (world_info_ != nullptr) world_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommonProto::WorldSpaceInfo& Obstacle::_internal_world_info() const {
  const ::CommonProto::WorldSpaceInfo* p = world_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::WorldSpaceInfo&>(
      ::CommonProto::_WorldSpaceInfo_default_instance_);
}
inline const ::CommonProto::WorldSpaceInfo& Obstacle::world_info() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.world_info)
  return _internal_world_info();
}
inline void Obstacle::unsafe_arena_set_allocated_world_info(
    ::CommonProto::WorldSpaceInfo* world_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_info_);
  }
  world_info_ = world_info;
  if (world_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.Obstacle.world_info)
}
inline ::CommonProto::WorldSpaceInfo* Obstacle::release_world_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::WorldSpaceInfo* temp = world_info_;
  world_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::WorldSpaceInfo* Obstacle::unsafe_arena_release_world_info() {
  // @@protoc_insertion_point(field_release:CommonProto.Obstacle.world_info)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::WorldSpaceInfo* temp = world_info_;
  world_info_ = nullptr;
  return temp;
}
inline ::CommonProto::WorldSpaceInfo* Obstacle::_internal_mutable_world_info() {
  _has_bits_[0] |= 0x00000002u;
  if (world_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::WorldSpaceInfo>(GetArena());
    world_info_ = p;
  }
  return world_info_;
}
inline ::CommonProto::WorldSpaceInfo* Obstacle::mutable_world_info() {
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacle.world_info)
  return _internal_mutable_world_info();
}
inline void Obstacle::set_allocated_world_info(::CommonProto::WorldSpaceInfo* world_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete world_info_;
  }
  if (world_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(world_info);
    if (message_arena != submessage_arena) {
      world_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  world_info_ = world_info;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.Obstacle.world_info)
}

// repeated int32 property = 13;
inline int Obstacle::_internal_property_size() const {
  return property_.size();
}
inline int Obstacle::property_size() const {
  return _internal_property_size();
}
inline void Obstacle::clear_property() {
  property_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_property(int index) const {
  return property_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::property(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.property)
  return _internal_property(index);
}
inline void Obstacle::set_property(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property)
}
inline void Obstacle::_internal_add_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_.Add(value);
}
inline void Obstacle::add_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_property(value);
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Obstacle::_internal_property() const {
  return property_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Obstacle::property() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.property)
  return _internal_property();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Obstacle::_internal_mutable_property() {
  return &property_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Obstacle::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.property)
  return _internal_mutable_property();
}

// repeated string property_name = 14;
inline int Obstacle::_internal_property_name_size() const {
  return property_name_.size();
}
inline int Obstacle::property_name_size() const {
  return _internal_property_name_size();
}
inline void Obstacle::clear_property_name() {
  property_name_.Clear();
}
inline std::string* Obstacle::add_property_name() {
  // @@protoc_insertion_point(field_add_mutable:CommonProto.Obstacle.property_name)
  return _internal_add_property_name();
}
inline const std::string& Obstacle::_internal_property_name(int index) const {
  return property_name_.Get(index);
}
inline const std::string& Obstacle::property_name(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.property_name)
  return _internal_property_name(index);
}
inline std::string* Obstacle::mutable_property_name(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacle.property_name)
  return property_name_.Mutable(index);
}
inline void Obstacle::set_property_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property_name)
  property_name_.Mutable(index)->assign(value);
}
inline void Obstacle::set_property_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property_name)
  property_name_.Mutable(index)->assign(std::move(value));
}
inline void Obstacle::set_property_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  property_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.Obstacle.property_name)
}
inline void Obstacle::set_property_name(int index, const char* value, size_t size) {
  property_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.Obstacle.property_name)
}
inline std::string* Obstacle::_internal_add_property_name() {
  return property_name_.Add();
}
inline void Obstacle::add_property_name(const std::string& value) {
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property_name)
}
inline void Obstacle::add_property_name(std::string&& value) {
  property_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property_name)
}
inline void Obstacle::add_property_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CommonProto.Obstacle.property_name)
}
inline void Obstacle::add_property_name(const char* value, size_t size) {
  property_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CommonProto.Obstacle.property_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Obstacle::property_name() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.property_name)
  return property_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Obstacle::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.property_name)
  return &property_name_;
}

// repeated int32 property_type = 15;
inline int Obstacle::_internal_property_type_size() const {
  return property_type_.size();
}
inline int Obstacle::property_type_size() const {
  return _internal_property_type_size();
}
inline void Obstacle::clear_property_type() {
  property_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_property_type(int index) const {
  return property_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::property_type(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.property_type)
  return _internal_property_type(index);
}
inline void Obstacle::set_property_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property_type)
}
inline void Obstacle::_internal_add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_type_.Add(value);
}
inline void Obstacle::add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_property_type(value);
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Obstacle::_internal_property_type() const {
  return property_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Obstacle::property_type() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.property_type)
  return _internal_property_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Obstacle::_internal_mutable_property_type() {
  return &property_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Obstacle::mutable_property_type() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.property_type)
  return _internal_mutable_property_type();
}

// repeated float property_conf = 16;
inline int Obstacle::_internal_property_conf_size() const {
  return property_conf_.size();
}
inline int Obstacle::property_conf_size() const {
  return _internal_property_conf_size();
}
inline void Obstacle::clear_property_conf() {
  property_conf_.Clear();
}
inline float Obstacle::_internal_property_conf(int index) const {
  return property_conf_.Get(index);
}
inline float Obstacle::property_conf(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.property_conf)
  return _internal_property_conf(index);
}
inline void Obstacle::set_property_conf(int index, float value) {
  property_conf_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacle.property_conf)
}
inline void Obstacle::_internal_add_property_conf(float value) {
  property_conf_.Add(value);
}
inline void Obstacle::add_property_conf(float value) {
  _internal_add_property_conf(value);
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.property_conf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obstacle::_internal_property_conf() const {
  return property_conf_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obstacle::property_conf() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.property_conf)
  return _internal_property_conf();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obstacle::_internal_mutable_property_conf() {
  return &property_conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obstacle::mutable_property_conf() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.property_conf)
  return _internal_mutable_property_conf();
}

// repeated .CommonProto.TrackingFeatureMap tracking_fmap = 17;
inline int Obstacle::_internal_tracking_fmap_size() const {
  return tracking_fmap_.size();
}
inline int Obstacle::tracking_fmap_size() const {
  return _internal_tracking_fmap_size();
}
inline void Obstacle::clear_tracking_fmap() {
  tracking_fmap_.Clear();
}
inline ::CommonProto::TrackingFeatureMap* Obstacle::mutable_tracking_fmap(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacle.tracking_fmap)
  return tracking_fmap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::TrackingFeatureMap >*
Obstacle::mutable_tracking_fmap() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacle.tracking_fmap)
  return &tracking_fmap_;
}
inline const ::CommonProto::TrackingFeatureMap& Obstacle::_internal_tracking_fmap(int index) const {
  return tracking_fmap_.Get(index);
}
inline const ::CommonProto::TrackingFeatureMap& Obstacle::tracking_fmap(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacle.tracking_fmap)
  return _internal_tracking_fmap(index);
}
inline ::CommonProto::TrackingFeatureMap* Obstacle::_internal_add_tracking_fmap() {
  return tracking_fmap_.Add();
}
inline ::CommonProto::TrackingFeatureMap* Obstacle::add_tracking_fmap() {
  // @@protoc_insertion_point(field_add:CommonProto.Obstacle.tracking_fmap)
  return _internal_add_tracking_fmap();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::TrackingFeatureMap >&
Obstacle::tracking_fmap() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacle.tracking_fmap)
  return tracking_fmap_;
}

// -------------------------------------------------------------------

// Obstacles

// optional int32 cam_id = 1;
inline bool Obstacles::_internal_has_cam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Obstacles::has_cam_id() const {
  return _internal_has_cam_id();
}
inline void Obstacles::clear_cam_id() {
  cam_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacles::_internal_cam_id() const {
  return cam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacles::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacles.cam_id)
  return _internal_cam_id();
}
inline void Obstacles::_internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cam_id_ = value;
}
inline void Obstacles::set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cam_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacles.cam_id)
}

// repeated .CommonProto.Obstacle obstacle = 2;
inline int Obstacles::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int Obstacles::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void Obstacles::clear_obstacle() {
  obstacle_.Clear();
}
inline ::CommonProto::Obstacle* Obstacles::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.Obstacles.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacle >*
Obstacles::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.Obstacles.obstacle)
  return &obstacle_;
}
inline const ::CommonProto::Obstacle& Obstacles::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::CommonProto::Obstacle& Obstacles::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacles.obstacle)
  return _internal_obstacle(index);
}
inline ::CommonProto::Obstacle* Obstacles::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::CommonProto::Obstacle* Obstacles::add_obstacle() {
  // @@protoc_insertion_point(field_add:CommonProto.Obstacles.obstacle)
  return _internal_add_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Obstacle >&
Obstacles::obstacle() const {
  // @@protoc_insertion_point(field_list:CommonProto.Obstacles.obstacle)
  return obstacle_;
}

// optional float conf_scale = 3 [default = 0.1];
inline bool Obstacles::_internal_has_conf_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Obstacles::has_conf_scale() const {
  return _internal_has_conf_scale();
}
inline void Obstacles::clear_conf_scale() {
  conf_scale_ = 0.1f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Obstacles::_internal_conf_scale() const {
  return conf_scale_;
}
inline float Obstacles::conf_scale() const {
  // @@protoc_insertion_point(field_get:CommonProto.Obstacles.conf_scale)
  return _internal_conf_scale();
}
inline void Obstacles::_internal_set_conf_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  conf_scale_ = value;
}
inline void Obstacles::set_conf_scale(float value) {
  _internal_set_conf_scale(value);
  // @@protoc_insertion_point(field_set:CommonProto.Obstacles.conf_scale)
}

// -------------------------------------------------------------------

// FeatureMap

// required bytes data = 1;
inline bool FeatureMap::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureMap::has_data() const {
  return _internal_has_data();
}
inline void FeatureMap::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FeatureMap::data() const {
  // @@protoc_insertion_point(field_get:CommonProto.FeatureMap.data)
  return _internal_data();
}
inline void FeatureMap::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CommonProto.FeatureMap.data)
}
inline std::string* FeatureMap::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CommonProto.FeatureMap.data)
  return _internal_mutable_data();
}
inline const std::string& FeatureMap::_internal_data() const {
  return data_.Get();
}
inline void FeatureMap::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FeatureMap::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommonProto.FeatureMap.data)
}
inline void FeatureMap::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommonProto.FeatureMap.data)
}
inline void FeatureMap::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommonProto.FeatureMap.data)
}
inline std::string* FeatureMap::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FeatureMap::release_data() {
  // @@protoc_insertion_point(field_release:CommonProto.FeatureMap.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FeatureMap::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommonProto.FeatureMap.data)
}

// -------------------------------------------------------------------

// ObstacleRaw

// required .CommonProto.Rect rect = 1;
inline bool ObstacleRaw::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool ObstacleRaw::has_rect() const {
  return _internal_has_rect();
}
inline void ObstacleRaw::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CommonProto::Rect& ObstacleRaw::_internal_rect() const {
  const ::CommonProto::Rect* p = rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::Rect&>(
      ::CommonProto::_Rect_default_instance_);
}
inline const ::CommonProto::Rect& ObstacleRaw::rect() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.rect)
  return _internal_rect();
}
inline void ObstacleRaw::unsafe_arena_set_allocated_rect(
    ::CommonProto::Rect* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.ObstacleRaw.rect)
}
inline ::CommonProto::Rect* ObstacleRaw::release_rect() {
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Rect* temp = rect_;
  rect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::Rect* ObstacleRaw::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:CommonProto.ObstacleRaw.rect)
  _has_bits_[0] &= ~0x00000001u;
  ::CommonProto::Rect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::CommonProto::Rect* ObstacleRaw::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000001u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::Rect>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::CommonProto::Rect* ObstacleRaw::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaw.rect)
  return _internal_mutable_rect();
}
inline void ObstacleRaw::set_allocated_rect(::CommonProto::Rect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.ObstacleRaw.rect)
}

// required float conf = 2;
inline bool ObstacleRaw::_internal_has_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObstacleRaw::has_conf() const {
  return _internal_has_conf();
}
inline void ObstacleRaw::clear_conf() {
  conf_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ObstacleRaw::_internal_conf() const {
  return conf_;
}
inline float ObstacleRaw::conf() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.conf)
  return _internal_conf();
}
inline void ObstacleRaw::_internal_set_conf(float value) {
  _has_bits_[0] |= 0x00000002u;
  conf_ = value;
}
inline void ObstacleRaw::set_conf(float value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.conf)
}

// required int32 model = 3;
inline bool ObstacleRaw::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObstacleRaw::has_model() const {
  return _internal_has_model();
}
inline void ObstacleRaw::clear_model() {
  model_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::_internal_model() const {
  return model_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::model() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.model)
  return _internal_model();
}
inline void ObstacleRaw::_internal_set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  model_ = value;
}
inline void ObstacleRaw::set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.model)
}

// repeated int32 property = 6;
inline int ObstacleRaw::_internal_property_size() const {
  return property_.size();
}
inline int ObstacleRaw::property_size() const {
  return _internal_property_size();
}
inline void ObstacleRaw::clear_property() {
  property_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::_internal_property(int index) const {
  return property_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::property(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property)
  return _internal_property(index);
}
inline void ObstacleRaw::set_property(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property)
}
inline void ObstacleRaw::_internal_add_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_.Add(value);
}
inline void ObstacleRaw::add_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_property(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObstacleRaw::_internal_property() const {
  return property_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObstacleRaw::property() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property)
  return _internal_property();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObstacleRaw::_internal_mutable_property() {
  return &property_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObstacleRaw::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property)
  return _internal_mutable_property();
}

// repeated string property_name = 7;
inline int ObstacleRaw::_internal_property_name_size() const {
  return property_name_.size();
}
inline int ObstacleRaw::property_name_size() const {
  return _internal_property_name_size();
}
inline void ObstacleRaw::clear_property_name() {
  property_name_.Clear();
}
inline std::string* ObstacleRaw::add_property_name() {
  // @@protoc_insertion_point(field_add_mutable:CommonProto.ObstacleRaw.property_name)
  return _internal_add_property_name();
}
inline const std::string& ObstacleRaw::_internal_property_name(int index) const {
  return property_name_.Get(index);
}
inline const std::string& ObstacleRaw::property_name(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property_name)
  return _internal_property_name(index);
}
inline std::string* ObstacleRaw::mutable_property_name(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaw.property_name)
  return property_name_.Mutable(index);
}
inline void ObstacleRaw::set_property_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_name)
  property_name_.Mutable(index)->assign(value);
}
inline void ObstacleRaw::set_property_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_name)
  property_name_.Mutable(index)->assign(std::move(value));
}
inline void ObstacleRaw::set_property_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  property_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::set_property_name(int index, const char* value, size_t size) {
  property_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonProto.ObstacleRaw.property_name)
}
inline std::string* ObstacleRaw::_internal_add_property_name() {
  return property_name_.Add();
}
inline void ObstacleRaw::add_property_name(const std::string& value) {
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::add_property_name(std::string&& value) {
  property_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::add_property_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  property_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CommonProto.ObstacleRaw.property_name)
}
inline void ObstacleRaw::add_property_name(const char* value, size_t size) {
  property_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CommonProto.ObstacleRaw.property_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObstacleRaw::property_name() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property_name)
  return property_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObstacleRaw::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property_name)
  return &property_name_;
}

// repeated int32 property_type = 8;
inline int ObstacleRaw::_internal_property_type_size() const {
  return property_type_.size();
}
inline int ObstacleRaw::property_type_size() const {
  return _internal_property_type_size();
}
inline void ObstacleRaw::clear_property_type() {
  property_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::_internal_property_type(int index) const {
  return property_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaw::property_type(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property_type)
  return _internal_property_type(index);
}
inline void ObstacleRaw::set_property_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_type)
}
inline void ObstacleRaw::_internal_add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_type_.Add(value);
}
inline void ObstacleRaw::add_property_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_property_type(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObstacleRaw::_internal_property_type() const {
  return property_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObstacleRaw::property_type() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property_type)
  return _internal_property_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObstacleRaw::_internal_mutable_property_type() {
  return &property_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObstacleRaw::mutable_property_type() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property_type)
  return _internal_mutable_property_type();
}

// repeated float property_conf = 9;
inline int ObstacleRaw::_internal_property_conf_size() const {
  return property_conf_.size();
}
inline int ObstacleRaw::property_conf_size() const {
  return _internal_property_conf_size();
}
inline void ObstacleRaw::clear_property_conf() {
  property_conf_.Clear();
}
inline float ObstacleRaw::_internal_property_conf(int index) const {
  return property_conf_.Get(index);
}
inline float ObstacleRaw::property_conf(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaw.property_conf)
  return _internal_property_conf(index);
}
inline void ObstacleRaw::set_property_conf(int index, float value) {
  property_conf_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaw.property_conf)
}
inline void ObstacleRaw::_internal_add_property_conf(float value) {
  property_conf_.Add(value);
}
inline void ObstacleRaw::add_property_conf(float value) {
  _internal_add_property_conf(value);
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaw.property_conf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObstacleRaw::_internal_property_conf() const {
  return property_conf_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObstacleRaw::property_conf() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaw.property_conf)
  return _internal_property_conf();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObstacleRaw::_internal_mutable_property_conf() {
  return &property_conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObstacleRaw::mutable_property_conf() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaw.property_conf)
  return _internal_mutable_property_conf();
}

// -------------------------------------------------------------------

// ObstacleRaws

// optional int32 cam_id = 1;
inline bool ObstacleRaws::_internal_has_cam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObstacleRaws::has_cam_id() const {
  return _internal_has_cam_id();
}
inline void ObstacleRaws::clear_cam_id() {
  cam_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaws::_internal_cam_id() const {
  return cam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRaws::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.cam_id)
  return _internal_cam_id();
}
inline void ObstacleRaws::_internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cam_id_ = value;
}
inline void ObstacleRaws::set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cam_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaws.cam_id)
}

// repeated .CommonProto.ObstacleRaw obstacle = 2;
inline int ObstacleRaws::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int ObstacleRaws::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void ObstacleRaws::clear_obstacle() {
  obstacle_.Clear();
}
inline ::CommonProto::ObstacleRaw* ObstacleRaws::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ObstacleRaws.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
ObstacleRaws::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ObstacleRaws.obstacle)
  return &obstacle_;
}
inline const ::CommonProto::ObstacleRaw& ObstacleRaws::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::CommonProto::ObstacleRaw& ObstacleRaws::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.obstacle)
  return _internal_obstacle(index);
}
inline ::CommonProto::ObstacleRaw* ObstacleRaws::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::CommonProto::ObstacleRaw* ObstacleRaws::add_obstacle() {
  // @@protoc_insertion_point(field_add:CommonProto.ObstacleRaws.obstacle)
  return _internal_add_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
ObstacleRaws::obstacle() const {
  // @@protoc_insertion_point(field_list:CommonProto.ObstacleRaws.obstacle)
  return obstacle_;
}

// optional float conf_scale = 3 [default = 0.1];
inline bool ObstacleRaws::_internal_has_conf_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObstacleRaws::has_conf_scale() const {
  return _internal_has_conf_scale();
}
inline void ObstacleRaws::clear_conf_scale() {
  conf_scale_ = 0.1f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ObstacleRaws::_internal_conf_scale() const {
  return conf_scale_;
}
inline float ObstacleRaws::conf_scale() const {
  // @@protoc_insertion_point(field_get:CommonProto.ObstacleRaws.conf_scale)
  return _internal_conf_scale();
}
inline void ObstacleRaws::_internal_set_conf_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  conf_scale_ = value;
}
inline void ObstacleRaws::set_conf_scale(float value) {
  _internal_set_conf_scale(value);
  // @@protoc_insertion_point(field_set:CommonProto.ObstacleRaws.conf_scale)
}

// -------------------------------------------------------------------

// FreeSpacePoints

// repeated int32 property = 3;
inline int FreeSpacePoints::_internal_property_size() const {
  return property_.size();
}
inline int FreeSpacePoints::property_size() const {
  return _internal_property_size();
}
inline void FreeSpacePoints::clear_property() {
  property_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreeSpacePoints::_internal_property(int index) const {
  return property_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreeSpacePoints::property(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.FreeSpacePoints.property)
  return _internal_property(index);
}
inline void FreeSpacePoints::set_property(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.FreeSpacePoints.property)
}
inline void FreeSpacePoints::_internal_add_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  property_.Add(value);
}
inline void FreeSpacePoints::add_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_property(value);
  // @@protoc_insertion_point(field_add:CommonProto.FreeSpacePoints.property)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FreeSpacePoints::_internal_property() const {
  return property_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FreeSpacePoints::property() const {
  // @@protoc_insertion_point(field_list:CommonProto.FreeSpacePoints.property)
  return _internal_property();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FreeSpacePoints::_internal_mutable_property() {
  return &property_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FreeSpacePoints::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.FreeSpacePoints.property)
  return _internal_mutable_property();
}

// optional int32 cam_id = 4;
inline bool FreeSpacePoints::_internal_has_cam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FreeSpacePoints::has_cam_id() const {
  return _internal_has_cam_id();
}
inline void FreeSpacePoints::clear_cam_id() {
  cam_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreeSpacePoints::_internal_cam_id() const {
  return cam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreeSpacePoints::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.FreeSpacePoints.cam_id)
  return _internal_cam_id();
}
inline void FreeSpacePoints::_internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cam_id_ = value;
}
inline void FreeSpacePoints::set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cam_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.FreeSpacePoints.cam_id)
}

// repeated .CommonProto.Point pts_vcs = 5;
inline int FreeSpacePoints::_internal_pts_vcs_size() const {
  return pts_vcs_.size();
}
inline int FreeSpacePoints::pts_vcs_size() const {
  return _internal_pts_vcs_size();
}
inline void FreeSpacePoints::clear_pts_vcs() {
  pts_vcs_.Clear();
}
inline ::CommonProto::Point* FreeSpacePoints::mutable_pts_vcs(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.FreeSpacePoints.pts_vcs)
  return pts_vcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
FreeSpacePoints::mutable_pts_vcs() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.FreeSpacePoints.pts_vcs)
  return &pts_vcs_;
}
inline const ::CommonProto::Point& FreeSpacePoints::_internal_pts_vcs(int index) const {
  return pts_vcs_.Get(index);
}
inline const ::CommonProto::Point& FreeSpacePoints::pts_vcs(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.FreeSpacePoints.pts_vcs)
  return _internal_pts_vcs(index);
}
inline ::CommonProto::Point* FreeSpacePoints::_internal_add_pts_vcs() {
  return pts_vcs_.Add();
}
inline ::CommonProto::Point* FreeSpacePoints::add_pts_vcs() {
  // @@protoc_insertion_point(field_add:CommonProto.FreeSpacePoints.pts_vcs)
  return _internal_add_pts_vcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
FreeSpacePoints::pts_vcs() const {
  // @@protoc_insertion_point(field_list:CommonProto.FreeSpacePoints.pts_vcs)
  return pts_vcs_;
}

// repeated .CommonProto.Point pts_img = 6;
inline int FreeSpacePoints::_internal_pts_img_size() const {
  return pts_img_.size();
}
inline int FreeSpacePoints::pts_img_size() const {
  return _internal_pts_img_size();
}
inline void FreeSpacePoints::clear_pts_img() {
  pts_img_.Clear();
}
inline ::CommonProto::Point* FreeSpacePoints::mutable_pts_img(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.FreeSpacePoints.pts_img)
  return pts_img_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >*
FreeSpacePoints::mutable_pts_img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.FreeSpacePoints.pts_img)
  return &pts_img_;
}
inline const ::CommonProto::Point& FreeSpacePoints::_internal_pts_img(int index) const {
  return pts_img_.Get(index);
}
inline const ::CommonProto::Point& FreeSpacePoints::pts_img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.FreeSpacePoints.pts_img)
  return _internal_pts_img(index);
}
inline ::CommonProto::Point* FreeSpacePoints::_internal_add_pts_img() {
  return pts_img_.Add();
}
inline ::CommonProto::Point* FreeSpacePoints::add_pts_img() {
  // @@protoc_insertion_point(field_add:CommonProto.FreeSpacePoints.pts_img)
  return _internal_add_pts_img();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Point >&
FreeSpacePoints::pts_img() const {
  // @@protoc_insertion_point(field_list:CommonProto.FreeSpacePoints.pts_img)
  return pts_img_;
}

// -------------------------------------------------------------------

// CameraMatrix

// repeated float mat_gnd2img = 1;
inline int CameraMatrix::_internal_mat_gnd2img_size() const {
  return mat_gnd2img_.size();
}
inline int CameraMatrix::mat_gnd2img_size() const {
  return _internal_mat_gnd2img_size();
}
inline void CameraMatrix::clear_mat_gnd2img() {
  mat_gnd2img_.Clear();
}
inline float CameraMatrix::_internal_mat_gnd2img(int index) const {
  return mat_gnd2img_.Get(index);
}
inline float CameraMatrix::mat_gnd2img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_gnd2img)
  return _internal_mat_gnd2img(index);
}
inline void CameraMatrix::set_mat_gnd2img(int index, float value) {
  mat_gnd2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_gnd2img)
}
inline void CameraMatrix::_internal_add_mat_gnd2img(float value) {
  mat_gnd2img_.Add(value);
}
inline void CameraMatrix::add_mat_gnd2img(float value) {
  _internal_add_mat_gnd2img(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_gnd2img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::_internal_mat_gnd2img() const {
  return mat_gnd2img_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_gnd2img() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_gnd2img)
  return _internal_mat_gnd2img();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::_internal_mutable_mat_gnd2img() {
  return &mat_gnd2img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_gnd2img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_gnd2img)
  return _internal_mutable_mat_gnd2img();
}

// repeated float mat_img2gnd = 2;
inline int CameraMatrix::_internal_mat_img2gnd_size() const {
  return mat_img2gnd_.size();
}
inline int CameraMatrix::mat_img2gnd_size() const {
  return _internal_mat_img2gnd_size();
}
inline void CameraMatrix::clear_mat_img2gnd() {
  mat_img2gnd_.Clear();
}
inline float CameraMatrix::_internal_mat_img2gnd(int index) const {
  return mat_img2gnd_.Get(index);
}
inline float CameraMatrix::mat_img2gnd(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_img2gnd)
  return _internal_mat_img2gnd(index);
}
inline void CameraMatrix::set_mat_img2gnd(int index, float value) {
  mat_img2gnd_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_img2gnd)
}
inline void CameraMatrix::_internal_add_mat_img2gnd(float value) {
  mat_img2gnd_.Add(value);
}
inline void CameraMatrix::add_mat_img2gnd(float value) {
  _internal_add_mat_img2gnd(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_img2gnd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::_internal_mat_img2gnd() const {
  return mat_img2gnd_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_img2gnd() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_img2gnd)
  return _internal_mat_img2gnd();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::_internal_mutable_mat_img2gnd() {
  return &mat_img2gnd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_img2gnd() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_img2gnd)
  return _internal_mutable_mat_img2gnd();
}

// repeated float mat_vcsgnd2img = 3;
inline int CameraMatrix::_internal_mat_vcsgnd2img_size() const {
  return mat_vcsgnd2img_.size();
}
inline int CameraMatrix::mat_vcsgnd2img_size() const {
  return _internal_mat_vcsgnd2img_size();
}
inline void CameraMatrix::clear_mat_vcsgnd2img() {
  mat_vcsgnd2img_.Clear();
}
inline float CameraMatrix::_internal_mat_vcsgnd2img(int index) const {
  return mat_vcsgnd2img_.Get(index);
}
inline float CameraMatrix::mat_vcsgnd2img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return _internal_mat_vcsgnd2img(index);
}
inline void CameraMatrix::set_mat_vcsgnd2img(int index, float value) {
  mat_vcsgnd2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_vcsgnd2img)
}
inline void CameraMatrix::_internal_add_mat_vcsgnd2img(float value) {
  mat_vcsgnd2img_.Add(value);
}
inline void CameraMatrix::add_mat_vcsgnd2img(float value) {
  _internal_add_mat_vcsgnd2img(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_vcsgnd2img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::_internal_mat_vcsgnd2img() const {
  return mat_vcsgnd2img_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_vcsgnd2img() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return _internal_mat_vcsgnd2img();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::_internal_mutable_mat_vcsgnd2img() {
  return &mat_vcsgnd2img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_vcsgnd2img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_vcsgnd2img)
  return _internal_mutable_mat_vcsgnd2img();
}

// repeated float mat_img2vcsgnd = 4;
inline int CameraMatrix::_internal_mat_img2vcsgnd_size() const {
  return mat_img2vcsgnd_.size();
}
inline int CameraMatrix::mat_img2vcsgnd_size() const {
  return _internal_mat_img2vcsgnd_size();
}
inline void CameraMatrix::clear_mat_img2vcsgnd() {
  mat_img2vcsgnd_.Clear();
}
inline float CameraMatrix::_internal_mat_img2vcsgnd(int index) const {
  return mat_img2vcsgnd_.Get(index);
}
inline float CameraMatrix::mat_img2vcsgnd(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return _internal_mat_img2vcsgnd(index);
}
inline void CameraMatrix::set_mat_img2vcsgnd(int index, float value) {
  mat_img2vcsgnd_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_img2vcsgnd)
}
inline void CameraMatrix::_internal_add_mat_img2vcsgnd(float value) {
  mat_img2vcsgnd_.Add(value);
}
inline void CameraMatrix::add_mat_img2vcsgnd(float value) {
  _internal_add_mat_img2vcsgnd(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_img2vcsgnd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::_internal_mat_img2vcsgnd() const {
  return mat_img2vcsgnd_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_img2vcsgnd() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return _internal_mat_img2vcsgnd();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::_internal_mutable_mat_img2vcsgnd() {
  return &mat_img2vcsgnd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_img2vcsgnd() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_img2vcsgnd)
  return _internal_mutable_mat_img2vcsgnd();
}

// repeated float mat_local2img = 5;
inline int CameraMatrix::_internal_mat_local2img_size() const {
  return mat_local2img_.size();
}
inline int CameraMatrix::mat_local2img_size() const {
  return _internal_mat_local2img_size();
}
inline void CameraMatrix::clear_mat_local2img() {
  mat_local2img_.Clear();
}
inline float CameraMatrix::_internal_mat_local2img(int index) const {
  return mat_local2img_.Get(index);
}
inline float CameraMatrix::mat_local2img(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_local2img)
  return _internal_mat_local2img(index);
}
inline void CameraMatrix::set_mat_local2img(int index, float value) {
  mat_local2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_local2img)
}
inline void CameraMatrix::_internal_add_mat_local2img(float value) {
  mat_local2img_.Add(value);
}
inline void CameraMatrix::add_mat_local2img(float value) {
  _internal_add_mat_local2img(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_local2img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::_internal_mat_local2img() const {
  return mat_local2img_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_local2img() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_local2img)
  return _internal_mat_local2img();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::_internal_mutable_mat_local2img() {
  return &mat_local2img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_local2img() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_local2img)
  return _internal_mutable_mat_local2img();
}

// repeated float mat_img2local = 6;
inline int CameraMatrix::_internal_mat_img2local_size() const {
  return mat_img2local_.size();
}
inline int CameraMatrix::mat_img2local_size() const {
  return _internal_mat_img2local_size();
}
inline void CameraMatrix::clear_mat_img2local() {
  mat_img2local_.Clear();
}
inline float CameraMatrix::_internal_mat_img2local(int index) const {
  return mat_img2local_.Get(index);
}
inline float CameraMatrix::mat_img2local(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraMatrix.mat_img2local)
  return _internal_mat_img2local(index);
}
inline void CameraMatrix::set_mat_img2local(int index, float value) {
  mat_img2local_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraMatrix.mat_img2local)
}
inline void CameraMatrix::_internal_add_mat_img2local(float value) {
  mat_img2local_.Add(value);
}
inline void CameraMatrix::add_mat_img2local(float value) {
  _internal_add_mat_img2local(value);
  // @@protoc_insertion_point(field_add:CommonProto.CameraMatrix.mat_img2local)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::_internal_mat_img2local() const {
  return mat_img2local_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMatrix::mat_img2local() const {
  // @@protoc_insertion_point(field_list:CommonProto.CameraMatrix.mat_img2local)
  return _internal_mat_img2local();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::_internal_mutable_mat_img2local() {
  return &mat_img2local_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMatrix::mutable_mat_img2local() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.CameraMatrix.mat_img2local)
  return _internal_mutable_mat_img2local();
}

// -------------------------------------------------------------------

// DistortParam

// repeated float param = 1;
inline int DistortParam::_internal_param_size() const {
  return param_.size();
}
inline int DistortParam::param_size() const {
  return _internal_param_size();
}
inline void DistortParam::clear_param() {
  param_.Clear();
}
inline float DistortParam::_internal_param(int index) const {
  return param_.Get(index);
}
inline float DistortParam::param(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.DistortParam.param)
  return _internal_param(index);
}
inline void DistortParam::set_param(int index, float value) {
  param_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.DistortParam.param)
}
inline void DistortParam::_internal_add_param(float value) {
  param_.Add(value);
}
inline void DistortParam::add_param(float value) {
  _internal_add_param(value);
  // @@protoc_insertion_point(field_add:CommonProto.DistortParam.param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DistortParam::_internal_param() const {
  return param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DistortParam::param() const {
  // @@protoc_insertion_point(field_list:CommonProto.DistortParam.param)
  return _internal_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DistortParam::_internal_mutable_param() {
  return &param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DistortParam::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.DistortParam.param)
  return _internal_mutable_param();
}

// -------------------------------------------------------------------

// VCSParam

// repeated float rotation = 1;
inline int VCSParam::_internal_rotation_size() const {
  return rotation_.size();
}
inline int VCSParam::rotation_size() const {
  return _internal_rotation_size();
}
inline void VCSParam::clear_rotation() {
  rotation_.Clear();
}
inline float VCSParam::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline float VCSParam::rotation(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.VCSParam.rotation)
  return _internal_rotation(index);
}
inline void VCSParam::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.VCSParam.rotation)
}
inline void VCSParam::_internal_add_rotation(float value) {
  rotation_.Add(value);
}
inline void VCSParam::add_rotation(float value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:CommonProto.VCSParam.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VCSParam::_internal_rotation() const {
  return rotation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VCSParam::rotation() const {
  // @@protoc_insertion_point(field_list:CommonProto.VCSParam.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VCSParam::_internal_mutable_rotation() {
  return &rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VCSParam::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.VCSParam.rotation)
  return _internal_mutable_rotation();
}

// repeated float translation = 2;
inline int VCSParam::_internal_translation_size() const {
  return translation_.size();
}
inline int VCSParam::translation_size() const {
  return _internal_translation_size();
}
inline void VCSParam::clear_translation() {
  translation_.Clear();
}
inline float VCSParam::_internal_translation(int index) const {
  return translation_.Get(index);
}
inline float VCSParam::translation(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.VCSParam.translation)
  return _internal_translation(index);
}
inline void VCSParam::set_translation(int index, float value) {
  translation_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.VCSParam.translation)
}
inline void VCSParam::_internal_add_translation(float value) {
  translation_.Add(value);
}
inline void VCSParam::add_translation(float value) {
  _internal_add_translation(value);
  // @@protoc_insertion_point(field_add:CommonProto.VCSParam.translation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VCSParam::_internal_translation() const {
  return translation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VCSParam::translation() const {
  // @@protoc_insertion_point(field_list:CommonProto.VCSParam.translation)
  return _internal_translation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VCSParam::_internal_mutable_translation() {
  return &translation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VCSParam::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.VCSParam.translation)
  return _internal_mutable_translation();
}

// -------------------------------------------------------------------

// CameraParam

// required float focal_u = 1;
inline bool CameraParam::_internal_has_focal_u() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CameraParam::has_focal_u() const {
  return _internal_has_focal_u();
}
inline void CameraParam::clear_focal_u() {
  focal_u_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CameraParam::_internal_focal_u() const {
  return focal_u_;
}
inline float CameraParam::focal_u() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.focal_u)
  return _internal_focal_u();
}
inline void CameraParam::_internal_set_focal_u(float value) {
  _has_bits_[0] |= 0x00000010u;
  focal_u_ = value;
}
inline void CameraParam::set_focal_u(float value) {
  _internal_set_focal_u(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.focal_u)
}

// required float focal_v = 2;
inline bool CameraParam::_internal_has_focal_v() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CameraParam::has_focal_v() const {
  return _internal_has_focal_v();
}
inline void CameraParam::clear_focal_v() {
  focal_v_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CameraParam::_internal_focal_v() const {
  return focal_v_;
}
inline float CameraParam::focal_v() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.focal_v)
  return _internal_focal_v();
}
inline void CameraParam::_internal_set_focal_v(float value) {
  _has_bits_[0] |= 0x00000020u;
  focal_v_ = value;
}
inline void CameraParam::set_focal_v(float value) {
  _internal_set_focal_v(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.focal_v)
}

// required float center_u = 3;
inline bool CameraParam::_internal_has_center_u() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CameraParam::has_center_u() const {
  return _internal_has_center_u();
}
inline void CameraParam::clear_center_u() {
  center_u_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CameraParam::_internal_center_u() const {
  return center_u_;
}
inline float CameraParam::center_u() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.center_u)
  return _internal_center_u();
}
inline void CameraParam::_internal_set_center_u(float value) {
  _has_bits_[0] |= 0x00000040u;
  center_u_ = value;
}
inline void CameraParam::set_center_u(float value) {
  _internal_set_center_u(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.center_u)
}

// required float center_v = 4;
inline bool CameraParam::_internal_has_center_v() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CameraParam::has_center_v() const {
  return _internal_has_center_v();
}
inline void CameraParam::clear_center_v() {
  center_v_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CameraParam::_internal_center_v() const {
  return center_v_;
}
inline float CameraParam::center_v() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.center_v)
  return _internal_center_v();
}
inline void CameraParam::_internal_set_center_v(float value) {
  _has_bits_[0] |= 0x00000080u;
  center_v_ = value;
}
inline void CameraParam::set_center_v(float value) {
  _internal_set_center_v(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.center_v)
}

// required float camera_x = 5;
inline bool CameraParam::_internal_has_camera_x() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CameraParam::has_camera_x() const {
  return _internal_has_camera_x();
}
inline void CameraParam::clear_camera_x() {
  camera_x_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CameraParam::_internal_camera_x() const {
  return camera_x_;
}
inline float CameraParam::camera_x() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_x)
  return _internal_camera_x();
}
inline void CameraParam::_internal_set_camera_x(float value) {
  _has_bits_[0] |= 0x00000100u;
  camera_x_ = value;
}
inline void CameraParam::set_camera_x(float value) {
  _internal_set_camera_x(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_x)
}

// required float camera_y = 6;
inline bool CameraParam::_internal_has_camera_y() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CameraParam::has_camera_y() const {
  return _internal_has_camera_y();
}
inline void CameraParam::clear_camera_y() {
  camera_y_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CameraParam::_internal_camera_y() const {
  return camera_y_;
}
inline float CameraParam::camera_y() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_y)
  return _internal_camera_y();
}
inline void CameraParam::_internal_set_camera_y(float value) {
  _has_bits_[0] |= 0x00000200u;
  camera_y_ = value;
}
inline void CameraParam::set_camera_y(float value) {
  _internal_set_camera_y(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_y)
}

// required float camera_z = 7;
inline bool CameraParam::_internal_has_camera_z() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CameraParam::has_camera_z() const {
  return _internal_has_camera_z();
}
inline void CameraParam::clear_camera_z() {
  camera_z_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CameraParam::_internal_camera_z() const {
  return camera_z_;
}
inline float CameraParam::camera_z() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.camera_z)
  return _internal_camera_z();
}
inline void CameraParam::_internal_set_camera_z(float value) {
  _has_bits_[0] |= 0x00000400u;
  camera_z_ = value;
}
inline void CameraParam::set_camera_z(float value) {
  _internal_set_camera_z(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.camera_z)
}

// required float pitch = 8;
inline bool CameraParam::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CameraParam::has_pitch() const {
  return _internal_has_pitch();
}
inline void CameraParam::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CameraParam::_internal_pitch() const {
  return pitch_;
}
inline float CameraParam::pitch() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.pitch)
  return _internal_pitch();
}
inline void CameraParam::_internal_set_pitch(float value) {
  _has_bits_[0] |= 0x00000800u;
  pitch_ = value;
}
inline void CameraParam::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.pitch)
}

// required float yaw = 9;
inline bool CameraParam::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CameraParam::has_yaw() const {
  return _internal_has_yaw();
}
inline void CameraParam::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float CameraParam::_internal_yaw() const {
  return yaw_;
}
inline float CameraParam::yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.yaw)
  return _internal_yaw();
}
inline void CameraParam::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00001000u;
  yaw_ = value;
}
inline void CameraParam::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.yaw)
}

// required float roll = 10;
inline bool CameraParam::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CameraParam::has_roll() const {
  return _internal_has_roll();
}
inline void CameraParam::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CameraParam::_internal_roll() const {
  return roll_;
}
inline float CameraParam::roll() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.roll)
  return _internal_roll();
}
inline void CameraParam::_internal_set_roll(float value) {
  _has_bits_[0] |= 0x00002000u;
  roll_ = value;
}
inline void CameraParam::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.roll)
}

// optional int32 type = 11 [default = 0];
inline bool CameraParam::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CameraParam::has_type() const {
  return _internal_has_type();
}
inline void CameraParam::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.type)
  return _internal_type();
}
inline void CameraParam::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  type_ = value;
}
inline void CameraParam::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.type)
}

// optional float fov = 12;
inline bool CameraParam::_internal_has_fov() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CameraParam::has_fov() const {
  return _internal_has_fov();
}
inline void CameraParam::clear_fov() {
  fov_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CameraParam::_internal_fov() const {
  return fov_;
}
inline float CameraParam::fov() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.fov)
  return _internal_fov();
}
inline void CameraParam::_internal_set_fov(float value) {
  _has_bits_[0] |= 0x00008000u;
  fov_ = value;
}
inline void CameraParam::set_fov(float value) {
  _internal_set_fov(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.fov)
}

// optional int32 version = 13 [default = 0];
inline bool CameraParam::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CameraParam::has_version() const {
  return _internal_has_version();
}
inline void CameraParam::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::version() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.version)
  return _internal_version();
}
inline void CameraParam::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  version_ = value;
}
inline void CameraParam::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.version)
}

// optional .CommonProto.CalibrationStatus cali_status = 14;
inline bool CameraParam::_internal_has_cali_status() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CameraParam::has_cali_status() const {
  return _internal_has_cali_status();
}
inline void CameraParam::clear_cali_status() {
  cali_status_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::CommonProto::CalibrationStatus CameraParam::_internal_cali_status() const {
  return static_cast< ::CommonProto::CalibrationStatus >(cali_status_);
}
inline ::CommonProto::CalibrationStatus CameraParam::cali_status() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.cali_status)
  return _internal_cali_status();
}
inline void CameraParam::_internal_set_cali_status(::CommonProto::CalibrationStatus value) {
  assert(::CommonProto::CalibrationStatus_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  cali_status_ = value;
}
inline void CameraParam::set_cali_status(::CommonProto::CalibrationStatus value) {
  _internal_set_cali_status(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.cali_status)
}

// optional .CommonProto.DistortParam distort = 20;
inline bool CameraParam::_internal_has_distort() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || distort_ != nullptr);
  return value;
}
inline bool CameraParam::has_distort() const {
  return _internal_has_distort();
}
inline void CameraParam::clear_distort() {
  if (distort_ != nullptr) distort_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommonProto::DistortParam& CameraParam::_internal_distort() const {
  const ::CommonProto::DistortParam* p = distort_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::DistortParam&>(
      ::CommonProto::_DistortParam_default_instance_);
}
inline const ::CommonProto::DistortParam& CameraParam::distort() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.distort)
  return _internal_distort();
}
inline void CameraParam::unsafe_arena_set_allocated_distort(
    ::CommonProto::DistortParam* distort) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distort_);
  }
  distort_ = distort;
  if (distort) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.CameraParam.distort)
}
inline ::CommonProto::DistortParam* CameraParam::release_distort() {
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::DistortParam* temp = distort_;
  distort_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::DistortParam* CameraParam::unsafe_arena_release_distort() {
  // @@protoc_insertion_point(field_release:CommonProto.CameraParam.distort)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::DistortParam* temp = distort_;
  distort_ = nullptr;
  return temp;
}
inline ::CommonProto::DistortParam* CameraParam::_internal_mutable_distort() {
  _has_bits_[0] |= 0x00000002u;
  if (distort_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::DistortParam>(GetArena());
    distort_ = p;
  }
  return distort_;
}
inline ::CommonProto::DistortParam* CameraParam::mutable_distort() {
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.distort)
  return _internal_mutable_distort();
}
inline void CameraParam::set_allocated_distort(::CommonProto::DistortParam* distort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete distort_;
  }
  if (distort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(distort);
    if (message_arena != submessage_arena) {
      distort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distort, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  distort_ = distort;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.distort)
}

// optional .CommonProto.VCSParam vcs = 21;
inline bool CameraParam::_internal_has_vcs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vcs_ != nullptr);
  return value;
}
inline bool CameraParam::has_vcs() const {
  return _internal_has_vcs();
}
inline void CameraParam::clear_vcs() {
  if (vcs_ != nullptr) vcs_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CommonProto::VCSParam& CameraParam::_internal_vcs() const {
  const ::CommonProto::VCSParam* p = vcs_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::VCSParam&>(
      ::CommonProto::_VCSParam_default_instance_);
}
inline const ::CommonProto::VCSParam& CameraParam::vcs() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.vcs)
  return _internal_vcs();
}
inline void CameraParam::unsafe_arena_set_allocated_vcs(
    ::CommonProto::VCSParam* vcs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vcs_);
  }
  vcs_ = vcs;
  if (vcs) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.CameraParam.vcs)
}
inline ::CommonProto::VCSParam* CameraParam::release_vcs() {
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::VCSParam* temp = vcs_;
  vcs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::VCSParam* CameraParam::unsafe_arena_release_vcs() {
  // @@protoc_insertion_point(field_release:CommonProto.CameraParam.vcs)
  _has_bits_[0] &= ~0x00000004u;
  ::CommonProto::VCSParam* temp = vcs_;
  vcs_ = nullptr;
  return temp;
}
inline ::CommonProto::VCSParam* CameraParam::_internal_mutable_vcs() {
  _has_bits_[0] |= 0x00000004u;
  if (vcs_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::VCSParam>(GetArena());
    vcs_ = p;
  }
  return vcs_;
}
inline ::CommonProto::VCSParam* CameraParam::mutable_vcs() {
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.vcs)
  return _internal_mutable_vcs();
}
inline void CameraParam::set_allocated_vcs(::CommonProto::VCSParam* vcs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vcs_;
  }
  if (vcs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vcs);
    if (message_arena != submessage_arena) {
      vcs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vcs_ = vcs;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.vcs)
}

// optional .CommonProto.CameraMatrix mat = 30;
inline bool CameraParam::_internal_has_mat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || mat_ != nullptr);
  return value;
}
inline bool CameraParam::has_mat() const {
  return _internal_has_mat();
}
inline void CameraParam::clear_mat() {
  if (mat_ != nullptr) mat_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CommonProto::CameraMatrix& CameraParam::_internal_mat() const {
  const ::CommonProto::CameraMatrix* p = mat_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::CameraMatrix&>(
      ::CommonProto::_CameraMatrix_default_instance_);
}
inline const ::CommonProto::CameraMatrix& CameraParam::mat() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.mat)
  return _internal_mat();
}
inline void CameraParam::unsafe_arena_set_allocated_mat(
    ::CommonProto::CameraMatrix* mat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mat_);
  }
  mat_ = mat;
  if (mat) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.CameraParam.mat)
}
inline ::CommonProto::CameraMatrix* CameraParam::release_mat() {
  _has_bits_[0] &= ~0x00000008u;
  ::CommonProto::CameraMatrix* temp = mat_;
  mat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::CameraMatrix* CameraParam::unsafe_arena_release_mat() {
  // @@protoc_insertion_point(field_release:CommonProto.CameraParam.mat)
  _has_bits_[0] &= ~0x00000008u;
  ::CommonProto::CameraMatrix* temp = mat_;
  mat_ = nullptr;
  return temp;
}
inline ::CommonProto::CameraMatrix* CameraParam::_internal_mutable_mat() {
  _has_bits_[0] |= 0x00000008u;
  if (mat_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::CameraMatrix>(GetArena());
    mat_ = p;
  }
  return mat_;
}
inline ::CommonProto::CameraMatrix* CameraParam::mutable_mat() {
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.mat)
  return _internal_mutable_mat();
}
inline void CameraParam::set_allocated_mat(::CommonProto::CameraMatrix* mat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mat_;
  }
  if (mat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mat);
    if (message_arena != submessage_arena) {
      mat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mat_ = mat;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.mat)
}

// optional string vendor = 50;
inline bool CameraParam::_internal_has_vendor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraParam::has_vendor() const {
  return _internal_has_vendor();
}
inline void CameraParam::clear_vendor() {
  vendor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraParam::vendor() const {
  // @@protoc_insertion_point(field_get:CommonProto.CameraParam.vendor)
  return _internal_vendor();
}
inline void CameraParam::set_vendor(const std::string& value) {
  _internal_set_vendor(value);
  // @@protoc_insertion_point(field_set:CommonProto.CameraParam.vendor)
}
inline std::string* CameraParam::mutable_vendor() {
  // @@protoc_insertion_point(field_mutable:CommonProto.CameraParam.vendor)
  return _internal_mutable_vendor();
}
inline const std::string& CameraParam::_internal_vendor() const {
  return vendor_.Get();
}
inline void CameraParam::_internal_set_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CameraParam::set_vendor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommonProto.CameraParam.vendor)
}
inline void CameraParam::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommonProto.CameraParam.vendor)
}
inline void CameraParam::set_vendor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommonProto.CameraParam.vendor)
}
inline std::string* CameraParam::_internal_mutable_vendor() {
  _has_bits_[0] |= 0x00000001u;
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CameraParam::release_vendor() {
  // @@protoc_insertion_point(field_release:CommonProto.CameraParam.vendor)
  if (!_internal_has_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vendor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraParam::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommonProto.CameraParam.vendor)
}

// -------------------------------------------------------------------

// MotionFrame

// required float speed = 1;
inline bool MotionFrame::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MotionFrame::has_speed() const {
  return _internal_has_speed();
}
inline void MotionFrame::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MotionFrame::_internal_speed() const {
  return speed_;
}
inline float MotionFrame::speed() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.speed)
  return _internal_speed();
}
inline void MotionFrame::_internal_set_speed(float value) {
  _has_bits_[0] |= 0x00000001u;
  speed_ = value;
}
inline void MotionFrame::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.speed)
}

// optional float acc = 2;
inline bool MotionFrame::_internal_has_acc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MotionFrame::has_acc() const {
  return _internal_has_acc();
}
inline void MotionFrame::clear_acc() {
  acc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MotionFrame::_internal_acc() const {
  return acc_;
}
inline float MotionFrame::acc() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.acc)
  return _internal_acc();
}
inline void MotionFrame::_internal_set_acc(float value) {
  _has_bits_[0] |= 0x00000002u;
  acc_ = value;
}
inline void MotionFrame::set_acc(float value) {
  _internal_set_acc(value);
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.acc)
}

// required float yaw_rate = 3;
inline bool MotionFrame::_internal_has_yaw_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MotionFrame::has_yaw_rate() const {
  return _internal_has_yaw_rate();
}
inline void MotionFrame::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MotionFrame::_internal_yaw_rate() const {
  return yaw_rate_;
}
inline float MotionFrame::yaw_rate() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.yaw_rate)
  return _internal_yaw_rate();
}
inline void MotionFrame::_internal_set_yaw_rate(float value) {
  _has_bits_[0] |= 0x00000008u;
  yaw_rate_ = value;
}
inline void MotionFrame::set_yaw_rate(float value) {
  _internal_set_yaw_rate(value);
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.yaw_rate)
}

// required int64 time_stamp = 4;
inline bool MotionFrame::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MotionFrame::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void MotionFrame::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MotionFrame::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MotionFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.time_stamp)
  return _internal_time_stamp();
}
inline void MotionFrame::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_stamp_ = value;
}
inline void MotionFrame::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.time_stamp)
}

// optional float turning_radius = 5;
inline bool MotionFrame::_internal_has_turning_radius() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MotionFrame::has_turning_radius() const {
  return _internal_has_turning_radius();
}
inline void MotionFrame::clear_turning_radius() {
  turning_radius_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MotionFrame::_internal_turning_radius() const {
  return turning_radius_;
}
inline float MotionFrame::turning_radius() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.turning_radius)
  return _internal_turning_radius();
}
inline void MotionFrame::_internal_set_turning_radius(float value) {
  _has_bits_[0] |= 0x00000010u;
  turning_radius_ = value;
}
inline void MotionFrame::set_turning_radius(float value) {
  _internal_set_turning_radius(value);
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.turning_radius)
}

// optional bool is_stable = 6;
inline bool MotionFrame::_internal_has_is_stable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MotionFrame::has_is_stable() const {
  return _internal_has_is_stable();
}
inline void MotionFrame::clear_is_stable() {
  is_stable_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool MotionFrame::_internal_is_stable() const {
  return is_stable_;
}
inline bool MotionFrame::is_stable() const {
  // @@protoc_insertion_point(field_get:CommonProto.MotionFrame.is_stable)
  return _internal_is_stable();
}
inline void MotionFrame::_internal_set_is_stable(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_stable_ = value;
}
inline void MotionFrame::set_is_stable(bool value) {
  _internal_set_is_stable(value);
  // @@protoc_insertion_point(field_set:CommonProto.MotionFrame.is_stable)
}

// -------------------------------------------------------------------

// OdometryFrame

// required float x = 1;
inline bool OdometryFrame::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OdometryFrame::has_x() const {
  return _internal_has_x();
}
inline void OdometryFrame::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float OdometryFrame::_internal_x() const {
  return x_;
}
inline float OdometryFrame::x() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.x)
  return _internal_x();
}
inline void OdometryFrame::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void OdometryFrame::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.x)
}

// required float y = 2;
inline bool OdometryFrame::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OdometryFrame::has_y() const {
  return _internal_has_y();
}
inline void OdometryFrame::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float OdometryFrame::_internal_y() const {
  return y_;
}
inline float OdometryFrame::y() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.y)
  return _internal_y();
}
inline void OdometryFrame::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void OdometryFrame::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.y)
}

// required float yaw = 3;
inline bool OdometryFrame::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OdometryFrame::has_yaw() const {
  return _internal_has_yaw();
}
inline void OdometryFrame::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float OdometryFrame::_internal_yaw() const {
  return yaw_;
}
inline float OdometryFrame::yaw() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.yaw)
  return _internal_yaw();
}
inline void OdometryFrame::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000004u;
  yaw_ = value;
}
inline void OdometryFrame::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.yaw)
}

// required float speed = 4;
inline bool OdometryFrame::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OdometryFrame::has_speed() const {
  return _internal_has_speed();
}
inline void OdometryFrame::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float OdometryFrame::_internal_speed() const {
  return speed_;
}
inline float OdometryFrame::speed() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.speed)
  return _internal_speed();
}
inline void OdometryFrame::_internal_set_speed(float value) {
  _has_bits_[0] |= 0x00000008u;
  speed_ = value;
}
inline void OdometryFrame::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.speed)
}

// required float yaw_rate = 5;
inline bool OdometryFrame::_internal_has_yaw_rate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OdometryFrame::has_yaw_rate() const {
  return _internal_has_yaw_rate();
}
inline void OdometryFrame::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float OdometryFrame::_internal_yaw_rate() const {
  return yaw_rate_;
}
inline float OdometryFrame::yaw_rate() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.yaw_rate)
  return _internal_yaw_rate();
}
inline void OdometryFrame::_internal_set_yaw_rate(float value) {
  _has_bits_[0] |= 0x00000020u;
  yaw_rate_ = value;
}
inline void OdometryFrame::set_yaw_rate(float value) {
  _internal_set_yaw_rate(value);
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.yaw_rate)
}

// required int64 time_stamp = 6;
inline bool OdometryFrame::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OdometryFrame::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void OdometryFrame::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OdometryFrame::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OdometryFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:CommonProto.OdometryFrame.time_stamp)
  return _internal_time_stamp();
}
inline void OdometryFrame::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
}
inline void OdometryFrame::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CommonProto.OdometryFrame.time_stamp)
}

// -------------------------------------------------------------------

// SerializedData

// required string type = 1;
inline bool SerializedData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerializedData::has_type() const {
  return _internal_has_type();
}
inline void SerializedData::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerializedData::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.SerializedData.type)
  return _internal_type();
}
inline void SerializedData::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.SerializedData.type)
}
inline std::string* SerializedData::mutable_type() {
  // @@protoc_insertion_point(field_mutable:CommonProto.SerializedData.type)
  return _internal_mutable_type();
}
inline const std::string& SerializedData::_internal_type() const {
  return type_.Get();
}
inline void SerializedData::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SerializedData::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommonProto.SerializedData.type)
}
inline void SerializedData::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommonProto.SerializedData.type)
}
inline void SerializedData::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommonProto.SerializedData.type)
}
inline std::string* SerializedData::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SerializedData::release_type() {
  // @@protoc_insertion_point(field_release:CommonProto.SerializedData.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SerializedData::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommonProto.SerializedData.type)
}

// required bytes proto = 2;
inline bool SerializedData::_internal_has_proto() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SerializedData::has_proto() const {
  return _internal_has_proto();
}
inline void SerializedData::clear_proto() {
  proto_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SerializedData::proto() const {
  // @@protoc_insertion_point(field_get:CommonProto.SerializedData.proto)
  return _internal_proto();
}
inline void SerializedData::set_proto(const std::string& value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:CommonProto.SerializedData.proto)
}
inline std::string* SerializedData::mutable_proto() {
  // @@protoc_insertion_point(field_mutable:CommonProto.SerializedData.proto)
  return _internal_mutable_proto();
}
inline const std::string& SerializedData::_internal_proto() const {
  return proto_.Get();
}
inline void SerializedData::_internal_set_proto(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SerializedData::set_proto(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommonProto.SerializedData.proto)
}
inline void SerializedData::set_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommonProto.SerializedData.proto)
}
inline void SerializedData::set_proto(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommonProto.SerializedData.proto)
}
inline std::string* SerializedData::_internal_mutable_proto() {
  _has_bits_[0] |= 0x00000002u;
  return proto_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SerializedData::release_proto() {
  // @@protoc_insertion_point(field_release:CommonProto.SerializedData.proto)
  if (!_internal_has_proto()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SerializedData::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommonProto.SerializedData.proto)
}

// required int32 channel = 4 [default = 0];
inline bool SerializedData::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SerializedData::has_channel() const {
  return _internal_has_channel();
}
inline void SerializedData::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedData::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedData::channel() const {
  // @@protoc_insertion_point(field_get:CommonProto.SerializedData.channel)
  return _internal_channel();
}
inline void SerializedData::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  channel_ = value;
}
inline void SerializedData::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CommonProto.SerializedData.channel)
}

// required bool with_data_field = 5 [default = true];
inline bool SerializedData::_internal_has_with_data_field() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SerializedData::has_with_data_field() const {
  return _internal_has_with_data_field();
}
inline void SerializedData::clear_with_data_field() {
  with_data_field_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SerializedData::_internal_with_data_field() const {
  return with_data_field_;
}
inline bool SerializedData::with_data_field() const {
  // @@protoc_insertion_point(field_get:CommonProto.SerializedData.with_data_field)
  return _internal_with_data_field();
}
inline void SerializedData::_internal_set_with_data_field(bool value) {
  _has_bits_[0] |= 0x00000008u;
  with_data_field_ = value;
}
inline void SerializedData::set_with_data_field(bool value) {
  _internal_set_with_data_field(value);
  // @@protoc_insertion_point(field_set:CommonProto.SerializedData.with_data_field)
}

// -------------------------------------------------------------------

// DataDescriptor

// optional string type = 1;
inline bool DataDescriptor::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataDescriptor::has_type() const {
  return _internal_has_type();
}
inline void DataDescriptor::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataDescriptor::type() const {
  // @@protoc_insertion_point(field_get:CommonProto.DataDescriptor.type)
  return _internal_type();
}
inline void DataDescriptor::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.DataDescriptor.type)
}
inline std::string* DataDescriptor::mutable_type() {
  // @@protoc_insertion_point(field_mutable:CommonProto.DataDescriptor.type)
  return _internal_mutable_type();
}
inline const std::string& DataDescriptor::_internal_type() const {
  return type_.Get();
}
inline void DataDescriptor::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataDescriptor::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommonProto.DataDescriptor.type)
}
inline void DataDescriptor::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommonProto.DataDescriptor.type)
}
inline void DataDescriptor::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommonProto.DataDescriptor.type)
}
inline std::string* DataDescriptor::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:CommonProto.DataDescriptor.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommonProto.DataDescriptor.type)
}

// optional .CommonProto.SerializedData data = 2;
inline bool DataDescriptor::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool DataDescriptor::has_data() const {
  return _internal_has_data();
}
inline void DataDescriptor::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommonProto::SerializedData& DataDescriptor::_internal_data() const {
  const ::CommonProto::SerializedData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommonProto::SerializedData&>(
      ::CommonProto::_SerializedData_default_instance_);
}
inline const ::CommonProto::SerializedData& DataDescriptor::data() const {
  // @@protoc_insertion_point(field_get:CommonProto.DataDescriptor.data)
  return _internal_data();
}
inline void DataDescriptor::unsafe_arena_set_allocated_data(
    ::CommonProto::SerializedData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommonProto.DataDescriptor.data)
}
inline ::CommonProto::SerializedData* DataDescriptor::release_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::SerializedData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommonProto::SerializedData* DataDescriptor::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CommonProto.DataDescriptor.data)
  _has_bits_[0] &= ~0x00000002u;
  ::CommonProto::SerializedData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::CommonProto::SerializedData* DataDescriptor::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommonProto::SerializedData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::CommonProto::SerializedData* DataDescriptor::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CommonProto.DataDescriptor.data)
  return _internal_mutable_data();
}
inline void DataDescriptor::set_allocated_data(::CommonProto::SerializedData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CommonProto.DataDescriptor.data)
}

// -------------------------------------------------------------------

// Color

// required uint32 b = 1;
inline bool Color::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Color::has_b() const {
  return _internal_has_b();
}
inline void Color::clear_b() {
  b_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  b_ = value;
}
inline void Color::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:CommonProto.Color.b)
}

// required uint32 g = 2;
inline bool Color::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Color::has_g() const {
  return _internal_has_g();
}
inline void Color::clear_g() {
  g_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
}
inline void Color::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:CommonProto.Color.g)
}

// required uint32 r = 3;
inline bool Color::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Color::has_r() const {
  return _internal_has_r();
}
inline void Color::clear_r() {
  r_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:CommonProto.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  r_ = value;
}
inline void Color::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:CommonProto.Color.r)
}

// -------------------------------------------------------------------

// ParsingSetting

// required int32 parsing_type = 1;
inline bool ParsingSetting::_internal_has_parsing_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParsingSetting::has_parsing_type() const {
  return _internal_has_parsing_type();
}
inline void ParsingSetting::clear_parsing_type() {
  parsing_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::_internal_parsing_type() const {
  return parsing_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::parsing_type() const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.parsing_type)
  return _internal_parsing_type();
}
inline void ParsingSetting::_internal_set_parsing_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  parsing_type_ = value;
}
inline void ParsingSetting::set_parsing_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parsing_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.parsing_type)
}

// required int32 parsing_channels = 2;
inline bool ParsingSetting::_internal_has_parsing_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParsingSetting::has_parsing_channels() const {
  return _internal_has_parsing_channels();
}
inline void ParsingSetting::clear_parsing_channels() {
  parsing_channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::_internal_parsing_channels() const {
  return parsing_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::parsing_channels() const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.parsing_channels)
  return _internal_parsing_channels();
}
inline void ParsingSetting::_internal_set_parsing_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  parsing_channels_ = value;
}
inline void ParsingSetting::set_parsing_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parsing_channels(value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.parsing_channels)
}

// repeated uint64 channel_labels = 3;
inline int ParsingSetting::_internal_channel_labels_size() const {
  return channel_labels_.size();
}
inline int ParsingSetting::channel_labels_size() const {
  return _internal_channel_labels_size();
}
inline void ParsingSetting::clear_channel_labels() {
  channel_labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParsingSetting::_internal_channel_labels(int index) const {
  return channel_labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParsingSetting::channel_labels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.channel_labels)
  return _internal_channel_labels(index);
}
inline void ParsingSetting::set_channel_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  channel_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.channel_labels)
}
inline void ParsingSetting::_internal_add_channel_labels(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  channel_labels_.Add(value);
}
inline void ParsingSetting::add_channel_labels(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_channel_labels(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.channel_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ParsingSetting::_internal_channel_labels() const {
  return channel_labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ParsingSetting::channel_labels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.channel_labels)
  return _internal_channel_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ParsingSetting::_internal_mutable_channel_labels() {
  return &channel_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ParsingSetting::mutable_channel_labels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.channel_labels)
  return _internal_mutable_channel_labels();
}

// repeated .CommonProto.Color channel_colors = 4;
inline int ParsingSetting::_internal_channel_colors_size() const {
  return channel_colors_.size();
}
inline int ParsingSetting::channel_colors_size() const {
  return _internal_channel_colors_size();
}
inline void ParsingSetting::clear_channel_colors() {
  channel_colors_.Clear();
}
inline ::CommonProto::Color* ParsingSetting::mutable_channel_colors(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color >*
ParsingSetting::mutable_channel_colors() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.channel_colors)
  return &channel_colors_;
}
inline const ::CommonProto::Color& ParsingSetting::_internal_channel_colors(int index) const {
  return channel_colors_.Get(index);
}
inline const ::CommonProto::Color& ParsingSetting::channel_colors(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.channel_colors)
  return _internal_channel_colors(index);
}
inline ::CommonProto::Color* ParsingSetting::_internal_add_channel_colors() {
  return channel_colors_.Add();
}
inline ::CommonProto::Color* ParsingSetting::add_channel_colors() {
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.channel_colors)
  return _internal_add_channel_colors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Color >&
ParsingSetting::channel_colors() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.channel_colors)
  return channel_colors_;
}

// repeated int32 freespace_channels = 5;
inline int ParsingSetting::_internal_freespace_channels_size() const {
  return freespace_channels_.size();
}
inline int ParsingSetting::freespace_channels_size() const {
  return _internal_freespace_channels_size();
}
inline void ParsingSetting::clear_freespace_channels() {
  freespace_channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::_internal_freespace_channels(int index) const {
  return freespace_channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::freespace_channels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.freespace_channels)
  return _internal_freespace_channels(index);
}
inline void ParsingSetting::set_freespace_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  freespace_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.freespace_channels)
}
inline void ParsingSetting::_internal_add_freespace_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  freespace_channels_.Add(value);
}
inline void ParsingSetting::add_freespace_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_freespace_channels(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.freespace_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ParsingSetting::_internal_freespace_channels() const {
  return freespace_channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ParsingSetting::freespace_channels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.freespace_channels)
  return _internal_freespace_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ParsingSetting::_internal_mutable_freespace_channels() {
  return &freespace_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ParsingSetting::mutable_freespace_channels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.freespace_channels)
  return _internal_mutable_freespace_channels();
}

// repeated int32 boundspace_channels = 6;
inline int ParsingSetting::_internal_boundspace_channels_size() const {
  return boundspace_channels_.size();
}
inline int ParsingSetting::boundspace_channels_size() const {
  return _internal_boundspace_channels_size();
}
inline void ParsingSetting::clear_boundspace_channels() {
  boundspace_channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::_internal_boundspace_channels(int index) const {
  return boundspace_channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParsingSetting::boundspace_channels(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ParsingSetting.boundspace_channels)
  return _internal_boundspace_channels(index);
}
inline void ParsingSetting::set_boundspace_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  boundspace_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CommonProto.ParsingSetting.boundspace_channels)
}
inline void ParsingSetting::_internal_add_boundspace_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  boundspace_channels_.Add(value);
}
inline void ParsingSetting::add_boundspace_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_boundspace_channels(value);
  // @@protoc_insertion_point(field_add:CommonProto.ParsingSetting.boundspace_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ParsingSetting::_internal_boundspace_channels() const {
  return boundspace_channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ParsingSetting::boundspace_channels() const {
  // @@protoc_insertion_point(field_list:CommonProto.ParsingSetting.boundspace_channels)
  return _internal_boundspace_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ParsingSetting::_internal_mutable_boundspace_channels() {
  return &boundspace_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ParsingSetting::mutable_boundspace_channels() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ParsingSetting.boundspace_channels)
  return _internal_mutable_boundspace_channels();
}

// -------------------------------------------------------------------

// ImageFailStatus

// required int32 fail_type = 1;
inline bool ImageFailStatus::_internal_has_fail_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageFailStatus::has_fail_type() const {
  return _internal_has_fail_type();
}
inline void ImageFailStatus::clear_fail_type() {
  fail_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageFailStatus::_internal_fail_type() const {
  return fail_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageFailStatus::fail_type() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageFailStatus.fail_type)
  return _internal_fail_type();
}
inline void ImageFailStatus::_internal_set_fail_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fail_type_ = value;
}
inline void ImageFailStatus::set_fail_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fail_type(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageFailStatus.fail_type)
}

// optional float score = 2;
inline bool ImageFailStatus::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageFailStatus::has_score() const {
  return _internal_has_score();
}
inline void ImageFailStatus::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ImageFailStatus::_internal_score() const {
  return score_;
}
inline float ImageFailStatus::score() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageFailStatus.score)
  return _internal_score();
}
inline void ImageFailStatus::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void ImageFailStatus::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageFailStatus.score)
}

// optional int32 level = 3;
inline bool ImageFailStatus::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageFailStatus::has_level() const {
  return _internal_has_level();
}
inline void ImageFailStatus::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageFailStatus::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageFailStatus::level() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageFailStatus.level)
  return _internal_level();
}
inline void ImageFailStatus::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void ImageFailStatus::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageFailStatus.level)
}

// repeated .CommonProto.Polygon regions = 4;
inline int ImageFailStatus::_internal_regions_size() const {
  return regions_.size();
}
inline int ImageFailStatus::regions_size() const {
  return _internal_regions_size();
}
inline void ImageFailStatus::clear_regions() {
  regions_.Clear();
}
inline ::CommonProto::Polygon* ImageFailStatus::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageFailStatus.regions)
  return regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Polygon >*
ImageFailStatus::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ImageFailStatus.regions)
  return &regions_;
}
inline const ::CommonProto::Polygon& ImageFailStatus::_internal_regions(int index) const {
  return regions_.Get(index);
}
inline const ::CommonProto::Polygon& ImageFailStatus::regions(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageFailStatus.regions)
  return _internal_regions(index);
}
inline ::CommonProto::Polygon* ImageFailStatus::_internal_add_regions() {
  return regions_.Add();
}
inline ::CommonProto::Polygon* ImageFailStatus::add_regions() {
  // @@protoc_insertion_point(field_add:CommonProto.ImageFailStatus.regions)
  return _internal_add_regions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::Polygon >&
ImageFailStatus::regions() const {
  // @@protoc_insertion_point(field_list:CommonProto.ImageFailStatus.regions)
  return regions_;
}

// -------------------------------------------------------------------

// ImageFail

// required int32 cam_id = 1;
inline bool ImageFail::_internal_has_cam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageFail::has_cam_id() const {
  return _internal_has_cam_id();
}
inline void ImageFail::clear_cam_id() {
  cam_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageFail::_internal_cam_id() const {
  return cam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageFail::cam_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageFail.cam_id)
  return _internal_cam_id();
}
inline void ImageFail::_internal_set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cam_id_ = value;
}
inline void ImageFail::set_cam_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cam_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageFail.cam_id)
}

// required int32 frame_id = 2;
inline bool ImageFail::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageFail::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void ImageFail::clear_frame_id() {
  frame_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageFail::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageFail::frame_id() const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageFail.frame_id)
  return _internal_frame_id();
}
inline void ImageFail::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_ = value;
}
inline void ImageFail::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:CommonProto.ImageFail.frame_id)
}

// repeated .CommonProto.ImageFailStatus fail_status = 3;
inline int ImageFail::_internal_fail_status_size() const {
  return fail_status_.size();
}
inline int ImageFail::fail_status_size() const {
  return _internal_fail_status_size();
}
inline void ImageFail::clear_fail_status() {
  fail_status_.Clear();
}
inline ::CommonProto::ImageFailStatus* ImageFail::mutable_fail_status(int index) {
  // @@protoc_insertion_point(field_mutable:CommonProto.ImageFail.fail_status)
  return fail_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ImageFailStatus >*
ImageFail::mutable_fail_status() {
  // @@protoc_insertion_point(field_mutable_list:CommonProto.ImageFail.fail_status)
  return &fail_status_;
}
inline const ::CommonProto::ImageFailStatus& ImageFail::_internal_fail_status(int index) const {
  return fail_status_.Get(index);
}
inline const ::CommonProto::ImageFailStatus& ImageFail::fail_status(int index) const {
  // @@protoc_insertion_point(field_get:CommonProto.ImageFail.fail_status)
  return _internal_fail_status(index);
}
inline ::CommonProto::ImageFailStatus* ImageFail::_internal_add_fail_status() {
  return fail_status_.Add();
}
inline ::CommonProto::ImageFailStatus* ImageFail::add_fail_status() {
  // @@protoc_insertion_point(field_add:CommonProto.ImageFail.fail_status)
  return _internal_add_fail_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommonProto::ImageFailStatus >&
ImageFail::fail_status() const {
  // @@protoc_insertion_point(field_list:CommonProto.ImageFail.fail_status)
  return fail_status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CommonProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CommonProto::Line_EndPointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::Line_EndPointType>() {
  return ::CommonProto::Line_EndPointType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ImageFailStatus_ImgFailTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ImageFailStatus_ImgFailTypes>() {
  return ::CommonProto::ImageFailStatus_ImgFailTypes_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ImageFailStatus_ImgFailLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ImageFailStatus_ImgFailLevel>() {
  return ::CommonProto::ImageFailStatus_ImgFailLevel_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::PerceptionProperty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::PerceptionProperty>() {
  return ::CommonProto::PerceptionProperty_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::WeatherType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::WeatherType>() {
  return ::CommonProto::WeatherType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::SceneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::SceneType>() {
  return ::CommonProto::SceneType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TimeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TimeType>() {
  return ::CommonProto::TimeType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::LightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::LightType>() {
  return ::CommonProto::LightType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::WorkConditionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::WorkConditionType>() {
  return ::CommonProto::WorkConditionType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ImageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ImageFormat>() {
  return ::CommonProto::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ParsingFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ParsingFormat>() {
  return ::CommonProto::ParsingFormat_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::LineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::LineType>() {
  return ::CommonProto::LineType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ObstacleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ObstacleType>() {
  return ::CommonProto::ObstacleType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ParkingSlotStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ParkingSlotStatus>() {
  return ::CommonProto::ParkingSlotStatus_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::VehProperty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::VehProperty>() {
  return ::CommonProto::VehProperty_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::VehPropertyPerceptionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::VehPropertyPerceptionType>() {
  return ::CommonProto::VehPropertyPerceptionType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TrafficLightStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TrafficLightStyle>() {
  return ::CommonProto::TrafficLightStyle_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TrafficLightStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TrafficLightStatus>() {
  return ::CommonProto::TrafficLightStatus_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::TrafficSignProperty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::TrafficSignProperty>() {
  return ::CommonProto::TrafficSignProperty_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::RoadSignProperty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::RoadSignProperty>() {
  return ::CommonProto::RoadSignProperty_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::ObstacleRawModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::ObstacleRawModelType>() {
  return ::CommonProto::ObstacleRawModelType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::LanePosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::LanePosition>() {
  return ::CommonProto::LanePosition_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::FreeSpacePointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::FreeSpacePointType>() {
  return ::CommonProto::FreeSpacePointType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::CameraType>() {
  return ::CommonProto::CameraType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::CameraVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::CameraVersion>() {
  return ::CommonProto::CameraVersion_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::CalibrationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::CalibrationStatus>() {
  return ::CommonProto::CalibrationStatus_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::DataType>() {
  return ::CommonProto::DataType_descriptor();
}
template <> struct is_proto_enum< ::CommonProto::PasringLableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommonProto::PasringLableType>() {
  return ::CommonProto::PasringLableType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
