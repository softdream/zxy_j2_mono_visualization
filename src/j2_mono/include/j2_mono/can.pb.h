// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: can.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_can_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_can_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_can_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_can_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_can_2eproto;
namespace CANProto {
class CANFrame;
class CANFrameDefaultTypeInternal;
extern CANFrameDefaultTypeInternal _CANFrame_default_instance_;
class CANFrameRaw;
class CANFrameRawDefaultTypeInternal;
extern CANFrameRawDefaultTypeInternal _CANFrameRaw_default_instance_;
class CANIMU;
class CANIMUDefaultTypeInternal;
extern CANIMUDefaultTypeInternal _CANIMU_default_instance_;
class Gear;
class GearDefaultTypeInternal;
extern GearDefaultTypeInternal _Gear_default_instance_;
class TurnSignal;
class TurnSignalDefaultTypeInternal;
extern TurnSignalDefaultTypeInternal _TurnSignal_default_instance_;
class VehSpeed;
class VehSpeedDefaultTypeInternal;
extern VehSpeedDefaultTypeInternal _VehSpeed_default_instance_;
class WheelAngle;
class WheelAngleDefaultTypeInternal;
extern WheelAngleDefaultTypeInternal _WheelAngle_default_instance_;
}  // namespace CANProto
PROTOBUF_NAMESPACE_OPEN
template<> ::CANProto::CANFrame* Arena::CreateMaybeMessage<::CANProto::CANFrame>(Arena*);
template<> ::CANProto::CANFrameRaw* Arena::CreateMaybeMessage<::CANProto::CANFrameRaw>(Arena*);
template<> ::CANProto::CANIMU* Arena::CreateMaybeMessage<::CANProto::CANIMU>(Arena*);
template<> ::CANProto::Gear* Arena::CreateMaybeMessage<::CANProto::Gear>(Arena*);
template<> ::CANProto::TurnSignal* Arena::CreateMaybeMessage<::CANProto::TurnSignal>(Arena*);
template<> ::CANProto::VehSpeed* Arena::CreateMaybeMessage<::CANProto::VehSpeed>(Arena*);
template<> ::CANProto::WheelAngle* Arena::CreateMaybeMessage<::CANProto::WheelAngle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CANProto {

// ===================================================================

class VehSpeed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CANProto.VehSpeed) */ {
 public:
  inline VehSpeed() : VehSpeed(nullptr) {}
  virtual ~VehSpeed();

  VehSpeed(const VehSpeed& from);
  VehSpeed(VehSpeed&& from) noexcept
    : VehSpeed() {
    *this = ::std::move(from);
  }

  inline VehSpeed& operator=(const VehSpeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehSpeed& operator=(VehSpeed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehSpeed& default_instance();

  static inline const VehSpeed* internal_default_instance() {
    return reinterpret_cast<const VehSpeed*>(
               &_VehSpeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehSpeed& a, VehSpeed& b) {
    a.Swap(&b);
  }
  inline void Swap(VehSpeed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehSpeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehSpeed* New() const final {
    return CreateMaybeMessage<VehSpeed>(nullptr);
  }

  VehSpeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehSpeed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehSpeed& from);
  void MergeFrom(const VehSpeed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehSpeed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CANProto.VehSpeed";
  }
  protected:
  explicit VehSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_can_2eproto);
    return ::descriptor_table_can_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 2,
    kSpeedFieldNumber = 1,
  };
  // required int64 time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required float speed = 1;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:CANProto.VehSpeed)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  float speed_;
  friend struct ::TableStruct_can_2eproto;
};
// -------------------------------------------------------------------

class WheelAngle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CANProto.WheelAngle) */ {
 public:
  inline WheelAngle() : WheelAngle(nullptr) {}
  virtual ~WheelAngle();

  WheelAngle(const WheelAngle& from);
  WheelAngle(WheelAngle&& from) noexcept
    : WheelAngle() {
    *this = ::std::move(from);
  }

  inline WheelAngle& operator=(const WheelAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline WheelAngle& operator=(WheelAngle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WheelAngle& default_instance();

  static inline const WheelAngle* internal_default_instance() {
    return reinterpret_cast<const WheelAngle*>(
               &_WheelAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WheelAngle& a, WheelAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(WheelAngle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WheelAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WheelAngle* New() const final {
    return CreateMaybeMessage<WheelAngle>(nullptr);
  }

  WheelAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WheelAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WheelAngle& from);
  void MergeFrom(const WheelAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WheelAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CANProto.WheelAngle";
  }
  protected:
  explicit WheelAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_can_2eproto);
    return ::descriptor_table_can_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 2,
    kAngleFieldNumber = 1,
  };
  // required int64 time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required float angle = 1;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:CANProto.WheelAngle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  float angle_;
  friend struct ::TableStruct_can_2eproto;
};
// -------------------------------------------------------------------

class Gear PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CANProto.Gear) */ {
 public:
  inline Gear() : Gear(nullptr) {}
  virtual ~Gear();

  Gear(const Gear& from);
  Gear(Gear&& from) noexcept
    : Gear() {
    *this = ::std::move(from);
  }

  inline Gear& operator=(const Gear& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gear& operator=(Gear&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gear& default_instance();

  static inline const Gear* internal_default_instance() {
    return reinterpret_cast<const Gear*>(
               &_Gear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Gear& a, Gear& b) {
    a.Swap(&b);
  }
  inline void Swap(Gear* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gear* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gear* New() const final {
    return CreateMaybeMessage<Gear>(nullptr);
  }

  Gear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gear>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gear& from);
  void MergeFrom(const Gear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gear* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CANProto.Gear";
  }
  protected:
  explicit Gear(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_can_2eproto);
    return ::descriptor_table_can_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // required int64 time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CANProto.Gear)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_can_2eproto;
};
// -------------------------------------------------------------------

class TurnSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CANProto.TurnSignal) */ {
 public:
  inline TurnSignal() : TurnSignal(nullptr) {}
  virtual ~TurnSignal();

  TurnSignal(const TurnSignal& from);
  TurnSignal(TurnSignal&& from) noexcept
    : TurnSignal() {
    *this = ::std::move(from);
  }

  inline TurnSignal& operator=(const TurnSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnSignal& operator=(TurnSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TurnSignal& default_instance();

  static inline const TurnSignal* internal_default_instance() {
    return reinterpret_cast<const TurnSignal*>(
               &_TurnSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TurnSignal& a, TurnSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TurnSignal* New() const final {
    return CreateMaybeMessage<TurnSignal>(nullptr);
  }

  TurnSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TurnSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TurnSignal& from);
  void MergeFrom(const TurnSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CANProto.TurnSignal";
  }
  protected:
  explicit TurnSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_can_2eproto);
    return ::descriptor_table_can_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // required int64 time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CANProto.TurnSignal)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_can_2eproto;
};
// -------------------------------------------------------------------

class CANIMU PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CANProto.CANIMU) */ {
 public:
  inline CANIMU() : CANIMU(nullptr) {}
  virtual ~CANIMU();

  CANIMU(const CANIMU& from);
  CANIMU(CANIMU&& from) noexcept
    : CANIMU() {
    *this = ::std::move(from);
  }

  inline CANIMU& operator=(const CANIMU& from) {
    CopyFrom(from);
    return *this;
  }
  inline CANIMU& operator=(CANIMU&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CANIMU& default_instance();

  static inline const CANIMU* internal_default_instance() {
    return reinterpret_cast<const CANIMU*>(
               &_CANIMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CANIMU& a, CANIMU& b) {
    a.Swap(&b);
  }
  inline void Swap(CANIMU* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CANIMU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CANIMU* New() const final {
    return CreateMaybeMessage<CANIMU>(nullptr);
  }

  CANIMU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CANIMU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CANIMU& from);
  void MergeFrom(const CANIMU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CANIMU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CANProto.CANIMU";
  }
  protected:
  explicit CANIMU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_can_2eproto);
    return ::descriptor_table_can_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccFieldNumber = 1,
    kYawFieldNumber = 4,
    kYawRateFieldNumber = 7,
    kTimeStampFieldNumber = 50,
  };
  // optional float acc = 1;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  float acc() const;
  void set_acc(float value);
  private:
  float _internal_acc() const;
  void _internal_set_acc(float value);
  public:

  // optional float yaw = 4;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // optional float yaw_rate = 7;
  bool has_yaw_rate() const;
  private:
  bool _internal_has_yaw_rate() const;
  public:
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);
  private:
  float _internal_yaw_rate() const;
  void _internal_set_yaw_rate(float value);
  public:

  // optional int64 time_stamp = 50;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CANProto.CANIMU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float acc_;
  float yaw_;
  float yaw_rate_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  friend struct ::TableStruct_can_2eproto;
};
// -------------------------------------------------------------------

class CANFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CANProto.CANFrame) */ {
 public:
  inline CANFrame() : CANFrame(nullptr) {}
  virtual ~CANFrame();

  CANFrame(const CANFrame& from);
  CANFrame(CANFrame&& from) noexcept
    : CANFrame() {
    *this = ::std::move(from);
  }

  inline CANFrame& operator=(const CANFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CANFrame& operator=(CANFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CANFrame& default_instance();

  static inline const CANFrame* internal_default_instance() {
    return reinterpret_cast<const CANFrame*>(
               &_CANFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CANFrame& a, CANFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(CANFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CANFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CANFrame* New() const final {
    return CreateMaybeMessage<CANFrame>(nullptr);
  }

  CANFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CANFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CANFrame& from);
  void MergeFrom(const CANFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CANFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CANProto.CANFrame";
  }
  protected:
  explicit CANFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_can_2eproto);
    return ::descriptor_table_can_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsFieldNumber = 1,
    kGtFieldNumber = 2,
    kSpFieldNumber = 3,
    kWaFieldNumber = 4,
    kImuFieldNumber = 5,
  };
  // repeated .CANProto.TurnSignal ts = 1;
  int ts_size() const;
  private:
  int _internal_ts_size() const;
  public:
  void clear_ts();
  ::CANProto::TurnSignal* mutable_ts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::TurnSignal >*
      mutable_ts();
  private:
  const ::CANProto::TurnSignal& _internal_ts(int index) const;
  ::CANProto::TurnSignal* _internal_add_ts();
  public:
  const ::CANProto::TurnSignal& ts(int index) const;
  ::CANProto::TurnSignal* add_ts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::TurnSignal >&
      ts() const;

  // repeated .CANProto.Gear gt = 2;
  int gt_size() const;
  private:
  int _internal_gt_size() const;
  public:
  void clear_gt();
  ::CANProto::Gear* mutable_gt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::Gear >*
      mutable_gt();
  private:
  const ::CANProto::Gear& _internal_gt(int index) const;
  ::CANProto::Gear* _internal_add_gt();
  public:
  const ::CANProto::Gear& gt(int index) const;
  ::CANProto::Gear* add_gt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::Gear >&
      gt() const;

  // repeated .CANProto.VehSpeed sp = 3;
  int sp_size() const;
  private:
  int _internal_sp_size() const;
  public:
  void clear_sp();
  ::CANProto::VehSpeed* mutable_sp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::VehSpeed >*
      mutable_sp();
  private:
  const ::CANProto::VehSpeed& _internal_sp(int index) const;
  ::CANProto::VehSpeed* _internal_add_sp();
  public:
  const ::CANProto::VehSpeed& sp(int index) const;
  ::CANProto::VehSpeed* add_sp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::VehSpeed >&
      sp() const;

  // repeated .CANProto.WheelAngle wa = 4;
  int wa_size() const;
  private:
  int _internal_wa_size() const;
  public:
  void clear_wa();
  ::CANProto::WheelAngle* mutable_wa(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::WheelAngle >*
      mutable_wa();
  private:
  const ::CANProto::WheelAngle& _internal_wa(int index) const;
  ::CANProto::WheelAngle* _internal_add_wa();
  public:
  const ::CANProto::WheelAngle& wa(int index) const;
  ::CANProto::WheelAngle* add_wa();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::WheelAngle >&
      wa() const;

  // repeated .CANProto.CANIMU imu = 5;
  int imu_size() const;
  private:
  int _internal_imu_size() const;
  public:
  void clear_imu();
  ::CANProto::CANIMU* mutable_imu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANIMU >*
      mutable_imu();
  private:
  const ::CANProto::CANIMU& _internal_imu(int index) const;
  ::CANProto::CANIMU* _internal_add_imu();
  public:
  const ::CANProto::CANIMU& imu(int index) const;
  ::CANProto::CANIMU* add_imu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANIMU >&
      imu() const;

  // @@protoc_insertion_point(class_scope:CANProto.CANFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::TurnSignal > ts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::Gear > gt_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::VehSpeed > sp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::WheelAngle > wa_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANIMU > imu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_can_2eproto;
};
// -------------------------------------------------------------------

class CANFrameRaw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CANProto.CANFrameRaw) */ {
 public:
  inline CANFrameRaw() : CANFrameRaw(nullptr) {}
  virtual ~CANFrameRaw();

  CANFrameRaw(const CANFrameRaw& from);
  CANFrameRaw(CANFrameRaw&& from) noexcept
    : CANFrameRaw() {
    *this = ::std::move(from);
  }

  inline CANFrameRaw& operator=(const CANFrameRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CANFrameRaw& operator=(CANFrameRaw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CANFrameRaw& default_instance();

  static inline const CANFrameRaw* internal_default_instance() {
    return reinterpret_cast<const CANFrameRaw*>(
               &_CANFrameRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CANFrameRaw& a, CANFrameRaw& b) {
    a.Swap(&b);
  }
  inline void Swap(CANFrameRaw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CANFrameRaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CANFrameRaw* New() const final {
    return CreateMaybeMessage<CANFrameRaw>(nullptr);
  }

  CANFrameRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CANFrameRaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CANFrameRaw& from);
  void MergeFrom(const CANFrameRaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CANFrameRaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CANProto.CANFrameRaw";
  }
  protected:
  explicit CANFrameRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_can_2eproto);
    return ::descriptor_table_can_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kCanIdFieldNumber = 1,
    kCanDlcFieldNumber = 2,
    kTimeStampFieldNumber = 4,
  };
  // repeated int32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // required int32 can_id = 1;
  bool has_can_id() const;
  private:
  bool _internal_has_can_id() const;
  public:
  void clear_can_id();
  ::PROTOBUF_NAMESPACE_ID::int32 can_id() const;
  void set_can_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_id() const;
  void _internal_set_can_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 can_dlc = 2;
  bool has_can_dlc() const;
  private:
  bool _internal_has_can_dlc() const;
  public:
  void clear_can_dlc();
  ::PROTOBUF_NAMESPACE_ID::int32 can_dlc() const;
  void set_can_dlc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_dlc() const;
  void _internal_set_can_dlc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int64 time_stamp = 4;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CANProto.CANFrameRaw)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_dlc_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  friend struct ::TableStruct_can_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehSpeed

// required float speed = 1;
inline bool VehSpeed::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehSpeed::has_speed() const {
  return _internal_has_speed();
}
inline void VehSpeed::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float VehSpeed::_internal_speed() const {
  return speed_;
}
inline float VehSpeed::speed() const {
  // @@protoc_insertion_point(field_get:CANProto.VehSpeed.speed)
  return _internal_speed();
}
inline void VehSpeed::_internal_set_speed(float value) {
  _has_bits_[0] |= 0x00000002u;
  speed_ = value;
}
inline void VehSpeed::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:CANProto.VehSpeed.speed)
}

// required int64 time_stamp = 2;
inline bool VehSpeed::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehSpeed::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void VehSpeed::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VehSpeed::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VehSpeed::time_stamp() const {
  // @@protoc_insertion_point(field_get:CANProto.VehSpeed.time_stamp)
  return _internal_time_stamp();
}
inline void VehSpeed::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_stamp_ = value;
}
inline void VehSpeed::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CANProto.VehSpeed.time_stamp)
}

// -------------------------------------------------------------------

// WheelAngle

// required float angle = 1;
inline bool WheelAngle::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WheelAngle::has_angle() const {
  return _internal_has_angle();
}
inline void WheelAngle::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float WheelAngle::_internal_angle() const {
  return angle_;
}
inline float WheelAngle::angle() const {
  // @@protoc_insertion_point(field_get:CANProto.WheelAngle.angle)
  return _internal_angle();
}
inline void WheelAngle::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000002u;
  angle_ = value;
}
inline void WheelAngle::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:CANProto.WheelAngle.angle)
}

// required int64 time_stamp = 2;
inline bool WheelAngle::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WheelAngle::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void WheelAngle::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WheelAngle::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WheelAngle::time_stamp() const {
  // @@protoc_insertion_point(field_get:CANProto.WheelAngle.time_stamp)
  return _internal_time_stamp();
}
inline void WheelAngle::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_stamp_ = value;
}
inline void WheelAngle::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CANProto.WheelAngle.time_stamp)
}

// -------------------------------------------------------------------

// Gear

// required int32 type = 1;
inline bool Gear::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Gear::has_type() const {
  return _internal_has_type();
}
inline void Gear::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gear::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gear::type() const {
  // @@protoc_insertion_point(field_get:CANProto.Gear.type)
  return _internal_type();
}
inline void Gear::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Gear::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CANProto.Gear.type)
}

// required int64 time_stamp = 2;
inline bool Gear::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Gear::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void Gear::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Gear::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Gear::time_stamp() const {
  // @@protoc_insertion_point(field_get:CANProto.Gear.time_stamp)
  return _internal_time_stamp();
}
inline void Gear::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_stamp_ = value;
}
inline void Gear::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CANProto.Gear.time_stamp)
}

// -------------------------------------------------------------------

// TurnSignal

// required int32 type = 1;
inline bool TurnSignal::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TurnSignal::has_type() const {
  return _internal_has_type();
}
inline void TurnSignal::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TurnSignal::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TurnSignal::type() const {
  // @@protoc_insertion_point(field_get:CANProto.TurnSignal.type)
  return _internal_type();
}
inline void TurnSignal::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void TurnSignal::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CANProto.TurnSignal.type)
}

// required int64 time_stamp = 2;
inline bool TurnSignal::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TurnSignal::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void TurnSignal::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TurnSignal::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TurnSignal::time_stamp() const {
  // @@protoc_insertion_point(field_get:CANProto.TurnSignal.time_stamp)
  return _internal_time_stamp();
}
inline void TurnSignal::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_stamp_ = value;
}
inline void TurnSignal::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CANProto.TurnSignal.time_stamp)
}

// -------------------------------------------------------------------

// CANIMU

// optional float acc = 1;
inline bool CANIMU::_internal_has_acc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CANIMU::has_acc() const {
  return _internal_has_acc();
}
inline void CANIMU::clear_acc() {
  acc_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CANIMU::_internal_acc() const {
  return acc_;
}
inline float CANIMU::acc() const {
  // @@protoc_insertion_point(field_get:CANProto.CANIMU.acc)
  return _internal_acc();
}
inline void CANIMU::_internal_set_acc(float value) {
  _has_bits_[0] |= 0x00000001u;
  acc_ = value;
}
inline void CANIMU::set_acc(float value) {
  _internal_set_acc(value);
  // @@protoc_insertion_point(field_set:CANProto.CANIMU.acc)
}

// optional float yaw = 4;
inline bool CANIMU::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CANIMU::has_yaw() const {
  return _internal_has_yaw();
}
inline void CANIMU::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CANIMU::_internal_yaw() const {
  return yaw_;
}
inline float CANIMU::yaw() const {
  // @@protoc_insertion_point(field_get:CANProto.CANIMU.yaw)
  return _internal_yaw();
}
inline void CANIMU::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000002u;
  yaw_ = value;
}
inline void CANIMU::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:CANProto.CANIMU.yaw)
}

// optional float yaw_rate = 7;
inline bool CANIMU::_internal_has_yaw_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CANIMU::has_yaw_rate() const {
  return _internal_has_yaw_rate();
}
inline void CANIMU::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CANIMU::_internal_yaw_rate() const {
  return yaw_rate_;
}
inline float CANIMU::yaw_rate() const {
  // @@protoc_insertion_point(field_get:CANProto.CANIMU.yaw_rate)
  return _internal_yaw_rate();
}
inline void CANIMU::_internal_set_yaw_rate(float value) {
  _has_bits_[0] |= 0x00000004u;
  yaw_rate_ = value;
}
inline void CANIMU::set_yaw_rate(float value) {
  _internal_set_yaw_rate(value);
  // @@protoc_insertion_point(field_set:CANProto.CANIMU.yaw_rate)
}

// optional int64 time_stamp = 50;
inline bool CANIMU::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CANIMU::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CANIMU::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CANIMU::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CANIMU::time_stamp() const {
  // @@protoc_insertion_point(field_get:CANProto.CANIMU.time_stamp)
  return _internal_time_stamp();
}
inline void CANIMU::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  time_stamp_ = value;
}
inline void CANIMU::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CANProto.CANIMU.time_stamp)
}

// -------------------------------------------------------------------

// CANFrame

// repeated .CANProto.TurnSignal ts = 1;
inline int CANFrame::_internal_ts_size() const {
  return ts_.size();
}
inline int CANFrame::ts_size() const {
  return _internal_ts_size();
}
inline void CANFrame::clear_ts() {
  ts_.Clear();
}
inline ::CANProto::TurnSignal* CANFrame::mutable_ts(int index) {
  // @@protoc_insertion_point(field_mutable:CANProto.CANFrame.ts)
  return ts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::TurnSignal >*
CANFrame::mutable_ts() {
  // @@protoc_insertion_point(field_mutable_list:CANProto.CANFrame.ts)
  return &ts_;
}
inline const ::CANProto::TurnSignal& CANFrame::_internal_ts(int index) const {
  return ts_.Get(index);
}
inline const ::CANProto::TurnSignal& CANFrame::ts(int index) const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrame.ts)
  return _internal_ts(index);
}
inline ::CANProto::TurnSignal* CANFrame::_internal_add_ts() {
  return ts_.Add();
}
inline ::CANProto::TurnSignal* CANFrame::add_ts() {
  // @@protoc_insertion_point(field_add:CANProto.CANFrame.ts)
  return _internal_add_ts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::TurnSignal >&
CANFrame::ts() const {
  // @@protoc_insertion_point(field_list:CANProto.CANFrame.ts)
  return ts_;
}

// repeated .CANProto.Gear gt = 2;
inline int CANFrame::_internal_gt_size() const {
  return gt_.size();
}
inline int CANFrame::gt_size() const {
  return _internal_gt_size();
}
inline void CANFrame::clear_gt() {
  gt_.Clear();
}
inline ::CANProto::Gear* CANFrame::mutable_gt(int index) {
  // @@protoc_insertion_point(field_mutable:CANProto.CANFrame.gt)
  return gt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::Gear >*
CANFrame::mutable_gt() {
  // @@protoc_insertion_point(field_mutable_list:CANProto.CANFrame.gt)
  return &gt_;
}
inline const ::CANProto::Gear& CANFrame::_internal_gt(int index) const {
  return gt_.Get(index);
}
inline const ::CANProto::Gear& CANFrame::gt(int index) const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrame.gt)
  return _internal_gt(index);
}
inline ::CANProto::Gear* CANFrame::_internal_add_gt() {
  return gt_.Add();
}
inline ::CANProto::Gear* CANFrame::add_gt() {
  // @@protoc_insertion_point(field_add:CANProto.CANFrame.gt)
  return _internal_add_gt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::Gear >&
CANFrame::gt() const {
  // @@protoc_insertion_point(field_list:CANProto.CANFrame.gt)
  return gt_;
}

// repeated .CANProto.VehSpeed sp = 3;
inline int CANFrame::_internal_sp_size() const {
  return sp_.size();
}
inline int CANFrame::sp_size() const {
  return _internal_sp_size();
}
inline void CANFrame::clear_sp() {
  sp_.Clear();
}
inline ::CANProto::VehSpeed* CANFrame::mutable_sp(int index) {
  // @@protoc_insertion_point(field_mutable:CANProto.CANFrame.sp)
  return sp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::VehSpeed >*
CANFrame::mutable_sp() {
  // @@protoc_insertion_point(field_mutable_list:CANProto.CANFrame.sp)
  return &sp_;
}
inline const ::CANProto::VehSpeed& CANFrame::_internal_sp(int index) const {
  return sp_.Get(index);
}
inline const ::CANProto::VehSpeed& CANFrame::sp(int index) const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrame.sp)
  return _internal_sp(index);
}
inline ::CANProto::VehSpeed* CANFrame::_internal_add_sp() {
  return sp_.Add();
}
inline ::CANProto::VehSpeed* CANFrame::add_sp() {
  // @@protoc_insertion_point(field_add:CANProto.CANFrame.sp)
  return _internal_add_sp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::VehSpeed >&
CANFrame::sp() const {
  // @@protoc_insertion_point(field_list:CANProto.CANFrame.sp)
  return sp_;
}

// repeated .CANProto.WheelAngle wa = 4;
inline int CANFrame::_internal_wa_size() const {
  return wa_.size();
}
inline int CANFrame::wa_size() const {
  return _internal_wa_size();
}
inline void CANFrame::clear_wa() {
  wa_.Clear();
}
inline ::CANProto::WheelAngle* CANFrame::mutable_wa(int index) {
  // @@protoc_insertion_point(field_mutable:CANProto.CANFrame.wa)
  return wa_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::WheelAngle >*
CANFrame::mutable_wa() {
  // @@protoc_insertion_point(field_mutable_list:CANProto.CANFrame.wa)
  return &wa_;
}
inline const ::CANProto::WheelAngle& CANFrame::_internal_wa(int index) const {
  return wa_.Get(index);
}
inline const ::CANProto::WheelAngle& CANFrame::wa(int index) const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrame.wa)
  return _internal_wa(index);
}
inline ::CANProto::WheelAngle* CANFrame::_internal_add_wa() {
  return wa_.Add();
}
inline ::CANProto::WheelAngle* CANFrame::add_wa() {
  // @@protoc_insertion_point(field_add:CANProto.CANFrame.wa)
  return _internal_add_wa();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::WheelAngle >&
CANFrame::wa() const {
  // @@protoc_insertion_point(field_list:CANProto.CANFrame.wa)
  return wa_;
}

// repeated .CANProto.CANIMU imu = 5;
inline int CANFrame::_internal_imu_size() const {
  return imu_.size();
}
inline int CANFrame::imu_size() const {
  return _internal_imu_size();
}
inline void CANFrame::clear_imu() {
  imu_.Clear();
}
inline ::CANProto::CANIMU* CANFrame::mutable_imu(int index) {
  // @@protoc_insertion_point(field_mutable:CANProto.CANFrame.imu)
  return imu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANIMU >*
CANFrame::mutable_imu() {
  // @@protoc_insertion_point(field_mutable_list:CANProto.CANFrame.imu)
  return &imu_;
}
inline const ::CANProto::CANIMU& CANFrame::_internal_imu(int index) const {
  return imu_.Get(index);
}
inline const ::CANProto::CANIMU& CANFrame::imu(int index) const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrame.imu)
  return _internal_imu(index);
}
inline ::CANProto::CANIMU* CANFrame::_internal_add_imu() {
  return imu_.Add();
}
inline ::CANProto::CANIMU* CANFrame::add_imu() {
  // @@protoc_insertion_point(field_add:CANProto.CANFrame.imu)
  return _internal_add_imu();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CANProto::CANIMU >&
CANFrame::imu() const {
  // @@protoc_insertion_point(field_list:CANProto.CANFrame.imu)
  return imu_;
}

// -------------------------------------------------------------------

// CANFrameRaw

// required int32 can_id = 1;
inline bool CANFrameRaw::_internal_has_can_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CANFrameRaw::has_can_id() const {
  return _internal_has_can_id();
}
inline void CANFrameRaw::clear_can_id() {
  can_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CANFrameRaw::_internal_can_id() const {
  return can_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CANFrameRaw::can_id() const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrameRaw.can_id)
  return _internal_can_id();
}
inline void CANFrameRaw::_internal_set_can_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  can_id_ = value;
}
inline void CANFrameRaw::set_can_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_id(value);
  // @@protoc_insertion_point(field_set:CANProto.CANFrameRaw.can_id)
}

// required int32 can_dlc = 2;
inline bool CANFrameRaw::_internal_has_can_dlc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CANFrameRaw::has_can_dlc() const {
  return _internal_has_can_dlc();
}
inline void CANFrameRaw::clear_can_dlc() {
  can_dlc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CANFrameRaw::_internal_can_dlc() const {
  return can_dlc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CANFrameRaw::can_dlc() const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrameRaw.can_dlc)
  return _internal_can_dlc();
}
inline void CANFrameRaw::_internal_set_can_dlc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_dlc_ = value;
}
inline void CANFrameRaw::set_can_dlc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_dlc(value);
  // @@protoc_insertion_point(field_set:CANProto.CANFrameRaw.can_dlc)
}

// repeated int32 data = 3;
inline int CANFrameRaw::_internal_data_size() const {
  return data_.size();
}
inline int CANFrameRaw::data_size() const {
  return _internal_data_size();
}
inline void CANFrameRaw::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CANFrameRaw::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CANFrameRaw::data(int index) const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrameRaw.data)
  return _internal_data(index);
}
inline void CANFrameRaw::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:CANProto.CANFrameRaw.data)
}
inline void CANFrameRaw::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void CANFrameRaw::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:CANProto.CANFrameRaw.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CANFrameRaw::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CANFrameRaw::data() const {
  // @@protoc_insertion_point(field_list:CANProto.CANFrameRaw.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CANFrameRaw::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CANFrameRaw::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CANProto.CANFrameRaw.data)
  return _internal_mutable_data();
}

// required int64 time_stamp = 4;
inline bool CANFrameRaw::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CANFrameRaw::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CANFrameRaw::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CANFrameRaw::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CANFrameRaw::time_stamp() const {
  // @@protoc_insertion_point(field_get:CANProto.CANFrameRaw.time_stamp)
  return _internal_time_stamp();
}
inline void CANFrameRaw::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_stamp_ = value;
}
inline void CANFrameRaw::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CANProto.CANFrameRaw.time_stamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CANProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_can_2eproto
