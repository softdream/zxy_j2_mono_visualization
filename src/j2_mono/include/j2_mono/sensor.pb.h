// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_2eproto;
namespace SensorProto {
class GPSFrame;
class GPSFrameDefaultTypeInternal;
extern GPSFrameDefaultTypeInternal _GPSFrame_default_instance_;
class GPSFrameRaw;
class GPSFrameRawDefaultTypeInternal;
extern GPSFrameRawDefaultTypeInternal _GPSFrameRaw_default_instance_;
class IMUFrame;
class IMUFrameDefaultTypeInternal;
extern IMUFrameDefaultTypeInternal _IMUFrame_default_instance_;
}  // namespace SensorProto
PROTOBUF_NAMESPACE_OPEN
template<> ::SensorProto::GPSFrame* Arena::CreateMaybeMessage<::SensorProto::GPSFrame>(Arena*);
template<> ::SensorProto::GPSFrameRaw* Arena::CreateMaybeMessage<::SensorProto::GPSFrameRaw>(Arena*);
template<> ::SensorProto::IMUFrame* Arena::CreateMaybeMessage<::SensorProto::IMUFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SensorProto {

// ===================================================================

class IMUFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SensorProto.IMUFrame) */ {
 public:
  inline IMUFrame() : IMUFrame(nullptr) {}
  virtual ~IMUFrame();

  IMUFrame(const IMUFrame& from);
  IMUFrame(IMUFrame&& from) noexcept
    : IMUFrame() {
    *this = ::std::move(from);
  }

  inline IMUFrame& operator=(const IMUFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUFrame& operator=(IMUFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMUFrame& default_instance();

  static inline const IMUFrame* internal_default_instance() {
    return reinterpret_cast<const IMUFrame*>(
               &_IMUFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMUFrame& a, IMUFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUFrame* New() const final {
    return CreateMaybeMessage<IMUFrame>(nullptr);
  }

  IMUFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMUFrame& from);
  void MergeFrom(const IMUFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SensorProto.IMUFrame";
  }
  protected:
  explicit IMUFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_2eproto);
    return ::descriptor_table_sensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccXFieldNumber = 1,
    kAccYFieldNumber = 2,
    kAccZFieldNumber = 3,
    kGyroXFieldNumber = 4,
    kGyroYFieldNumber = 5,
    kGyroZFieldNumber = 6,
    kTimeStampFieldNumber = 8,
    kTemperatureFieldNumber = 7,
  };
  // optional float acc_x = 1;
  bool has_acc_x() const;
  private:
  bool _internal_has_acc_x() const;
  public:
  void clear_acc_x();
  float acc_x() const;
  void set_acc_x(float value);
  private:
  float _internal_acc_x() const;
  void _internal_set_acc_x(float value);
  public:

  // optional float acc_y = 2;
  bool has_acc_y() const;
  private:
  bool _internal_has_acc_y() const;
  public:
  void clear_acc_y();
  float acc_y() const;
  void set_acc_y(float value);
  private:
  float _internal_acc_y() const;
  void _internal_set_acc_y(float value);
  public:

  // optional float acc_z = 3;
  bool has_acc_z() const;
  private:
  bool _internal_has_acc_z() const;
  public:
  void clear_acc_z();
  float acc_z() const;
  void set_acc_z(float value);
  private:
  float _internal_acc_z() const;
  void _internal_set_acc_z(float value);
  public:

  // optional float gyro_x = 4;
  bool has_gyro_x() const;
  private:
  bool _internal_has_gyro_x() const;
  public:
  void clear_gyro_x();
  float gyro_x() const;
  void set_gyro_x(float value);
  private:
  float _internal_gyro_x() const;
  void _internal_set_gyro_x(float value);
  public:

  // optional float gyro_y = 5;
  bool has_gyro_y() const;
  private:
  bool _internal_has_gyro_y() const;
  public:
  void clear_gyro_y();
  float gyro_y() const;
  void set_gyro_y(float value);
  private:
  float _internal_gyro_y() const;
  void _internal_set_gyro_y(float value);
  public:

  // optional float gyro_z = 6;
  bool has_gyro_z() const;
  private:
  bool _internal_has_gyro_z() const;
  public:
  void clear_gyro_z();
  float gyro_z() const;
  void set_gyro_z(float value);
  private:
  float _internal_gyro_z() const;
  void _internal_set_gyro_z(float value);
  public:

  // required int64 time_stamp = 8;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float temperature = 7;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // @@protoc_insertion_point(class_scope:SensorProto.IMUFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float acc_x_;
  float acc_y_;
  float acc_z_;
  float gyro_x_;
  float gyro_y_;
  float gyro_z_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  float temperature_;
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class GPSFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SensorProto.GPSFrame) */ {
 public:
  inline GPSFrame() : GPSFrame(nullptr) {}
  virtual ~GPSFrame();

  GPSFrame(const GPSFrame& from);
  GPSFrame(GPSFrame&& from) noexcept
    : GPSFrame() {
    *this = ::std::move(from);
  }

  inline GPSFrame& operator=(const GPSFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSFrame& operator=(GPSFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSFrame& default_instance();

  static inline const GPSFrame* internal_default_instance() {
    return reinterpret_cast<const GPSFrame*>(
               &_GPSFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GPSFrame& a, GPSFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPSFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSFrame* New() const final {
    return CreateMaybeMessage<GPSFrame>(nullptr);
  }

  GPSFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSFrame& from);
  void MergeFrom(const GPSFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SensorProto.GPSFrame";
  }
  protected:
  explicit GPSFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_2eproto);
    return ::descriptor_table_sensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeDirFieldNumber = 5,
    kLatitudeDirFieldNumber = 7,
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kTimeStampFieldNumber = 3,
    kLongitudeCentFieldNumber = 4,
    kLatitudeCentFieldNumber = 6,
    kGroundSpeedFieldNumber = 8,
    kGroundCourseFieldNumber = 9,
    kGpsTimeFieldNumber = 10,
    kAltitudeFieldNumber = 11,
    kAccuracyFieldNumber = 12,
  };
  // optional string longitude_dir = 5;
  bool has_longitude_dir() const;
  private:
  bool _internal_has_longitude_dir() const;
  public:
  void clear_longitude_dir();
  const std::string& longitude_dir() const;
  void set_longitude_dir(const std::string& value);
  void set_longitude_dir(std::string&& value);
  void set_longitude_dir(const char* value);
  void set_longitude_dir(const char* value, size_t size);
  std::string* mutable_longitude_dir();
  std::string* release_longitude_dir();
  void set_allocated_longitude_dir(std::string* longitude_dir);
  private:
  const std::string& _internal_longitude_dir() const;
  void _internal_set_longitude_dir(const std::string& value);
  std::string* _internal_mutable_longitude_dir();
  public:

  // optional string latitude_dir = 7;
  bool has_latitude_dir() const;
  private:
  bool _internal_has_latitude_dir() const;
  public:
  void clear_latitude_dir();
  const std::string& latitude_dir() const;
  void set_latitude_dir(const std::string& value);
  void set_latitude_dir(std::string&& value);
  void set_latitude_dir(const char* value);
  void set_latitude_dir(const char* value, size_t size);
  std::string* mutable_latitude_dir();
  std::string* release_latitude_dir();
  void set_allocated_latitude_dir(std::string* latitude_dir);
  private:
  const std::string& _internal_latitude_dir() const;
  void _internal_set_latitude_dir(const std::string& value);
  std::string* _internal_mutable_latitude_dir();
  public:

  // required float longitude = 1;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // required float latitude = 2;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // required int64 time_stamp = 3;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float longitude_cent = 4;
  bool has_longitude_cent() const;
  private:
  bool _internal_has_longitude_cent() const;
  public:
  void clear_longitude_cent();
  float longitude_cent() const;
  void set_longitude_cent(float value);
  private:
  float _internal_longitude_cent() const;
  void _internal_set_longitude_cent(float value);
  public:

  // optional float latitude_cent = 6;
  bool has_latitude_cent() const;
  private:
  bool _internal_has_latitude_cent() const;
  public:
  void clear_latitude_cent();
  float latitude_cent() const;
  void set_latitude_cent(float value);
  private:
  float _internal_latitude_cent() const;
  void _internal_set_latitude_cent(float value);
  public:

  // optional float ground_speed = 8;
  bool has_ground_speed() const;
  private:
  bool _internal_has_ground_speed() const;
  public:
  void clear_ground_speed();
  float ground_speed() const;
  void set_ground_speed(float value);
  private:
  float _internal_ground_speed() const;
  void _internal_set_ground_speed(float value);
  public:

  // optional float ground_course = 9;
  bool has_ground_course() const;
  private:
  bool _internal_has_ground_course() const;
  public:
  void clear_ground_course();
  float ground_course() const;
  void set_ground_course(float value);
  private:
  float _internal_ground_course() const;
  void _internal_set_ground_course(float value);
  public:

  // optional int64 gps_time = 10;
  bool has_gps_time() const;
  private:
  bool _internal_has_gps_time() const;
  public:
  void clear_gps_time();
  ::PROTOBUF_NAMESPACE_ID::int64 gps_time() const;
  void set_gps_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gps_time() const;
  void _internal_set_gps_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float altitude = 11;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);
  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);
  public:

  // optional float accuracy = 12;
  bool has_accuracy() const;
  private:
  bool _internal_has_accuracy() const;
  public:
  void clear_accuracy();
  float accuracy() const;
  void set_accuracy(float value);
  private:
  float _internal_accuracy() const;
  void _internal_set_accuracy(float value);
  public:

  // @@protoc_insertion_point(class_scope:SensorProto.GPSFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_dir_;
  float longitude_;
  float latitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  float longitude_cent_;
  float latitude_cent_;
  float ground_speed_;
  float ground_course_;
  ::PROTOBUF_NAMESPACE_ID::int64 gps_time_;
  float altitude_;
  float accuracy_;
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class GPSFrameRaw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SensorProto.GPSFrameRaw) */ {
 public:
  inline GPSFrameRaw() : GPSFrameRaw(nullptr) {}
  virtual ~GPSFrameRaw();

  GPSFrameRaw(const GPSFrameRaw& from);
  GPSFrameRaw(GPSFrameRaw&& from) noexcept
    : GPSFrameRaw() {
    *this = ::std::move(from);
  }

  inline GPSFrameRaw& operator=(const GPSFrameRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSFrameRaw& operator=(GPSFrameRaw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSFrameRaw& default_instance();

  static inline const GPSFrameRaw* internal_default_instance() {
    return reinterpret_cast<const GPSFrameRaw*>(
               &_GPSFrameRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GPSFrameRaw& a, GPSFrameRaw& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSFrameRaw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPSFrameRaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSFrameRaw* New() const final {
    return CreateMaybeMessage<GPSFrameRaw>(nullptr);
  }

  GPSFrameRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSFrameRaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSFrameRaw& from);
  void MergeFrom(const GPSFrameRaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSFrameRaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SensorProto.GPSFrameRaw";
  }
  protected:
  explicit GPSFrameRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_2eproto);
    return ::descriptor_table_sensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kParsedFieldNumber = 3,
    kTimeStampFieldNumber = 2,
  };
  // optional string info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // optional .SensorProto.GPSFrame parsed = 3;
  bool has_parsed() const;
  private:
  bool _internal_has_parsed() const;
  public:
  void clear_parsed();
  const ::SensorProto::GPSFrame& parsed() const;
  ::SensorProto::GPSFrame* release_parsed();
  ::SensorProto::GPSFrame* mutable_parsed();
  void set_allocated_parsed(::SensorProto::GPSFrame* parsed);
  private:
  const ::SensorProto::GPSFrame& _internal_parsed() const;
  ::SensorProto::GPSFrame* _internal_mutable_parsed();
  public:
  void unsafe_arena_set_allocated_parsed(
      ::SensorProto::GPSFrame* parsed);
  ::SensorProto::GPSFrame* unsafe_arena_release_parsed();

  // required int64 time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:SensorProto.GPSFrameRaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::SensorProto::GPSFrame* parsed_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  friend struct ::TableStruct_sensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMUFrame

// optional float acc_x = 1;
inline bool IMUFrame::_internal_has_acc_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMUFrame::has_acc_x() const {
  return _internal_has_acc_x();
}
inline void IMUFrame::clear_acc_x() {
  acc_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float IMUFrame::_internal_acc_x() const {
  return acc_x_;
}
inline float IMUFrame::acc_x() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.acc_x)
  return _internal_acc_x();
}
inline void IMUFrame::_internal_set_acc_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  acc_x_ = value;
}
inline void IMUFrame::set_acc_x(float value) {
  _internal_set_acc_x(value);
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.acc_x)
}

// optional float acc_y = 2;
inline bool IMUFrame::_internal_has_acc_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IMUFrame::has_acc_y() const {
  return _internal_has_acc_y();
}
inline void IMUFrame::clear_acc_y() {
  acc_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float IMUFrame::_internal_acc_y() const {
  return acc_y_;
}
inline float IMUFrame::acc_y() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.acc_y)
  return _internal_acc_y();
}
inline void IMUFrame::_internal_set_acc_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  acc_y_ = value;
}
inline void IMUFrame::set_acc_y(float value) {
  _internal_set_acc_y(value);
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.acc_y)
}

// optional float acc_z = 3;
inline bool IMUFrame::_internal_has_acc_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IMUFrame::has_acc_z() const {
  return _internal_has_acc_z();
}
inline void IMUFrame::clear_acc_z() {
  acc_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float IMUFrame::_internal_acc_z() const {
  return acc_z_;
}
inline float IMUFrame::acc_z() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.acc_z)
  return _internal_acc_z();
}
inline void IMUFrame::_internal_set_acc_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  acc_z_ = value;
}
inline void IMUFrame::set_acc_z(float value) {
  _internal_set_acc_z(value);
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.acc_z)
}

// optional float gyro_x = 4;
inline bool IMUFrame::_internal_has_gyro_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IMUFrame::has_gyro_x() const {
  return _internal_has_gyro_x();
}
inline void IMUFrame::clear_gyro_x() {
  gyro_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float IMUFrame::_internal_gyro_x() const {
  return gyro_x_;
}
inline float IMUFrame::gyro_x() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.gyro_x)
  return _internal_gyro_x();
}
inline void IMUFrame::_internal_set_gyro_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  gyro_x_ = value;
}
inline void IMUFrame::set_gyro_x(float value) {
  _internal_set_gyro_x(value);
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.gyro_x)
}

// optional float gyro_y = 5;
inline bool IMUFrame::_internal_has_gyro_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IMUFrame::has_gyro_y() const {
  return _internal_has_gyro_y();
}
inline void IMUFrame::clear_gyro_y() {
  gyro_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float IMUFrame::_internal_gyro_y() const {
  return gyro_y_;
}
inline float IMUFrame::gyro_y() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.gyro_y)
  return _internal_gyro_y();
}
inline void IMUFrame::_internal_set_gyro_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  gyro_y_ = value;
}
inline void IMUFrame::set_gyro_y(float value) {
  _internal_set_gyro_y(value);
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.gyro_y)
}

// optional float gyro_z = 6;
inline bool IMUFrame::_internal_has_gyro_z() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IMUFrame::has_gyro_z() const {
  return _internal_has_gyro_z();
}
inline void IMUFrame::clear_gyro_z() {
  gyro_z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float IMUFrame::_internal_gyro_z() const {
  return gyro_z_;
}
inline float IMUFrame::gyro_z() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.gyro_z)
  return _internal_gyro_z();
}
inline void IMUFrame::_internal_set_gyro_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  gyro_z_ = value;
}
inline void IMUFrame::set_gyro_z(float value) {
  _internal_set_gyro_z(value);
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.gyro_z)
}

// optional float temperature = 7;
inline bool IMUFrame::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IMUFrame::has_temperature() const {
  return _internal_has_temperature();
}
inline void IMUFrame::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float IMUFrame::_internal_temperature() const {
  return temperature_;
}
inline float IMUFrame::temperature() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.temperature)
  return _internal_temperature();
}
inline void IMUFrame::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00000080u;
  temperature_ = value;
}
inline void IMUFrame::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.temperature)
}

// required int64 time_stamp = 8;
inline bool IMUFrame::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IMUFrame::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void IMUFrame::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IMUFrame::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IMUFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.time_stamp)
  return _internal_time_stamp();
}
inline void IMUFrame::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  time_stamp_ = value;
}
inline void IMUFrame::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.time_stamp)
}

// -------------------------------------------------------------------

// GPSFrame

// required float longitude = 1;
inline bool GPSFrame::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GPSFrame::has_longitude() const {
  return _internal_has_longitude();
}
inline void GPSFrame::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float GPSFrame::_internal_longitude() const {
  return longitude_;
}
inline float GPSFrame::longitude() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.longitude)
  return _internal_longitude();
}
inline void GPSFrame::_internal_set_longitude(float value) {
  _has_bits_[0] |= 0x00000004u;
  longitude_ = value;
}
inline void GPSFrame::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.longitude)
}

// required float latitude = 2;
inline bool GPSFrame::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GPSFrame::has_latitude() const {
  return _internal_has_latitude();
}
inline void GPSFrame::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float GPSFrame::_internal_latitude() const {
  return latitude_;
}
inline float GPSFrame::latitude() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.latitude)
  return _internal_latitude();
}
inline void GPSFrame::_internal_set_latitude(float value) {
  _has_bits_[0] |= 0x00000008u;
  latitude_ = value;
}
inline void GPSFrame::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.latitude)
}

// required int64 time_stamp = 3;
inline bool GPSFrame::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GPSFrame::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void GPSFrame::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPSFrame::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPSFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.time_stamp)
  return _internal_time_stamp();
}
inline void GPSFrame::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
}
inline void GPSFrame::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.time_stamp)
}

// optional float longitude_cent = 4;
inline bool GPSFrame::_internal_has_longitude_cent() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GPSFrame::has_longitude_cent() const {
  return _internal_has_longitude_cent();
}
inline void GPSFrame::clear_longitude_cent() {
  longitude_cent_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float GPSFrame::_internal_longitude_cent() const {
  return longitude_cent_;
}
inline float GPSFrame::longitude_cent() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.longitude_cent)
  return _internal_longitude_cent();
}
inline void GPSFrame::_internal_set_longitude_cent(float value) {
  _has_bits_[0] |= 0x00000020u;
  longitude_cent_ = value;
}
inline void GPSFrame::set_longitude_cent(float value) {
  _internal_set_longitude_cent(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.longitude_cent)
}

// optional string longitude_dir = 5;
inline bool GPSFrame::_internal_has_longitude_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GPSFrame::has_longitude_dir() const {
  return _internal_has_longitude_dir();
}
inline void GPSFrame::clear_longitude_dir() {
  longitude_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GPSFrame::longitude_dir() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.longitude_dir)
  return _internal_longitude_dir();
}
inline void GPSFrame::set_longitude_dir(const std::string& value) {
  _internal_set_longitude_dir(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.longitude_dir)
}
inline std::string* GPSFrame::mutable_longitude_dir() {
  // @@protoc_insertion_point(field_mutable:SensorProto.GPSFrame.longitude_dir)
  return _internal_mutable_longitude_dir();
}
inline const std::string& GPSFrame::_internal_longitude_dir() const {
  return longitude_dir_.Get();
}
inline void GPSFrame::_internal_set_longitude_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  longitude_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GPSFrame::set_longitude_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  longitude_dir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SensorProto.GPSFrame.longitude_dir)
}
inline void GPSFrame::set_longitude_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  longitude_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SensorProto.GPSFrame.longitude_dir)
}
inline void GPSFrame::set_longitude_dir(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  longitude_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SensorProto.GPSFrame.longitude_dir)
}
inline std::string* GPSFrame::_internal_mutable_longitude_dir() {
  _has_bits_[0] |= 0x00000001u;
  return longitude_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GPSFrame::release_longitude_dir() {
  // @@protoc_insertion_point(field_release:SensorProto.GPSFrame.longitude_dir)
  if (!_internal_has_longitude_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return longitude_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GPSFrame::set_allocated_longitude_dir(std::string* longitude_dir) {
  if (longitude_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  longitude_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longitude_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SensorProto.GPSFrame.longitude_dir)
}

// optional float latitude_cent = 6;
inline bool GPSFrame::_internal_has_latitude_cent() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GPSFrame::has_latitude_cent() const {
  return _internal_has_latitude_cent();
}
inline void GPSFrame::clear_latitude_cent() {
  latitude_cent_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float GPSFrame::_internal_latitude_cent() const {
  return latitude_cent_;
}
inline float GPSFrame::latitude_cent() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.latitude_cent)
  return _internal_latitude_cent();
}
inline void GPSFrame::_internal_set_latitude_cent(float value) {
  _has_bits_[0] |= 0x00000040u;
  latitude_cent_ = value;
}
inline void GPSFrame::set_latitude_cent(float value) {
  _internal_set_latitude_cent(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.latitude_cent)
}

// optional string latitude_dir = 7;
inline bool GPSFrame::_internal_has_latitude_dir() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GPSFrame::has_latitude_dir() const {
  return _internal_has_latitude_dir();
}
inline void GPSFrame::clear_latitude_dir() {
  latitude_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GPSFrame::latitude_dir() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.latitude_dir)
  return _internal_latitude_dir();
}
inline void GPSFrame::set_latitude_dir(const std::string& value) {
  _internal_set_latitude_dir(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.latitude_dir)
}
inline std::string* GPSFrame::mutable_latitude_dir() {
  // @@protoc_insertion_point(field_mutable:SensorProto.GPSFrame.latitude_dir)
  return _internal_mutable_latitude_dir();
}
inline const std::string& GPSFrame::_internal_latitude_dir() const {
  return latitude_dir_.Get();
}
inline void GPSFrame::_internal_set_latitude_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  latitude_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GPSFrame::set_latitude_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  latitude_dir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SensorProto.GPSFrame.latitude_dir)
}
inline void GPSFrame::set_latitude_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  latitude_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SensorProto.GPSFrame.latitude_dir)
}
inline void GPSFrame::set_latitude_dir(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  latitude_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SensorProto.GPSFrame.latitude_dir)
}
inline std::string* GPSFrame::_internal_mutable_latitude_dir() {
  _has_bits_[0] |= 0x00000002u;
  return latitude_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GPSFrame::release_latitude_dir() {
  // @@protoc_insertion_point(field_release:SensorProto.GPSFrame.latitude_dir)
  if (!_internal_has_latitude_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return latitude_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GPSFrame::set_allocated_latitude_dir(std::string* latitude_dir) {
  if (latitude_dir != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  latitude_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latitude_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SensorProto.GPSFrame.latitude_dir)
}

// optional float ground_speed = 8;
inline bool GPSFrame::_internal_has_ground_speed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GPSFrame::has_ground_speed() const {
  return _internal_has_ground_speed();
}
inline void GPSFrame::clear_ground_speed() {
  ground_speed_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float GPSFrame::_internal_ground_speed() const {
  return ground_speed_;
}
inline float GPSFrame::ground_speed() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.ground_speed)
  return _internal_ground_speed();
}
inline void GPSFrame::_internal_set_ground_speed(float value) {
  _has_bits_[0] |= 0x00000080u;
  ground_speed_ = value;
}
inline void GPSFrame::set_ground_speed(float value) {
  _internal_set_ground_speed(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.ground_speed)
}

// optional float ground_course = 9;
inline bool GPSFrame::_internal_has_ground_course() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GPSFrame::has_ground_course() const {
  return _internal_has_ground_course();
}
inline void GPSFrame::clear_ground_course() {
  ground_course_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float GPSFrame::_internal_ground_course() const {
  return ground_course_;
}
inline float GPSFrame::ground_course() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.ground_course)
  return _internal_ground_course();
}
inline void GPSFrame::_internal_set_ground_course(float value) {
  _has_bits_[0] |= 0x00000100u;
  ground_course_ = value;
}
inline void GPSFrame::set_ground_course(float value) {
  _internal_set_ground_course(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.ground_course)
}

// optional int64 gps_time = 10;
inline bool GPSFrame::_internal_has_gps_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GPSFrame::has_gps_time() const {
  return _internal_has_gps_time();
}
inline void GPSFrame::clear_gps_time() {
  gps_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPSFrame::_internal_gps_time() const {
  return gps_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPSFrame::gps_time() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.gps_time)
  return _internal_gps_time();
}
inline void GPSFrame::_internal_set_gps_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  gps_time_ = value;
}
inline void GPSFrame::set_gps_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gps_time(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.gps_time)
}

// optional float altitude = 11;
inline bool GPSFrame::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GPSFrame::has_altitude() const {
  return _internal_has_altitude();
}
inline void GPSFrame::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float GPSFrame::_internal_altitude() const {
  return altitude_;
}
inline float GPSFrame::altitude() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.altitude)
  return _internal_altitude();
}
inline void GPSFrame::_internal_set_altitude(float value) {
  _has_bits_[0] |= 0x00000400u;
  altitude_ = value;
}
inline void GPSFrame::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.altitude)
}

// optional float accuracy = 12;
inline bool GPSFrame::_internal_has_accuracy() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GPSFrame::has_accuracy() const {
  return _internal_has_accuracy();
}
inline void GPSFrame::clear_accuracy() {
  accuracy_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float GPSFrame::_internal_accuracy() const {
  return accuracy_;
}
inline float GPSFrame::accuracy() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.accuracy)
  return _internal_accuracy();
}
inline void GPSFrame::_internal_set_accuracy(float value) {
  _has_bits_[0] |= 0x00000800u;
  accuracy_ = value;
}
inline void GPSFrame::set_accuracy(float value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.accuracy)
}

// -------------------------------------------------------------------

// GPSFrameRaw

// optional string info = 1;
inline bool GPSFrameRaw::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GPSFrameRaw::has_info() const {
  return _internal_has_info();
}
inline void GPSFrameRaw::clear_info() {
  info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GPSFrameRaw::info() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrameRaw.info)
  return _internal_info();
}
inline void GPSFrameRaw::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrameRaw.info)
}
inline std::string* GPSFrameRaw::mutable_info() {
  // @@protoc_insertion_point(field_mutable:SensorProto.GPSFrameRaw.info)
  return _internal_mutable_info();
}
inline const std::string& GPSFrameRaw::_internal_info() const {
  return info_.Get();
}
inline void GPSFrameRaw::_internal_set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GPSFrameRaw::set_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SensorProto.GPSFrameRaw.info)
}
inline void GPSFrameRaw::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SensorProto.GPSFrameRaw.info)
}
inline void GPSFrameRaw::set_info(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SensorProto.GPSFrameRaw.info)
}
inline std::string* GPSFrameRaw::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GPSFrameRaw::release_info() {
  // @@protoc_insertion_point(field_release:SensorProto.GPSFrameRaw.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GPSFrameRaw::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SensorProto.GPSFrameRaw.info)
}

// required int64 time_stamp = 2;
inline bool GPSFrameRaw::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GPSFrameRaw::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void GPSFrameRaw::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPSFrameRaw::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPSFrameRaw::time_stamp() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrameRaw.time_stamp)
  return _internal_time_stamp();
}
inline void GPSFrameRaw::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_stamp_ = value;
}
inline void GPSFrameRaw::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrameRaw.time_stamp)
}

// optional .SensorProto.GPSFrame parsed = 3;
inline bool GPSFrameRaw::_internal_has_parsed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || parsed_ != nullptr);
  return value;
}
inline bool GPSFrameRaw::has_parsed() const {
  return _internal_has_parsed();
}
inline void GPSFrameRaw::clear_parsed() {
  if (parsed_ != nullptr) parsed_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SensorProto::GPSFrame& GPSFrameRaw::_internal_parsed() const {
  const ::SensorProto::GPSFrame* p = parsed_;
  return p != nullptr ? *p : reinterpret_cast<const ::SensorProto::GPSFrame&>(
      ::SensorProto::_GPSFrame_default_instance_);
}
inline const ::SensorProto::GPSFrame& GPSFrameRaw::parsed() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrameRaw.parsed)
  return _internal_parsed();
}
inline void GPSFrameRaw::unsafe_arena_set_allocated_parsed(
    ::SensorProto::GPSFrame* parsed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parsed_);
  }
  parsed_ = parsed;
  if (parsed) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorProto.GPSFrameRaw.parsed)
}
inline ::SensorProto::GPSFrame* GPSFrameRaw::release_parsed() {
  _has_bits_[0] &= ~0x00000002u;
  ::SensorProto::GPSFrame* temp = parsed_;
  parsed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SensorProto::GPSFrame* GPSFrameRaw::unsafe_arena_release_parsed() {
  // @@protoc_insertion_point(field_release:SensorProto.GPSFrameRaw.parsed)
  _has_bits_[0] &= ~0x00000002u;
  ::SensorProto::GPSFrame* temp = parsed_;
  parsed_ = nullptr;
  return temp;
}
inline ::SensorProto::GPSFrame* GPSFrameRaw::_internal_mutable_parsed() {
  _has_bits_[0] |= 0x00000002u;
  if (parsed_ == nullptr) {
    auto* p = CreateMaybeMessage<::SensorProto::GPSFrame>(GetArena());
    parsed_ = p;
  }
  return parsed_;
}
inline ::SensorProto::GPSFrame* GPSFrameRaw::mutable_parsed() {
  // @@protoc_insertion_point(field_mutable:SensorProto.GPSFrameRaw.parsed)
  return _internal_mutable_parsed();
}
inline void GPSFrameRaw::set_allocated_parsed(::SensorProto::GPSFrame* parsed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parsed_;
  }
  if (parsed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parsed);
    if (message_arena != submessage_arena) {
      parsed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parsed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parsed_ = parsed;
  // @@protoc_insertion_point(field_set_allocated:SensorProto.GPSFrameRaw.parsed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
