# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2_mono/WorldSpaceInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2_mono.msg

class WorldSpaceInfo(genpy.Message):
  _md5sum = "06b0dcae51474264c1f32cddd4cb2623"
  _type = "j2_mono/WorldSpaceInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 yaw #rad
Velocity vel #m/s relative velocity
float32 length # real length of the obstacle in world coordinate
float32 width # real width
float32 height # real height
Polygon poly # 
Point position # real position of the obstacle in world coordinate
int32 traversable
float32 hmw
float32 ttc
int32 curr_lane
float32 sigma_yaw
float32[] sigma_vel
float32 sigma_width
float32 sigma_height
float32[] sigma_position


================================================================================
MSG: j2_mono/Velocity
float32 vx
float32 vy
float32 vz

================================================================================
MSG: j2_mono/Polygon
Point[] pts

================================================================================
MSG: j2_mono/Point
float32 x
float32 y
float32 z
"""
  __slots__ = ['yaw','vel','length','width','height','poly','position','traversable','hmw','ttc','curr_lane','sigma_yaw','sigma_vel','sigma_width','sigma_height','sigma_position']
  _slot_types = ['float32','j2_mono/Velocity','float32','float32','float32','j2_mono/Polygon','j2_mono/Point','int32','float32','float32','int32','float32','float32[]','float32','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       yaw,vel,length,width,height,poly,position,traversable,hmw,ttc,curr_lane,sigma_yaw,sigma_vel,sigma_width,sigma_height,sigma_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WorldSpaceInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.yaw is None:
        self.yaw = 0.
      if self.vel is None:
        self.vel = j2_mono.msg.Velocity()
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.poly is None:
        self.poly = j2_mono.msg.Polygon()
      if self.position is None:
        self.position = j2_mono.msg.Point()
      if self.traversable is None:
        self.traversable = 0
      if self.hmw is None:
        self.hmw = 0.
      if self.ttc is None:
        self.ttc = 0.
      if self.curr_lane is None:
        self.curr_lane = 0
      if self.sigma_yaw is None:
        self.sigma_yaw = 0.
      if self.sigma_vel is None:
        self.sigma_vel = []
      if self.sigma_width is None:
        self.sigma_width = 0.
      if self.sigma_height is None:
        self.sigma_height = 0.
      if self.sigma_position is None:
        self.sigma_position = []
    else:
      self.yaw = 0.
      self.vel = j2_mono.msg.Velocity()
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.poly = j2_mono.msg.Polygon()
      self.position = j2_mono.msg.Point()
      self.traversable = 0
      self.hmw = 0.
      self.ttc = 0.
      self.curr_lane = 0
      self.sigma_yaw = 0.
      self.sigma_vel = []
      self.sigma_width = 0.
      self.sigma_height = 0.
      self.sigma_position = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.yaw, _x.vel.vx, _x.vel.vy, _x.vel.vz, _x.length, _x.width, _x.height))
      length = len(self.poly.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly.pts:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3fi2fif().pack(_x.position.x, _x.position.y, _x.position.z, _x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw))
      length = len(self.sigma_vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.sigma_vel))
      _x = self
      buff.write(_get_struct_2f().pack(_x.sigma_width, _x.sigma_height))
      length = len(self.sigma_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.sigma_position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.vel is None:
        self.vel = j2_mono.msg.Velocity()
      if self.poly is None:
        self.poly = j2_mono.msg.Polygon()
      if self.position is None:
        self.position = j2_mono.msg.Point()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.yaw, _x.vel.vx, _x.vel.vy, _x.vel.vz, _x.length, _x.width, _x.height,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly.pts = []
      for i in range(0, length):
        val1 = j2_mono.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.poly.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.position.x, _x.position.y, _x.position.z, _x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw,) = _get_struct_3fi2fif().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sigma_vel = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.sigma_width, _x.sigma_height,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sigma_position = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.yaw, _x.vel.vx, _x.vel.vy, _x.vel.vz, _x.length, _x.width, _x.height))
      length = len(self.poly.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly.pts:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3fi2fif().pack(_x.position.x, _x.position.y, _x.position.z, _x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw))
      length = len(self.sigma_vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sigma_vel.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.sigma_width, _x.sigma_height))
      length = len(self.sigma_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sigma_position.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.vel is None:
        self.vel = j2_mono.msg.Velocity()
      if self.poly is None:
        self.poly = j2_mono.msg.Polygon()
      if self.position is None:
        self.position = j2_mono.msg.Point()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.yaw, _x.vel.vx, _x.vel.vy, _x.vel.vz, _x.length, _x.width, _x.height,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly.pts = []
      for i in range(0, length):
        val1 = j2_mono.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.poly.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.position.x, _x.position.y, _x.position.z, _x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw,) = _get_struct_3fi2fif().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sigma_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.sigma_width, _x.sigma_height,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sigma_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3fi2fif = None
def _get_struct_3fi2fif():
    global _struct_3fi2fif
    if _struct_3fi2fif is None:
        _struct_3fi2fif = struct.Struct("<3fi2fif")
    return _struct_3fi2fif
