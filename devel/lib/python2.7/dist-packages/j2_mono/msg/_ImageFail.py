# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2_mono/ImageFail.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2_mono.msg

class ImageFail(genpy.Message):
  _md5sum = "b75b6afa1e707dc499267f7da2b60b6c"
  _type = "j2_mono/ImageFail"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 cam_id
int32 frame_id
int32 fail_type #IMG_NORMAL=0, IMG_BLUR=1, IMG_SHELTER=2, IMG_FREEZE=4, IMG_GLARE=8
int32 level #FAIL_NONE=0, FAIL_MILD=1, FAIL_MODERATE=2, FAIL_SEVERE=3
Polygon[] regions

================================================================================
MSG: j2_mono/Polygon
Point[] pts

================================================================================
MSG: j2_mono/Point
float32 x
float32 y
float32 z
"""
  __slots__ = ['cam_id','frame_id','fail_type','level','regions']
  _slot_types = ['int32','int32','int32','int32','j2_mono/Polygon[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cam_id,frame_id,fail_type,level,regions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImageFail, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cam_id is None:
        self.cam_id = 0
      if self.frame_id is None:
        self.frame_id = 0
      if self.fail_type is None:
        self.fail_type = 0
      if self.level is None:
        self.level = 0
      if self.regions is None:
        self.regions = []
    else:
      self.cam_id = 0
      self.frame_id = 0
      self.fail_type = 0
      self.level = 0
      self.regions = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.cam_id, _x.frame_id, _x.fail_type, _x.level))
      length = len(self.regions)
      buff.write(_struct_I.pack(length))
      for val1 in self.regions:
        length = len(val1.pts)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.regions is None:
        self.regions = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.cam_id, _x.frame_id, _x.fail_type, _x.level,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.regions = []
      for i in range(0, length):
        val1 = j2_mono.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts = []
        for i in range(0, length):
          val2 = j2_mono.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.pts.append(val2)
        self.regions.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.cam_id, _x.frame_id, _x.fail_type, _x.level))
      length = len(self.regions)
      buff.write(_struct_I.pack(length))
      for val1 in self.regions:
        length = len(val1.pts)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.regions is None:
        self.regions = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.cam_id, _x.frame_id, _x.fail_type, _x.level,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.regions = []
      for i in range(0, length):
        val1 = j2_mono.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts = []
        for i in range(0, length):
          val2 = j2_mono.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.pts.append(val2)
        self.regions.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
