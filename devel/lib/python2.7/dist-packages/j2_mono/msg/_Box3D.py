# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2_mono/Box3D.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2_mono.msg

class Box3D(genpy.Message):
  _md5sum = "d2a4c3bc64f81e95d0c37d470dea3708"
  _type = "j2_mono/Box3D"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Point lower_lt
Point lower_lb
Point lower_rb
Point lower_rt
Point upper_lt
Point upper_lb
Point upper_rb
Point upper_rt
float32 conf

================================================================================
MSG: j2_mono/Point
float32 x
float32 y
float32 z
"""
  __slots__ = ['lower_lt','lower_lb','lower_rb','lower_rt','upper_lt','upper_lb','upper_rb','upper_rt','conf']
  _slot_types = ['j2_mono/Point','j2_mono/Point','j2_mono/Point','j2_mono/Point','j2_mono/Point','j2_mono/Point','j2_mono/Point','j2_mono/Point','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lower_lt,lower_lb,lower_rb,lower_rt,upper_lt,upper_lb,upper_rb,upper_rt,conf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Box3D, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lower_lt is None:
        self.lower_lt = j2_mono.msg.Point()
      if self.lower_lb is None:
        self.lower_lb = j2_mono.msg.Point()
      if self.lower_rb is None:
        self.lower_rb = j2_mono.msg.Point()
      if self.lower_rt is None:
        self.lower_rt = j2_mono.msg.Point()
      if self.upper_lt is None:
        self.upper_lt = j2_mono.msg.Point()
      if self.upper_lb is None:
        self.upper_lb = j2_mono.msg.Point()
      if self.upper_rb is None:
        self.upper_rb = j2_mono.msg.Point()
      if self.upper_rt is None:
        self.upper_rt = j2_mono.msg.Point()
      if self.conf is None:
        self.conf = 0.
    else:
      self.lower_lt = j2_mono.msg.Point()
      self.lower_lb = j2_mono.msg.Point()
      self.lower_rb = j2_mono.msg.Point()
      self.lower_rt = j2_mono.msg.Point()
      self.upper_lt = j2_mono.msg.Point()
      self.upper_lb = j2_mono.msg.Point()
      self.upper_rb = j2_mono.msg.Point()
      self.upper_rt = j2_mono.msg.Point()
      self.conf = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_25f().pack(_x.lower_lt.x, _x.lower_lt.y, _x.lower_lt.z, _x.lower_lb.x, _x.lower_lb.y, _x.lower_lb.z, _x.lower_rb.x, _x.lower_rb.y, _x.lower_rb.z, _x.lower_rt.x, _x.lower_rt.y, _x.lower_rt.z, _x.upper_lt.x, _x.upper_lt.y, _x.upper_lt.z, _x.upper_lb.x, _x.upper_lb.y, _x.upper_lb.z, _x.upper_rb.x, _x.upper_rb.y, _x.upper_rb.z, _x.upper_rt.x, _x.upper_rt.y, _x.upper_rt.z, _x.conf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.lower_lt is None:
        self.lower_lt = j2_mono.msg.Point()
      if self.lower_lb is None:
        self.lower_lb = j2_mono.msg.Point()
      if self.lower_rb is None:
        self.lower_rb = j2_mono.msg.Point()
      if self.lower_rt is None:
        self.lower_rt = j2_mono.msg.Point()
      if self.upper_lt is None:
        self.upper_lt = j2_mono.msg.Point()
      if self.upper_lb is None:
        self.upper_lb = j2_mono.msg.Point()
      if self.upper_rb is None:
        self.upper_rb = j2_mono.msg.Point()
      if self.upper_rt is None:
        self.upper_rt = j2_mono.msg.Point()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.lower_lt.x, _x.lower_lt.y, _x.lower_lt.z, _x.lower_lb.x, _x.lower_lb.y, _x.lower_lb.z, _x.lower_rb.x, _x.lower_rb.y, _x.lower_rb.z, _x.lower_rt.x, _x.lower_rt.y, _x.lower_rt.z, _x.upper_lt.x, _x.upper_lt.y, _x.upper_lt.z, _x.upper_lb.x, _x.upper_lb.y, _x.upper_lb.z, _x.upper_rb.x, _x.upper_rb.y, _x.upper_rb.z, _x.upper_rt.x, _x.upper_rt.y, _x.upper_rt.z, _x.conf,) = _get_struct_25f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_25f().pack(_x.lower_lt.x, _x.lower_lt.y, _x.lower_lt.z, _x.lower_lb.x, _x.lower_lb.y, _x.lower_lb.z, _x.lower_rb.x, _x.lower_rb.y, _x.lower_rb.z, _x.lower_rt.x, _x.lower_rt.y, _x.lower_rt.z, _x.upper_lt.x, _x.upper_lt.y, _x.upper_lt.z, _x.upper_lb.x, _x.upper_lb.y, _x.upper_lb.z, _x.upper_rb.x, _x.upper_rb.y, _x.upper_rb.z, _x.upper_rt.x, _x.upper_rt.y, _x.upper_rt.z, _x.conf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.lower_lt is None:
        self.lower_lt = j2_mono.msg.Point()
      if self.lower_lb is None:
        self.lower_lb = j2_mono.msg.Point()
      if self.lower_rb is None:
        self.lower_rb = j2_mono.msg.Point()
      if self.lower_rt is None:
        self.lower_rt = j2_mono.msg.Point()
      if self.upper_lt is None:
        self.upper_lt = j2_mono.msg.Point()
      if self.upper_lb is None:
        self.upper_lb = j2_mono.msg.Point()
      if self.upper_rb is None:
        self.upper_rb = j2_mono.msg.Point()
      if self.upper_rt is None:
        self.upper_rt = j2_mono.msg.Point()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.lower_lt.x, _x.lower_lt.y, _x.lower_lt.z, _x.lower_lb.x, _x.lower_lb.y, _x.lower_lb.z, _x.lower_rb.x, _x.lower_rb.y, _x.lower_rb.z, _x.lower_rt.x, _x.lower_rt.y, _x.lower_rt.z, _x.upper_lt.x, _x.upper_lt.y, _x.upper_lt.z, _x.upper_lb.x, _x.upper_lb.y, _x.upper_lb.z, _x.upper_rb.x, _x.upper_rb.y, _x.upper_rb.z, _x.upper_rt.x, _x.upper_rt.y, _x.upper_rt.z, _x.conf,) = _get_struct_25f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_25f = None
def _get_struct_25f():
    global _struct_25f
    if _struct_25f is None:
        _struct_25f = struct.Struct("<25f")
    return _struct_25f
