# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2_mono/Line.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2_mono.msg

class Line(genpy.Message):
  _md5sum = "5f428496e74b1f87cdeb56e87ec4d4bf"
  _type = "j2_mono/Line"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id
int32 life_time
float32[] coeffs
Point[] end_points
int32 type #LINE_DOUBLE=512, LINE_DASH=1024, LINE_SOLID=2048
int32 source #LINE_PERCEPTION=2097152, LINE_TRACKING=4194304
float32 dist_to_front_wheel
float32 width
int32 type_sibling
float32 conf
float32[] sigma_coeffs


================================================================================
MSG: j2_mono/Point
float32 x
float32 y
float32 z
"""
  __slots__ = ['id','life_time','coeffs','end_points','type','source','dist_to_front_wheel','width','type_sibling','conf','sigma_coeffs']
  _slot_types = ['int32','int32','float32[]','j2_mono/Point[]','int32','int32','float32','float32','int32','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,life_time,coeffs,end_points,type,source,dist_to_front_wheel,width,type_sibling,conf,sigma_coeffs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Line, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.life_time is None:
        self.life_time = 0
      if self.coeffs is None:
        self.coeffs = []
      if self.end_points is None:
        self.end_points = []
      if self.type is None:
        self.type = 0
      if self.source is None:
        self.source = 0
      if self.dist_to_front_wheel is None:
        self.dist_to_front_wheel = 0.
      if self.width is None:
        self.width = 0.
      if self.type_sibling is None:
        self.type_sibling = 0
      if self.conf is None:
        self.conf = 0.
      if self.sigma_coeffs is None:
        self.sigma_coeffs = []
    else:
      self.id = 0
      self.life_time = 0
      self.coeffs = []
      self.end_points = []
      self.type = 0
      self.source = 0
      self.dist_to_front_wheel = 0.
      self.width = 0.
      self.type_sibling = 0
      self.conf = 0.
      self.sigma_coeffs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.id, _x.life_time))
      length = len(self.coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.coeffs))
      length = len(self.end_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.end_points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2i2fif().pack(_x.type, _x.source, _x.dist_to_front_wheel, _x.width, _x.type_sibling, _x.conf))
      length = len(self.sigma_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.sigma_coeffs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.end_points is None:
        self.end_points = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.id, _x.life_time,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.coeffs = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.end_points = []
      for i in range(0, length):
        val1 = j2_mono.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.end_points.append(val1)
      _x = self
      start = end
      end += 24
      (_x.type, _x.source, _x.dist_to_front_wheel, _x.width, _x.type_sibling, _x.conf,) = _get_struct_2i2fif().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sigma_coeffs = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.id, _x.life_time))
      length = len(self.coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.coeffs.tostring())
      length = len(self.end_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.end_points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2i2fif().pack(_x.type, _x.source, _x.dist_to_front_wheel, _x.width, _x.type_sibling, _x.conf))
      length = len(self.sigma_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sigma_coeffs.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.end_points is None:
        self.end_points = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.id, _x.life_time,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.end_points = []
      for i in range(0, length):
        val1 = j2_mono.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.end_points.append(val1)
      _x = self
      start = end
      end += 24
      (_x.type, _x.source, _x.dist_to_front_wheel, _x.width, _x.type_sibling, _x.conf,) = _get_struct_2i2fif().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sigma_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2fif = None
def _get_struct_2i2fif():
    global _struct_2i2fif
    if _struct_2i2fif is None:
        _struct_2i2fif = struct.Struct("<2i2fif")
    return _struct_2i2fif
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
