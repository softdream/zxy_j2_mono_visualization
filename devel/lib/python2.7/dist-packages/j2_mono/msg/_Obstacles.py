# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2_mono/Obstacles.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2_mono.msg

class Obstacles(genpy.Message):
  _md5sum = "b666125b67b55ba2c6622f953580c9ac"
  _type = "j2_mono/Obstacles"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 cam_id
Obstacle[] obstacle
float32 conf_scale # default 0.1

================================================================================
MSG: j2_mono/Obstacle
int32 id
int32 type #ObstacleType_VehicleRear=0, ObstacleType_VehicleFull=1, ObstacleType_Pedestrian=2, ObstacleType_TrafficSign=3, ObstacleType_TrafficLight=4, ObstacleType_ParkingSlot=5, ObstacleType_RoadSign=6, ObstacleType_Cyclist=18
int32 conf
int32 life_time
int32 age
ImageSpaceInfo img_info
WorldSpaceInfo world_info
int32[] property #
string[] property_name
int32[] property_type
float32[] property_conf
int8[] tracking_fmap


================================================================================
MSG: j2_mono/ImageSpaceInfo
Rect rect
Box3D box
Polygon poly
float32 sigma_width
float32 sigma_height
float32 sigma_x
float32 sigma_y

================================================================================
MSG: j2_mono/Rect
float32 left
float32 top
float32 right
float32 bottom

================================================================================
MSG: j2_mono/Box3D
Point lower_lt
Point lower_lb
Point lower_rb
Point lower_rt
Point upper_lt
Point upper_lb
Point upper_rb
Point upper_rt
float32 conf

================================================================================
MSG: j2_mono/Point
float32 x
float32 y
float32 z

================================================================================
MSG: j2_mono/Polygon
Point[] pts

================================================================================
MSG: j2_mono/WorldSpaceInfo
float32 yaw #rad
Velocity vel #m/s relative velocity
float32 length # real length of the obstacle in world coordinate
float32 width # real width
float32 height # real height
Polygon poly # 
Point position # real position of the obstacle in world coordinate
int32 traversable
float32 hmw
float32 ttc
int32 curr_lane
float32 sigma_yaw
float32[] sigma_vel
float32 sigma_width
float32 sigma_height
float32[] sigma_position


================================================================================
MSG: j2_mono/Velocity
float32 vx
float32 vy
float32 vz
"""
  __slots__ = ['cam_id','obstacle','conf_scale']
  _slot_types = ['int32','j2_mono/Obstacle[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cam_id,obstacle,conf_scale

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacles, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cam_id is None:
        self.cam_id = 0
      if self.obstacle is None:
        self.obstacle = []
      if self.conf_scale is None:
        self.conf_scale = 0.
    else:
      self.cam_id = 0
      self.obstacle = []
      self.conf_scale = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.cam_id))
      length = len(self.obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle:
        _x = val1
        buff.write(_get_struct_5i().pack(_x.id, _x.type, _x.conf, _x.life_time, _x.age))
        _v1 = val1.img_info
        _v2 = _v1.rect
        _x = _v2
        buff.write(_get_struct_4f().pack(_x.left, _x.top, _x.right, _x.bottom))
        _v3 = _v1.box
        _v4 = _v3.lower_lt
        _x = _v4
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v5 = _v3.lower_lb
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v6 = _v3.lower_rb
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v7 = _v3.lower_rt
        _x = _v7
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v8 = _v3.upper_lt
        _x = _v8
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v9 = _v3.upper_lb
        _x = _v9
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v10 = _v3.upper_rb
        _x = _v10
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v11 = _v3.upper_rt
        _x = _v11
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v3.conf))
        _v12 = _v1.poly
        length = len(_v12.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v12.pts:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v1
        buff.write(_get_struct_4f().pack(_x.sigma_width, _x.sigma_height, _x.sigma_x, _x.sigma_y))
        _v13 = val1.world_info
        buff.write(_get_struct_f().pack(_v13.yaw))
        _v14 = _v13.vel
        _x = _v14
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _x = _v13
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _v15 = _v13.poly
        length = len(_v15.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v15.pts:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v16 = _v13.position
        _x = _v16
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v13
        buff.write(_get_struct_i2fif().pack(_x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw))
        length = len(_v13.sigma_vel)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *_v13.sigma_vel))
        _x = _v13
        buff.write(_get_struct_2f().pack(_x.sigma_width, _x.sigma_height))
        length = len(_v13.sigma_position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *_v13.sigma_position))
        length = len(val1.property)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.property))
        length = len(val1.property_name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.property_name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.property_type)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.property_type))
        length = len(val1.property_conf)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.property_conf))
        length = len(val1.tracking_fmap)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(struct.pack(pattern, *val1.tracking_fmap))
      buff.write(_get_struct_f().pack(self.conf_scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.obstacle is None:
        self.obstacle = None
      end = 0
      start = end
      end += 4
      (self.cam_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle = []
      for i in range(0, length):
        val1 = j2_mono.msg.Obstacle()
        _x = val1
        start = end
        end += 20
        (_x.id, _x.type, _x.conf, _x.life_time, _x.age,) = _get_struct_5i().unpack(str[start:end])
        _v17 = val1.img_info
        _v18 = _v17.rect
        _x = _v18
        start = end
        end += 16
        (_x.left, _x.top, _x.right, _x.bottom,) = _get_struct_4f().unpack(str[start:end])
        _v19 = _v17.box
        _v20 = _v19.lower_lt
        _x = _v20
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v21 = _v19.lower_lb
        _x = _v21
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v22 = _v19.lower_rb
        _x = _v22
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v23 = _v19.lower_rt
        _x = _v23
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v24 = _v19.upper_lt
        _x = _v24
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v25 = _v19.upper_lb
        _x = _v25
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v26 = _v19.upper_rb
        _x = _v26
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v27 = _v19.upper_rt
        _x = _v27
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (_v19.conf,) = _get_struct_f().unpack(str[start:end])
        _v28 = _v17.poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v28.pts = []
        for i in range(0, length):
          val4 = j2_mono.msg.Point()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v28.pts.append(val4)
        _x = _v17
        start = end
        end += 16
        (_x.sigma_width, _x.sigma_height, _x.sigma_x, _x.sigma_y,) = _get_struct_4f().unpack(str[start:end])
        _v29 = val1.world_info
        start = end
        end += 4
        (_v29.yaw,) = _get_struct_f().unpack(str[start:end])
        _v30 = _v29.vel
        _x = _v30
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _x = _v29
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _v31 = _v29.poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v31.pts = []
        for i in range(0, length):
          val4 = j2_mono.msg.Point()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v31.pts.append(val4)
        _v32 = _v29.position
        _x = _v32
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v29
        start = end
        end += 20
        (_x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw,) = _get_struct_i2fif().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        _v29.sigma_vel = struct.unpack(pattern, str[start:end])
        _x = _v29
        start = end
        end += 8
        (_x.sigma_width, _x.sigma_height,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        _v29.sigma_position = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.property = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.property_name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.property_name.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.property_type = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.property_conf = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        end += struct.calcsize(pattern)
        val1.tracking_fmap = struct.unpack(pattern, str[start:end])
        self.obstacle.append(val1)
      start = end
      end += 4
      (self.conf_scale,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.cam_id))
      length = len(self.obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle:
        _x = val1
        buff.write(_get_struct_5i().pack(_x.id, _x.type, _x.conf, _x.life_time, _x.age))
        _v33 = val1.img_info
        _v34 = _v33.rect
        _x = _v34
        buff.write(_get_struct_4f().pack(_x.left, _x.top, _x.right, _x.bottom))
        _v35 = _v33.box
        _v36 = _v35.lower_lt
        _x = _v36
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v37 = _v35.lower_lb
        _x = _v37
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v38 = _v35.lower_rb
        _x = _v38
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v39 = _v35.lower_rt
        _x = _v39
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v40 = _v35.upper_lt
        _x = _v40
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v41 = _v35.upper_lb
        _x = _v41
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v42 = _v35.upper_rb
        _x = _v42
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v43 = _v35.upper_rt
        _x = _v43
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v35.conf))
        _v44 = _v33.poly
        length = len(_v44.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v44.pts:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v33
        buff.write(_get_struct_4f().pack(_x.sigma_width, _x.sigma_height, _x.sigma_x, _x.sigma_y))
        _v45 = val1.world_info
        buff.write(_get_struct_f().pack(_v45.yaw))
        _v46 = _v45.vel
        _x = _v46
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _x = _v45
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _v47 = _v45.poly
        length = len(_v47.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v47.pts:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v48 = _v45.position
        _x = _v48
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v45
        buff.write(_get_struct_i2fif().pack(_x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw))
        length = len(_v45.sigma_vel)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v45.sigma_vel.tostring())
        _x = _v45
        buff.write(_get_struct_2f().pack(_x.sigma_width, _x.sigma_height))
        length = len(_v45.sigma_position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v45.sigma_position.tostring())
        length = len(val1.property)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.property.tostring())
        length = len(val1.property_name)
        buff.write(_struct_I.pack(length))
        for val2 in val1.property_name:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.property_type)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.property_type.tostring())
        length = len(val1.property_conf)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.property_conf.tostring())
        length = len(val1.tracking_fmap)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(val1.tracking_fmap.tostring())
      buff.write(_get_struct_f().pack(self.conf_scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.obstacle is None:
        self.obstacle = None
      end = 0
      start = end
      end += 4
      (self.cam_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle = []
      for i in range(0, length):
        val1 = j2_mono.msg.Obstacle()
        _x = val1
        start = end
        end += 20
        (_x.id, _x.type, _x.conf, _x.life_time, _x.age,) = _get_struct_5i().unpack(str[start:end])
        _v49 = val1.img_info
        _v50 = _v49.rect
        _x = _v50
        start = end
        end += 16
        (_x.left, _x.top, _x.right, _x.bottom,) = _get_struct_4f().unpack(str[start:end])
        _v51 = _v49.box
        _v52 = _v51.lower_lt
        _x = _v52
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v53 = _v51.lower_lb
        _x = _v53
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v54 = _v51.lower_rb
        _x = _v54
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v55 = _v51.lower_rt
        _x = _v55
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v56 = _v51.upper_lt
        _x = _v56
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v57 = _v51.upper_lb
        _x = _v57
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v58 = _v51.upper_rb
        _x = _v58
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v59 = _v51.upper_rt
        _x = _v59
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (_v51.conf,) = _get_struct_f().unpack(str[start:end])
        _v60 = _v49.poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.pts = []
        for i in range(0, length):
          val4 = j2_mono.msg.Point()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v60.pts.append(val4)
        _x = _v49
        start = end
        end += 16
        (_x.sigma_width, _x.sigma_height, _x.sigma_x, _x.sigma_y,) = _get_struct_4f().unpack(str[start:end])
        _v61 = val1.world_info
        start = end
        end += 4
        (_v61.yaw,) = _get_struct_f().unpack(str[start:end])
        _v62 = _v61.vel
        _x = _v62
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _x = _v61
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _v63 = _v61.poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v63.pts = []
        for i in range(0, length):
          val4 = j2_mono.msg.Point()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v63.pts.append(val4)
        _v64 = _v61.position
        _x = _v64
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v61
        start = end
        end += 20
        (_x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw,) = _get_struct_i2fif().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        _v61.sigma_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = _v61
        start = end
        end += 8
        (_x.sigma_width, _x.sigma_height,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        _v61.sigma_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.property = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.property_name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.property_name.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.property_type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.property_conf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        end += struct.calcsize(pattern)
        val1.tracking_fmap = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
        self.obstacle.append(val1)
      start = end
      end += 4
      (self.conf_scale,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_i2fif = None
def _get_struct_i2fif():
    global _struct_i2fif
    if _struct_i2fif is None:
        _struct_i2fif = struct.Struct("<i2fif")
    return _struct_i2fif
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
