# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2_mono/Image.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Image(genpy.Message):
  _md5sum = "5423f0f8301d9093d1931c3f216d2abd"
  _type = "j2_mono/Image"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 width
int32 height
int32 channel
int64 time_stamp
int32 send_mode
int32 format
int32 index
int32 count
int32 depth
int32 align
int32 image_counter
"""
  __slots__ = ['width','height','channel','time_stamp','send_mode','format','index','count','depth','align','image_counter']
  _slot_types = ['int32','int32','int32','int64','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       width,height,channel,time_stamp,send_mode,format,index,count,depth,align,image_counter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Image, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.channel is None:
        self.channel = 0
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.send_mode is None:
        self.send_mode = 0
      if self.format is None:
        self.format = 0
      if self.index is None:
        self.index = 0
      if self.count is None:
        self.count = 0
      if self.depth is None:
        self.depth = 0
      if self.align is None:
        self.align = 0
      if self.image_counter is None:
        self.image_counter = 0
    else:
      self.width = 0
      self.height = 0
      self.channel = 0
      self.time_stamp = 0
      self.send_mode = 0
      self.format = 0
      self.index = 0
      self.count = 0
      self.depth = 0
      self.align = 0
      self.image_counter = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3iq7i().pack(_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter,) = _get_struct_3iq7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3iq7i().pack(_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter,) = _get_struct_3iq7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3iq7i = None
def _get_struct_3iq7i():
    global _struct_3iq7i
    if _struct_3iq7i is None:
        _struct_3iq7i = struct.Struct("<3iq7i")
    return _struct_3iq7i
