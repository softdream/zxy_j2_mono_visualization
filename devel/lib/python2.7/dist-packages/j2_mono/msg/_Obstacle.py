# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2_mono/Obstacle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2_mono.msg

class Obstacle(genpy.Message):
  _md5sum = "aa36fd0875dc274867576399a8c05785"
  _type = "j2_mono/Obstacle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id
int32 type #ObstacleType_VehicleRear=0, ObstacleType_VehicleFull=1, ObstacleType_Pedestrian=2, ObstacleType_TrafficSign=3, ObstacleType_TrafficLight=4, ObstacleType_ParkingSlot=5, ObstacleType_RoadSign=6, ObstacleType_Cyclist=18
int32 conf
int32 life_time
int32 age
ImageSpaceInfo img_info
WorldSpaceInfo world_info
int32[] property #
string[] property_name
int32[] property_type
float32[] property_conf
int8[] tracking_fmap


================================================================================
MSG: j2_mono/ImageSpaceInfo
Rect rect
Box3D box
Polygon poly
float32 sigma_width
float32 sigma_height
float32 sigma_x
float32 sigma_y

================================================================================
MSG: j2_mono/Rect
float32 left
float32 top
float32 right
float32 bottom

================================================================================
MSG: j2_mono/Box3D
Point lower_lt
Point lower_lb
Point lower_rb
Point lower_rt
Point upper_lt
Point upper_lb
Point upper_rb
Point upper_rt
float32 conf

================================================================================
MSG: j2_mono/Point
float32 x
float32 y
float32 z

================================================================================
MSG: j2_mono/Polygon
Point[] pts

================================================================================
MSG: j2_mono/WorldSpaceInfo
float32 yaw #rad
Velocity vel #m/s relative velocity
float32 length # real length of the obstacle in world coordinate
float32 width # real width
float32 height # real height
Polygon poly # 
Point position # real position of the obstacle in world coordinate
int32 traversable
float32 hmw
float32 ttc
int32 curr_lane
float32 sigma_yaw
float32[] sigma_vel
float32 sigma_width
float32 sigma_height
float32[] sigma_position


================================================================================
MSG: j2_mono/Velocity
float32 vx
float32 vy
float32 vz
"""
  __slots__ = ['id','type','conf','life_time','age','img_info','world_info','property','property_name','property_type','property_conf','tracking_fmap']
  _slot_types = ['int32','int32','int32','int32','int32','j2_mono/ImageSpaceInfo','j2_mono/WorldSpaceInfo','int32[]','string[]','int32[]','float32[]','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,type,conf,life_time,age,img_info,world_info,property,property_name,property_type,property_conf,tracking_fmap

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = 0
      if self.conf is None:
        self.conf = 0
      if self.life_time is None:
        self.life_time = 0
      if self.age is None:
        self.age = 0
      if self.img_info is None:
        self.img_info = j2_mono.msg.ImageSpaceInfo()
      if self.world_info is None:
        self.world_info = j2_mono.msg.WorldSpaceInfo()
      if self.property is None:
        self.property = []
      if self.property_name is None:
        self.property_name = []
      if self.property_type is None:
        self.property_type = []
      if self.property_conf is None:
        self.property_conf = []
      if self.tracking_fmap is None:
        self.tracking_fmap = []
    else:
      self.id = 0
      self.type = 0
      self.conf = 0
      self.life_time = 0
      self.age = 0
      self.img_info = j2_mono.msg.ImageSpaceInfo()
      self.world_info = j2_mono.msg.WorldSpaceInfo()
      self.property = []
      self.property_name = []
      self.property_type = []
      self.property_conf = []
      self.tracking_fmap = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5i29f().pack(_x.id, _x.type, _x.conf, _x.life_time, _x.age, _x.img_info.rect.left, _x.img_info.rect.top, _x.img_info.rect.right, _x.img_info.rect.bottom, _x.img_info.box.lower_lt.x, _x.img_info.box.lower_lt.y, _x.img_info.box.lower_lt.z, _x.img_info.box.lower_lb.x, _x.img_info.box.lower_lb.y, _x.img_info.box.lower_lb.z, _x.img_info.box.lower_rb.x, _x.img_info.box.lower_rb.y, _x.img_info.box.lower_rb.z, _x.img_info.box.lower_rt.x, _x.img_info.box.lower_rt.y, _x.img_info.box.lower_rt.z, _x.img_info.box.upper_lt.x, _x.img_info.box.upper_lt.y, _x.img_info.box.upper_lt.z, _x.img_info.box.upper_lb.x, _x.img_info.box.upper_lb.y, _x.img_info.box.upper_lb.z, _x.img_info.box.upper_rb.x, _x.img_info.box.upper_rb.y, _x.img_info.box.upper_rb.z, _x.img_info.box.upper_rt.x, _x.img_info.box.upper_rt.y, _x.img_info.box.upper_rt.z, _x.img_info.box.conf))
      length = len(self.img_info.poly.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.img_info.poly.pts:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_11f().pack(_x.img_info.sigma_width, _x.img_info.sigma_height, _x.img_info.sigma_x, _x.img_info.sigma_y, _x.world_info.yaw, _x.world_info.vel.vx, _x.world_info.vel.vy, _x.world_info.vel.vz, _x.world_info.length, _x.world_info.width, _x.world_info.height))
      length = len(self.world_info.poly.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.world_info.poly.pts:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3fi2fif().pack(_x.world_info.position.x, _x.world_info.position.y, _x.world_info.position.z, _x.world_info.traversable, _x.world_info.hmw, _x.world_info.ttc, _x.world_info.curr_lane, _x.world_info.sigma_yaw))
      length = len(self.world_info.sigma_vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.world_info.sigma_vel))
      _x = self
      buff.write(_get_struct_2f().pack(_x.world_info.sigma_width, _x.world_info.sigma_height))
      length = len(self.world_info.sigma_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.world_info.sigma_position))
      length = len(self.property)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.property))
      length = len(self.property_name)
      buff.write(_struct_I.pack(length))
      for val1 in self.property_name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.property_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.property_type))
      length = len(self.property_conf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.property_conf))
      length = len(self.tracking_fmap)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.tracking_fmap))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.img_info is None:
        self.img_info = j2_mono.msg.ImageSpaceInfo()
      if self.world_info is None:
        self.world_info = j2_mono.msg.WorldSpaceInfo()
      end = 0
      _x = self
      start = end
      end += 136
      (_x.id, _x.type, _x.conf, _x.life_time, _x.age, _x.img_info.rect.left, _x.img_info.rect.top, _x.img_info.rect.right, _x.img_info.rect.bottom, _x.img_info.box.lower_lt.x, _x.img_info.box.lower_lt.y, _x.img_info.box.lower_lt.z, _x.img_info.box.lower_lb.x, _x.img_info.box.lower_lb.y, _x.img_info.box.lower_lb.z, _x.img_info.box.lower_rb.x, _x.img_info.box.lower_rb.y, _x.img_info.box.lower_rb.z, _x.img_info.box.lower_rt.x, _x.img_info.box.lower_rt.y, _x.img_info.box.lower_rt.z, _x.img_info.box.upper_lt.x, _x.img_info.box.upper_lt.y, _x.img_info.box.upper_lt.z, _x.img_info.box.upper_lb.x, _x.img_info.box.upper_lb.y, _x.img_info.box.upper_lb.z, _x.img_info.box.upper_rb.x, _x.img_info.box.upper_rb.y, _x.img_info.box.upper_rb.z, _x.img_info.box.upper_rt.x, _x.img_info.box.upper_rt.y, _x.img_info.box.upper_rt.z, _x.img_info.box.conf,) = _get_struct_5i29f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.img_info.poly.pts = []
      for i in range(0, length):
        val1 = j2_mono.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.img_info.poly.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.img_info.sigma_width, _x.img_info.sigma_height, _x.img_info.sigma_x, _x.img_info.sigma_y, _x.world_info.yaw, _x.world_info.vel.vx, _x.world_info.vel.vy, _x.world_info.vel.vz, _x.world_info.length, _x.world_info.width, _x.world_info.height,) = _get_struct_11f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.world_info.poly.pts = []
      for i in range(0, length):
        val1 = j2_mono.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.world_info.poly.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.world_info.position.x, _x.world_info.position.y, _x.world_info.position.z, _x.world_info.traversable, _x.world_info.hmw, _x.world_info.ttc, _x.world_info.curr_lane, _x.world_info.sigma_yaw,) = _get_struct_3fi2fif().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.world_info.sigma_vel = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.world_info.sigma_width, _x.world_info.sigma_height,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.world_info.sigma_position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.property = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.property_name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.property_name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.property_type = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.property_conf = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.tracking_fmap = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5i29f().pack(_x.id, _x.type, _x.conf, _x.life_time, _x.age, _x.img_info.rect.left, _x.img_info.rect.top, _x.img_info.rect.right, _x.img_info.rect.bottom, _x.img_info.box.lower_lt.x, _x.img_info.box.lower_lt.y, _x.img_info.box.lower_lt.z, _x.img_info.box.lower_lb.x, _x.img_info.box.lower_lb.y, _x.img_info.box.lower_lb.z, _x.img_info.box.lower_rb.x, _x.img_info.box.lower_rb.y, _x.img_info.box.lower_rb.z, _x.img_info.box.lower_rt.x, _x.img_info.box.lower_rt.y, _x.img_info.box.lower_rt.z, _x.img_info.box.upper_lt.x, _x.img_info.box.upper_lt.y, _x.img_info.box.upper_lt.z, _x.img_info.box.upper_lb.x, _x.img_info.box.upper_lb.y, _x.img_info.box.upper_lb.z, _x.img_info.box.upper_rb.x, _x.img_info.box.upper_rb.y, _x.img_info.box.upper_rb.z, _x.img_info.box.upper_rt.x, _x.img_info.box.upper_rt.y, _x.img_info.box.upper_rt.z, _x.img_info.box.conf))
      length = len(self.img_info.poly.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.img_info.poly.pts:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_11f().pack(_x.img_info.sigma_width, _x.img_info.sigma_height, _x.img_info.sigma_x, _x.img_info.sigma_y, _x.world_info.yaw, _x.world_info.vel.vx, _x.world_info.vel.vy, _x.world_info.vel.vz, _x.world_info.length, _x.world_info.width, _x.world_info.height))
      length = len(self.world_info.poly.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.world_info.poly.pts:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3fi2fif().pack(_x.world_info.position.x, _x.world_info.position.y, _x.world_info.position.z, _x.world_info.traversable, _x.world_info.hmw, _x.world_info.ttc, _x.world_info.curr_lane, _x.world_info.sigma_yaw))
      length = len(self.world_info.sigma_vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.world_info.sigma_vel.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.world_info.sigma_width, _x.world_info.sigma_height))
      length = len(self.world_info.sigma_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.world_info.sigma_position.tostring())
      length = len(self.property)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.property.tostring())
      length = len(self.property_name)
      buff.write(_struct_I.pack(length))
      for val1 in self.property_name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.property_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.property_type.tostring())
      length = len(self.property_conf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.property_conf.tostring())
      length = len(self.tracking_fmap)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.tracking_fmap.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.img_info is None:
        self.img_info = j2_mono.msg.ImageSpaceInfo()
      if self.world_info is None:
        self.world_info = j2_mono.msg.WorldSpaceInfo()
      end = 0
      _x = self
      start = end
      end += 136
      (_x.id, _x.type, _x.conf, _x.life_time, _x.age, _x.img_info.rect.left, _x.img_info.rect.top, _x.img_info.rect.right, _x.img_info.rect.bottom, _x.img_info.box.lower_lt.x, _x.img_info.box.lower_lt.y, _x.img_info.box.lower_lt.z, _x.img_info.box.lower_lb.x, _x.img_info.box.lower_lb.y, _x.img_info.box.lower_lb.z, _x.img_info.box.lower_rb.x, _x.img_info.box.lower_rb.y, _x.img_info.box.lower_rb.z, _x.img_info.box.lower_rt.x, _x.img_info.box.lower_rt.y, _x.img_info.box.lower_rt.z, _x.img_info.box.upper_lt.x, _x.img_info.box.upper_lt.y, _x.img_info.box.upper_lt.z, _x.img_info.box.upper_lb.x, _x.img_info.box.upper_lb.y, _x.img_info.box.upper_lb.z, _x.img_info.box.upper_rb.x, _x.img_info.box.upper_rb.y, _x.img_info.box.upper_rb.z, _x.img_info.box.upper_rt.x, _x.img_info.box.upper_rt.y, _x.img_info.box.upper_rt.z, _x.img_info.box.conf,) = _get_struct_5i29f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.img_info.poly.pts = []
      for i in range(0, length):
        val1 = j2_mono.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.img_info.poly.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.img_info.sigma_width, _x.img_info.sigma_height, _x.img_info.sigma_x, _x.img_info.sigma_y, _x.world_info.yaw, _x.world_info.vel.vx, _x.world_info.vel.vy, _x.world_info.vel.vz, _x.world_info.length, _x.world_info.width, _x.world_info.height,) = _get_struct_11f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.world_info.poly.pts = []
      for i in range(0, length):
        val1 = j2_mono.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.world_info.poly.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.world_info.position.x, _x.world_info.position.y, _x.world_info.position.z, _x.world_info.traversable, _x.world_info.hmw, _x.world_info.ttc, _x.world_info.curr_lane, _x.world_info.sigma_yaw,) = _get_struct_3fi2fif().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.world_info.sigma_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.world_info.sigma_width, _x.world_info.sigma_height,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.world_info.sigma_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.property = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.property_name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.property_name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.property_type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.property_conf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.tracking_fmap = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i29f = None
def _get_struct_5i29f():
    global _struct_5i29f
    if _struct_5i29f is None:
        _struct_5i29f = struct.Struct("<5i29f")
    return _struct_5i29f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_11f = None
def _get_struct_11f():
    global _struct_11f
    if _struct_11f is None:
        _struct_11f = struct.Struct("<11f")
    return _struct_11f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3fi2fif = None
def _get_struct_3fi2fif():
    global _struct_3fi2fif
    if _struct_3fi2fif is None:
        _struct_3fi2fif = struct.Struct("<3fi2fif")
    return _struct_3fi2fif
