# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2_mono/Data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2_mono.msg

class Data(genpy.Message):
  _md5sum = "e14d20a277709c9126477d5d06db7a45"
  _type = "j2_mono/Data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 version
int32 frame_id
Image[] image
int32 data_descriptor
#CameraParam camera
#CameraParam camera_default
#CameraMatrix camera_matrix
#SensorFrame sensor
#MotionFrame montion
odometryFrame odometry
StructurePerception structure_perception

================================================================================
MSG: j2_mono/Image
int32 width
int32 height
int32 channel
int64 time_stamp
int32 send_mode
int32 format
int32 index
int32 count
int32 depth
int32 align
int32 image_counter

================================================================================
MSG: j2_mono/odometryFrame
float32 x
float32 y
float32 yaw
float32 speed
float32 yaw_rate
int32 time_stamp

================================================================================
MSG: j2_mono/StructurePerception
Obstacles[] obstacles
Lines[] lines
Image[] parsing
Image[] depth
FreeSpacePoints[] scan_pts
#ParsingSetting[] parsing_settingsObstacles obstacles

================================================================================
MSG: j2_mono/Obstacles
int32 cam_id
Obstacle[] obstacle
float32 conf_scale # default 0.1

================================================================================
MSG: j2_mono/Obstacle
int32 id
int32 type #ObstacleType_VehicleRear=0, ObstacleType_VehicleFull=1, ObstacleType_Pedestrian=2, ObstacleType_TrafficSign=3, ObstacleType_TrafficLight=4, ObstacleType_ParkingSlot=5, ObstacleType_RoadSign=6, ObstacleType_Cyclist=18
int32 conf
int32 life_time
int32 age
ImageSpaceInfo img_info
WorldSpaceInfo world_info
int32[] property #
string[] property_name
int32[] property_type
float32[] property_conf
int8[] tracking_fmap


================================================================================
MSG: j2_mono/ImageSpaceInfo
Rect rect
Box3D box
Polygon poly
float32 sigma_width
float32 sigma_height
float32 sigma_x
float32 sigma_y

================================================================================
MSG: j2_mono/Rect
float32 left
float32 top
float32 right
float32 bottom

================================================================================
MSG: j2_mono/Box3D
Point lower_lt
Point lower_lb
Point lower_rb
Point lower_rt
Point upper_lt
Point upper_lb
Point upper_rb
Point upper_rt
float32 conf

================================================================================
MSG: j2_mono/Point
float32 x
float32 y
float32 z

================================================================================
MSG: j2_mono/Polygon
Point[] pts

================================================================================
MSG: j2_mono/WorldSpaceInfo
float32 yaw #rad
Velocity vel #m/s relative velocity
float32 length # real length of the obstacle in world coordinate
float32 width # real width
float32 height # real height
Polygon poly # 
Point position # real position of the obstacle in world coordinate
int32 traversable
float32 hmw
float32 ttc
int32 curr_lane
float32 sigma_yaw
float32[] sigma_vel
float32 sigma_width
float32 sigma_height
float32[] sigma_position


================================================================================
MSG: j2_mono/Velocity
float32 vx
float32 vy
float32 vz

================================================================================
MSG: j2_mono/Lines
uint32 cam_id
Line[] lines

================================================================================
MSG: j2_mono/Line
int32 id
int32 life_time
float32[] coeffs
Point[] end_points
int32 type #LINE_DOUBLE=512, LINE_DASH=1024, LINE_SOLID=2048
int32 source #LINE_PERCEPTION=2097152, LINE_TRACKING=4194304
float32 dist_to_front_wheel
float32 width
int32 type_sibling
float32 conf
float32[] sigma_coeffs


================================================================================
MSG: j2_mono/FreeSpacePoints
int32[] property
int32 cam_id
Point[] pts_vcs
Point[] pts_img
"""
  __slots__ = ['version','frame_id','image','data_descriptor','odometry','structure_perception']
  _slot_types = ['int32','int32','j2_mono/Image[]','int32','j2_mono/odometryFrame','j2_mono/StructurePerception']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       version,frame_id,image,data_descriptor,odometry,structure_perception

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.version is None:
        self.version = 0
      if self.frame_id is None:
        self.frame_id = 0
      if self.image is None:
        self.image = []
      if self.data_descriptor is None:
        self.data_descriptor = 0
      if self.odometry is None:
        self.odometry = j2_mono.msg.odometryFrame()
      if self.structure_perception is None:
        self.structure_perception = j2_mono.msg.StructurePerception()
    else:
      self.version = 0
      self.frame_id = 0
      self.image = []
      self.data_descriptor = 0
      self.odometry = j2_mono.msg.odometryFrame()
      self.structure_perception = j2_mono.msg.StructurePerception()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.version, _x.frame_id))
      length = len(self.image)
      buff.write(_struct_I.pack(length))
      for val1 in self.image:
        _x = val1
        buff.write(_get_struct_3iq7i().pack(_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter))
      _x = self
      buff.write(_get_struct_i5fi().pack(_x.data_descriptor, _x.odometry.x, _x.odometry.y, _x.odometry.yaw, _x.odometry.speed, _x.odometry.yaw_rate, _x.odometry.time_stamp))
      length = len(self.structure_perception.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.obstacles:
        buff.write(_get_struct_i().pack(val1.cam_id))
        length = len(val1.obstacle)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacle:
          _x = val2
          buff.write(_get_struct_5i().pack(_x.id, _x.type, _x.conf, _x.life_time, _x.age))
          _v1 = val2.img_info
          _v2 = _v1.rect
          _x = _v2
          buff.write(_get_struct_4f().pack(_x.left, _x.top, _x.right, _x.bottom))
          _v3 = _v1.box
          _v4 = _v3.lower_lt
          _x = _v4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v5 = _v3.lower_lb
          _x = _v5
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v6 = _v3.lower_rb
          _x = _v6
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v7 = _v3.lower_rt
          _x = _v7
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v8 = _v3.upper_lt
          _x = _v8
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v9 = _v3.upper_lb
          _x = _v9
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v10 = _v3.upper_rb
          _x = _v10
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v11 = _v3.upper_rt
          _x = _v11
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_f().pack(_v3.conf))
          _v12 = _v1.poly
          length = len(_v12.pts)
          buff.write(_struct_I.pack(length))
          for val5 in _v12.pts:
            _x = val5
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = _v1
          buff.write(_get_struct_4f().pack(_x.sigma_width, _x.sigma_height, _x.sigma_x, _x.sigma_y))
          _v13 = val2.world_info
          buff.write(_get_struct_f().pack(_v13.yaw))
          _v14 = _v13.vel
          _x = _v14
          buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
          _x = _v13
          buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
          _v15 = _v13.poly
          length = len(_v15.pts)
          buff.write(_struct_I.pack(length))
          for val5 in _v15.pts:
            _x = val5
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v16 = _v13.position
          _x = _v16
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = _v13
          buff.write(_get_struct_i2fif().pack(_x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw))
          length = len(_v13.sigma_vel)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *_v13.sigma_vel))
          _x = _v13
          buff.write(_get_struct_2f().pack(_x.sigma_width, _x.sigma_height))
          length = len(_v13.sigma_position)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *_v13.sigma_position))
          length = len(val2.property)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(struct.pack(pattern, *val2.property))
          length = len(val2.property_name)
          buff.write(_struct_I.pack(length))
          for val3 in val2.property_name:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
          length = len(val2.property_type)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(struct.pack(pattern, *val2.property_type))
          length = len(val2.property_conf)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *val2.property_conf))
          length = len(val2.tracking_fmap)
          buff.write(_struct_I.pack(length))
          pattern = '<%sb'%length
          buff.write(struct.pack(pattern, *val2.tracking_fmap))
        buff.write(_get_struct_f().pack(val1.conf_scale))
      length = len(self.structure_perception.lines)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.lines:
        buff.write(_get_struct_I().pack(val1.cam_id))
        length = len(val1.lines)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lines:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.id, _x.life_time))
          length = len(val2.coeffs)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *val2.coeffs))
          length = len(val2.end_points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.end_points:
            _x = val3
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_2i2fif().pack(_x.type, _x.source, _x.dist_to_front_wheel, _x.width, _x.type_sibling, _x.conf))
          length = len(val2.sigma_coeffs)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *val2.sigma_coeffs))
      length = len(self.structure_perception.parsing)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.parsing:
        _x = val1
        buff.write(_get_struct_3iq7i().pack(_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter))
      length = len(self.structure_perception.depth)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.depth:
        _x = val1
        buff.write(_get_struct_3iq7i().pack(_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter))
      length = len(self.structure_perception.scan_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.scan_pts:
        length = len(val1.property)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.property))
        buff.write(_get_struct_i().pack(val1.cam_id))
        length = len(val1.pts_vcs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_vcs:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.pts_img)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_img:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.image is None:
        self.image = None
      if self.odometry is None:
        self.odometry = j2_mono.msg.odometryFrame()
      if self.structure_perception is None:
        self.structure_perception = j2_mono.msg.StructurePerception()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.version, _x.frame_id,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image = []
      for i in range(0, length):
        val1 = j2_mono.msg.Image()
        _x = val1
        start = end
        end += 48
        (_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter,) = _get_struct_3iq7i().unpack(str[start:end])
        self.image.append(val1)
      _x = self
      start = end
      end += 28
      (_x.data_descriptor, _x.odometry.x, _x.odometry.y, _x.odometry.yaw, _x.odometry.speed, _x.odometry.yaw_rate, _x.odometry.time_stamp,) = _get_struct_i5fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.obstacles = []
      for i in range(0, length):
        val1 = j2_mono.msg.Obstacles()
        start = end
        end += 4
        (val1.cam_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacle = []
        for i in range(0, length):
          val2 = j2_mono.msg.Obstacle()
          _x = val2
          start = end
          end += 20
          (_x.id, _x.type, _x.conf, _x.life_time, _x.age,) = _get_struct_5i().unpack(str[start:end])
          _v17 = val2.img_info
          _v18 = _v17.rect
          _x = _v18
          start = end
          end += 16
          (_x.left, _x.top, _x.right, _x.bottom,) = _get_struct_4f().unpack(str[start:end])
          _v19 = _v17.box
          _v20 = _v19.lower_lt
          _x = _v20
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v21 = _v19.lower_lb
          _x = _v21
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v22 = _v19.lower_rb
          _x = _v22
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v23 = _v19.lower_rt
          _x = _v23
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v24 = _v19.upper_lt
          _x = _v24
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v25 = _v19.upper_lb
          _x = _v25
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v26 = _v19.upper_rb
          _x = _v26
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v27 = _v19.upper_rt
          _x = _v27
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 4
          (_v19.conf,) = _get_struct_f().unpack(str[start:end])
          _v28 = _v17.poly
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v28.pts = []
          for i in range(0, length):
            val5 = j2_mono.msg.Point()
            _x = val5
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v28.pts.append(val5)
          _x = _v17
          start = end
          end += 16
          (_x.sigma_width, _x.sigma_height, _x.sigma_x, _x.sigma_y,) = _get_struct_4f().unpack(str[start:end])
          _v29 = val2.world_info
          start = end
          end += 4
          (_v29.yaw,) = _get_struct_f().unpack(str[start:end])
          _v30 = _v29.vel
          _x = _v30
          start = end
          end += 12
          (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
          _x = _v29
          start = end
          end += 12
          (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
          _v31 = _v29.poly
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v31.pts = []
          for i in range(0, length):
            val5 = j2_mono.msg.Point()
            _x = val5
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v31.pts.append(val5)
          _v32 = _v29.position
          _x = _v32
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _x = _v29
          start = end
          end += 20
          (_x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw,) = _get_struct_i2fif().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          _v29.sigma_vel = struct.unpack(pattern, str[start:end])
          _x = _v29
          start = end
          end += 8
          (_x.sigma_width, _x.sigma_height,) = _get_struct_2f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          _v29.sigma_position = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.property = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.property_name = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.property_name.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.property_type = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.property_conf = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sb'%length
          start = end
          end += struct.calcsize(pattern)
          val2.tracking_fmap = struct.unpack(pattern, str[start:end])
          val1.obstacle.append(val2)
        start = end
        end += 4
        (val1.conf_scale,) = _get_struct_f().unpack(str[start:end])
        self.structure_perception.obstacles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.lines = []
      for i in range(0, length):
        val1 = j2_mono.msg.Lines()
        start = end
        end += 4
        (val1.cam_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lines = []
        for i in range(0, length):
          val2 = j2_mono.msg.Line()
          _x = val2
          start = end
          end += 8
          (_x.id, _x.life_time,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.coeffs = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.end_points = []
          for i in range(0, length):
            val3 = j2_mono.msg.Point()
            _x = val3
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            val2.end_points.append(val3)
          _x = val2
          start = end
          end += 24
          (_x.type, _x.source, _x.dist_to_front_wheel, _x.width, _x.type_sibling, _x.conf,) = _get_struct_2i2fif().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.sigma_coeffs = struct.unpack(pattern, str[start:end])
          val1.lines.append(val2)
        self.structure_perception.lines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.parsing = []
      for i in range(0, length):
        val1 = j2_mono.msg.Image()
        _x = val1
        start = end
        end += 48
        (_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter,) = _get_struct_3iq7i().unpack(str[start:end])
        self.structure_perception.parsing.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.depth = []
      for i in range(0, length):
        val1 = j2_mono.msg.Image()
        _x = val1
        start = end
        end += 48
        (_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter,) = _get_struct_3iq7i().unpack(str[start:end])
        self.structure_perception.depth.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.scan_pts = []
      for i in range(0, length):
        val1 = j2_mono.msg.FreeSpacePoints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.property = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (val1.cam_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_vcs = []
        for i in range(0, length):
          val2 = j2_mono.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.pts_vcs.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_img = []
        for i in range(0, length):
          val2 = j2_mono.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.pts_img.append(val2)
        self.structure_perception.scan_pts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.version, _x.frame_id))
      length = len(self.image)
      buff.write(_struct_I.pack(length))
      for val1 in self.image:
        _x = val1
        buff.write(_get_struct_3iq7i().pack(_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter))
      _x = self
      buff.write(_get_struct_i5fi().pack(_x.data_descriptor, _x.odometry.x, _x.odometry.y, _x.odometry.yaw, _x.odometry.speed, _x.odometry.yaw_rate, _x.odometry.time_stamp))
      length = len(self.structure_perception.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.obstacles:
        buff.write(_get_struct_i().pack(val1.cam_id))
        length = len(val1.obstacle)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacle:
          _x = val2
          buff.write(_get_struct_5i().pack(_x.id, _x.type, _x.conf, _x.life_time, _x.age))
          _v33 = val2.img_info
          _v34 = _v33.rect
          _x = _v34
          buff.write(_get_struct_4f().pack(_x.left, _x.top, _x.right, _x.bottom))
          _v35 = _v33.box
          _v36 = _v35.lower_lt
          _x = _v36
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v37 = _v35.lower_lb
          _x = _v37
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v38 = _v35.lower_rb
          _x = _v38
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v39 = _v35.lower_rt
          _x = _v39
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v40 = _v35.upper_lt
          _x = _v40
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v41 = _v35.upper_lb
          _x = _v41
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v42 = _v35.upper_rb
          _x = _v42
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v43 = _v35.upper_rt
          _x = _v43
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_f().pack(_v35.conf))
          _v44 = _v33.poly
          length = len(_v44.pts)
          buff.write(_struct_I.pack(length))
          for val5 in _v44.pts:
            _x = val5
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = _v33
          buff.write(_get_struct_4f().pack(_x.sigma_width, _x.sigma_height, _x.sigma_x, _x.sigma_y))
          _v45 = val2.world_info
          buff.write(_get_struct_f().pack(_v45.yaw))
          _v46 = _v45.vel
          _x = _v46
          buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
          _x = _v45
          buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
          _v47 = _v45.poly
          length = len(_v47.pts)
          buff.write(_struct_I.pack(length))
          for val5 in _v47.pts:
            _x = val5
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v48 = _v45.position
          _x = _v48
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = _v45
          buff.write(_get_struct_i2fif().pack(_x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw))
          length = len(_v45.sigma_vel)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v45.sigma_vel.tostring())
          _x = _v45
          buff.write(_get_struct_2f().pack(_x.sigma_width, _x.sigma_height))
          length = len(_v45.sigma_position)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(_v45.sigma_position.tostring())
          length = len(val2.property)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(val2.property.tostring())
          length = len(val2.property_name)
          buff.write(_struct_I.pack(length))
          for val3 in val2.property_name:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
          length = len(val2.property_type)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(val2.property_type.tostring())
          length = len(val2.property_conf)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.property_conf.tostring())
          length = len(val2.tracking_fmap)
          buff.write(_struct_I.pack(length))
          pattern = '<%sb'%length
          buff.write(val2.tracking_fmap.tostring())
        buff.write(_get_struct_f().pack(val1.conf_scale))
      length = len(self.structure_perception.lines)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.lines:
        buff.write(_get_struct_I().pack(val1.cam_id))
        length = len(val1.lines)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lines:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.id, _x.life_time))
          length = len(val2.coeffs)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.coeffs.tostring())
          length = len(val2.end_points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.end_points:
            _x = val3
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_2i2fif().pack(_x.type, _x.source, _x.dist_to_front_wheel, _x.width, _x.type_sibling, _x.conf))
          length = len(val2.sigma_coeffs)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.sigma_coeffs.tostring())
      length = len(self.structure_perception.parsing)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.parsing:
        _x = val1
        buff.write(_get_struct_3iq7i().pack(_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter))
      length = len(self.structure_perception.depth)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.depth:
        _x = val1
        buff.write(_get_struct_3iq7i().pack(_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter))
      length = len(self.structure_perception.scan_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.structure_perception.scan_pts:
        length = len(val1.property)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.property.tostring())
        buff.write(_get_struct_i().pack(val1.cam_id))
        length = len(val1.pts_vcs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_vcs:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.pts_img)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts_img:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.image is None:
        self.image = None
      if self.odometry is None:
        self.odometry = j2_mono.msg.odometryFrame()
      if self.structure_perception is None:
        self.structure_perception = j2_mono.msg.StructurePerception()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.version, _x.frame_id,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image = []
      for i in range(0, length):
        val1 = j2_mono.msg.Image()
        _x = val1
        start = end
        end += 48
        (_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter,) = _get_struct_3iq7i().unpack(str[start:end])
        self.image.append(val1)
      _x = self
      start = end
      end += 28
      (_x.data_descriptor, _x.odometry.x, _x.odometry.y, _x.odometry.yaw, _x.odometry.speed, _x.odometry.yaw_rate, _x.odometry.time_stamp,) = _get_struct_i5fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.obstacles = []
      for i in range(0, length):
        val1 = j2_mono.msg.Obstacles()
        start = end
        end += 4
        (val1.cam_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacle = []
        for i in range(0, length):
          val2 = j2_mono.msg.Obstacle()
          _x = val2
          start = end
          end += 20
          (_x.id, _x.type, _x.conf, _x.life_time, _x.age,) = _get_struct_5i().unpack(str[start:end])
          _v49 = val2.img_info
          _v50 = _v49.rect
          _x = _v50
          start = end
          end += 16
          (_x.left, _x.top, _x.right, _x.bottom,) = _get_struct_4f().unpack(str[start:end])
          _v51 = _v49.box
          _v52 = _v51.lower_lt
          _x = _v52
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v53 = _v51.lower_lb
          _x = _v53
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v54 = _v51.lower_rb
          _x = _v54
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v55 = _v51.lower_rt
          _x = _v55
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v56 = _v51.upper_lt
          _x = _v56
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v57 = _v51.upper_lb
          _x = _v57
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v58 = _v51.upper_rb
          _x = _v58
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v59 = _v51.upper_rt
          _x = _v59
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 4
          (_v51.conf,) = _get_struct_f().unpack(str[start:end])
          _v60 = _v49.poly
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v60.pts = []
          for i in range(0, length):
            val5 = j2_mono.msg.Point()
            _x = val5
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v60.pts.append(val5)
          _x = _v49
          start = end
          end += 16
          (_x.sigma_width, _x.sigma_height, _x.sigma_x, _x.sigma_y,) = _get_struct_4f().unpack(str[start:end])
          _v61 = val2.world_info
          start = end
          end += 4
          (_v61.yaw,) = _get_struct_f().unpack(str[start:end])
          _v62 = _v61.vel
          _x = _v62
          start = end
          end += 12
          (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
          _x = _v61
          start = end
          end += 12
          (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
          _v63 = _v61.poly
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v63.pts = []
          for i in range(0, length):
            val5 = j2_mono.msg.Point()
            _x = val5
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v63.pts.append(val5)
          _v64 = _v61.position
          _x = _v64
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _x = _v61
          start = end
          end += 20
          (_x.traversable, _x.hmw, _x.ttc, _x.curr_lane, _x.sigma_yaw,) = _get_struct_i2fif().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          _v61.sigma_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _x = _v61
          start = end
          end += 8
          (_x.sigma_width, _x.sigma_height,) = _get_struct_2f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          _v61.sigma_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.property = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.property_name = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.property_name.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.property_type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.property_conf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sb'%length
          start = end
          end += struct.calcsize(pattern)
          val2.tracking_fmap = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
          val1.obstacle.append(val2)
        start = end
        end += 4
        (val1.conf_scale,) = _get_struct_f().unpack(str[start:end])
        self.structure_perception.obstacles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.lines = []
      for i in range(0, length):
        val1 = j2_mono.msg.Lines()
        start = end
        end += 4
        (val1.cam_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lines = []
        for i in range(0, length):
          val2 = j2_mono.msg.Line()
          _x = val2
          start = end
          end += 8
          (_x.id, _x.life_time,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.end_points = []
          for i in range(0, length):
            val3 = j2_mono.msg.Point()
            _x = val3
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            val2.end_points.append(val3)
          _x = val2
          start = end
          end += 24
          (_x.type, _x.source, _x.dist_to_front_wheel, _x.width, _x.type_sibling, _x.conf,) = _get_struct_2i2fif().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.sigma_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          val1.lines.append(val2)
        self.structure_perception.lines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.parsing = []
      for i in range(0, length):
        val1 = j2_mono.msg.Image()
        _x = val1
        start = end
        end += 48
        (_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter,) = _get_struct_3iq7i().unpack(str[start:end])
        self.structure_perception.parsing.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.depth = []
      for i in range(0, length):
        val1 = j2_mono.msg.Image()
        _x = val1
        start = end
        end += 48
        (_x.width, _x.height, _x.channel, _x.time_stamp, _x.send_mode, _x.format, _x.index, _x.count, _x.depth, _x.align, _x.image_counter,) = _get_struct_3iq7i().unpack(str[start:end])
        self.structure_perception.depth.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.structure_perception.scan_pts = []
      for i in range(0, length):
        val1 = j2_mono.msg.FreeSpacePoints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.property = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (val1.cam_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_vcs = []
        for i in range(0, length):
          val2 = j2_mono.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.pts_vcs.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts_img = []
        for i in range(0, length):
          val2 = j2_mono.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.pts_img.append(val2)
        self.structure_perception.scan_pts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2fif = None
def _get_struct_2i2fif():
    global _struct_2i2fif
    if _struct_2i2fif is None:
        _struct_2i2fif = struct.Struct("<2i2fif")
    return _struct_2i2fif
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i5fi = None
def _get_struct_i5fi():
    global _struct_i5fi
    if _struct_i5fi is None:
        _struct_i5fi = struct.Struct("<i5fi")
    return _struct_i5fi
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3iq7i = None
def _get_struct_3iq7i():
    global _struct_3iq7i
    if _struct_3iq7i is None:
        _struct_3iq7i = struct.Struct("<3iq7i")
    return _struct_3iq7i
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_i2fif = None
def _get_struct_i2fif():
    global _struct_i2fif
    if _struct_i2fif is None:
        _struct_i2fif = struct.Struct("<i2fif")
    return _struct_i2fif
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
