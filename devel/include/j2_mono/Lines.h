// Generated by gencpp from file j2_mono/Lines.msg
// DO NOT EDIT!


#ifndef J2_MONO_MESSAGE_LINES_H
#define J2_MONO_MESSAGE_LINES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2_mono/Line.h>

namespace j2_mono
{
template <class ContainerAllocator>
struct Lines_
{
  typedef Lines_<ContainerAllocator> Type;

  Lines_()
    : cam_id(0)
    , lines()  {
    }
  Lines_(const ContainerAllocator& _alloc)
    : cam_id(0)
    , lines(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _cam_id_type;
  _cam_id_type cam_id;

   typedef std::vector< ::j2_mono::Line_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2_mono::Line_<ContainerAllocator> >::other >  _lines_type;
  _lines_type lines;




  typedef boost::shared_ptr< ::j2_mono::Lines_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2_mono::Lines_<ContainerAllocator> const> ConstPtr;

}; // struct Lines_

typedef ::j2_mono::Lines_<std::allocator<void> > Lines;

typedef boost::shared_ptr< ::j2_mono::Lines > LinesPtr;
typedef boost::shared_ptr< ::j2_mono::Lines const> LinesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2_mono::Lines_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2_mono::Lines_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace j2_mono

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'j2_mono': ['/home/riki/AdasWork/catkin_ws/src/j2_mono/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::Lines_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::Lines_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::Lines_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::Lines_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::Lines_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::Lines_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2_mono::Lines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81f65aa561ab98e1b11e8498fb81cb8c";
  }

  static const char* value(const ::j2_mono::Lines_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81f65aa561ab98e1ULL;
  static const uint64_t static_value2 = 0xb11e8498fb81cb8cULL;
};

template<class ContainerAllocator>
struct DataType< ::j2_mono::Lines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2_mono/Lines";
  }

  static const char* value(const ::j2_mono::Lines_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2_mono::Lines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 cam_id\n\
Line[] lines\n\
\n\
================================================================================\n\
MSG: j2_mono/Line\n\
int32 id\n\
int32 life_time\n\
float32[] coeffs\n\
Point[] end_points\n\
int32 type #LINE_DOUBLE=512, LINE_DASH=1024, LINE_SOLID=2048\n\
int32 source #LINE_PERCEPTION=2097152, LINE_TRACKING=4194304\n\
float32 dist_to_front_wheel\n\
float32 width\n\
int32 type_sibling\n\
float32 conf\n\
float32[] sigma_coeffs\n\
\n\
\n\
================================================================================\n\
MSG: j2_mono/Point\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::j2_mono::Lines_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2_mono::Lines_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cam_id);
      stream.next(m.lines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Lines_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2_mono::Lines_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2_mono::Lines_<ContainerAllocator>& v)
  {
    s << indent << "cam_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cam_id);
    s << indent << "lines[]" << std::endl;
    for (size_t i = 0; i < v.lines.size(); ++i)
    {
      s << indent << "  lines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2_mono::Line_<ContainerAllocator> >::stream(s, indent + "    ", v.lines[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2_MONO_MESSAGE_LINES_H
