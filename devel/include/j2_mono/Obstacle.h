// Generated by gencpp from file j2_mono/Obstacle.msg
// DO NOT EDIT!


#ifndef J2_MONO_MESSAGE_OBSTACLE_H
#define J2_MONO_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2_mono/ImageSpaceInfo.h>
#include <j2_mono/WorldSpaceInfo.h>

namespace j2_mono
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : id(0)
    , type(0)
    , conf(0)
    , life_time(0)
    , age(0)
    , img_info()
    , world_info()
    , property()
    , property_name()
    , property_type()
    , property_conf()
    , tracking_fmap()  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , conf(0)
    , life_time(0)
    , age(0)
    , img_info(_alloc)
    , world_info(_alloc)
    , property(_alloc)
    , property_name(_alloc)
    , property_type(_alloc)
    , property_conf(_alloc)
    , tracking_fmap(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _conf_type;
  _conf_type conf;

   typedef int32_t _life_time_type;
  _life_time_type life_time;

   typedef int32_t _age_type;
  _age_type age;

   typedef  ::j2_mono::ImageSpaceInfo_<ContainerAllocator>  _img_info_type;
  _img_info_type img_info;

   typedef  ::j2_mono::WorldSpaceInfo_<ContainerAllocator>  _world_info_type;
  _world_info_type world_info;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _property_type;
  _property_type property;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _property_name_type;
  _property_name_type property_name;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _property_type_type;
  _property_type_type property_type;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _property_conf_type;
  _property_conf_type property_conf;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _tracking_fmap_type;
  _tracking_fmap_type tracking_fmap;




  typedef boost::shared_ptr< ::j2_mono::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2_mono::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::j2_mono::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::j2_mono::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::j2_mono::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2_mono::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2_mono::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace j2_mono

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'j2_mono': ['/home/riki/AdasWork/catkin_ws/src/j2_mono/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2_mono::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa36fd0875dc274867576399a8c05785";
  }

  static const char* value(const ::j2_mono::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa36fd0875dc2748ULL;
  static const uint64_t static_value2 = 0x67576399a8c05785ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2_mono::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2_mono/Obstacle";
  }

  static const char* value(const ::j2_mono::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2_mono::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
int32 type #ObstacleType_VehicleRear=0, ObstacleType_VehicleFull=1, ObstacleType_Pedestrian=2, ObstacleType_TrafficSign=3, ObstacleType_TrafficLight=4, ObstacleType_ParkingSlot=5, ObstacleType_RoadSign=6, ObstacleType_Cyclist=18\n\
int32 conf\n\
int32 life_time\n\
int32 age\n\
ImageSpaceInfo img_info\n\
WorldSpaceInfo world_info\n\
int32[] property #\n\
string[] property_name\n\
int32[] property_type\n\
float32[] property_conf\n\
int8[] tracking_fmap\n\
\n\
\n\
================================================================================\n\
MSG: j2_mono/ImageSpaceInfo\n\
Rect rect\n\
Box3D box\n\
Polygon poly\n\
float32 sigma_width\n\
float32 sigma_height\n\
float32 sigma_x\n\
float32 sigma_y\n\
\n\
================================================================================\n\
MSG: j2_mono/Rect\n\
float32 left\n\
float32 top\n\
float32 right\n\
float32 bottom\n\
\n\
================================================================================\n\
MSG: j2_mono/Box3D\n\
Point lower_lt\n\
Point lower_lb\n\
Point lower_rb\n\
Point lower_rt\n\
Point upper_lt\n\
Point upper_lb\n\
Point upper_rb\n\
Point upper_rt\n\
float32 conf\n\
\n\
================================================================================\n\
MSG: j2_mono/Point\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
================================================================================\n\
MSG: j2_mono/Polygon\n\
Point[] pts\n\
\n\
================================================================================\n\
MSG: j2_mono/WorldSpaceInfo\n\
float32 yaw #rad\n\
Velocity vel #m/s relative velocity\n\
float32 length # real length of the obstacle in world coordinate\n\
float32 width # real width\n\
float32 height # real height\n\
Polygon poly # \n\
Point position # real position of the obstacle in world coordinate\n\
int32 traversable\n\
float32 hmw\n\
float32 ttc\n\
int32 curr_lane\n\
float32 sigma_yaw\n\
float32[] sigma_vel\n\
float32 sigma_width\n\
float32 sigma_height\n\
float32[] sigma_position\n\
\n\
\n\
================================================================================\n\
MSG: j2_mono/Velocity\n\
float32 vx\n\
float32 vy\n\
float32 vz\n\
";
  }

  static const char* value(const ::j2_mono::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2_mono::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.conf);
      stream.next(m.life_time);
      stream.next(m.age);
      stream.next(m.img_info);
      stream.next(m.world_info);
      stream.next(m.property);
      stream.next(m.property_name);
      stream.next(m.property_type);
      stream.next(m.property_conf);
      stream.next(m.tracking_fmap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2_mono::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2_mono::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "conf: ";
    Printer<int32_t>::stream(s, indent + "  ", v.conf);
    s << indent << "life_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.life_time);
    s << indent << "age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age);
    s << indent << "img_info: ";
    s << std::endl;
    Printer< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.img_info);
    s << indent << "world_info: ";
    s << std::endl;
    Printer< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.world_info);
    s << indent << "property[]" << std::endl;
    for (size_t i = 0; i < v.property.size(); ++i)
    {
      s << indent << "  property[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.property[i]);
    }
    s << indent << "property_name[]" << std::endl;
    for (size_t i = 0; i < v.property_name.size(); ++i)
    {
      s << indent << "  property_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.property_name[i]);
    }
    s << indent << "property_type[]" << std::endl;
    for (size_t i = 0; i < v.property_type.size(); ++i)
    {
      s << indent << "  property_type[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.property_type[i]);
    }
    s << indent << "property_conf[]" << std::endl;
    for (size_t i = 0; i < v.property_conf.size(); ++i)
    {
      s << indent << "  property_conf[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.property_conf[i]);
    }
    s << indent << "tracking_fmap[]" << std::endl;
    for (size_t i = 0; i < v.tracking_fmap.size(); ++i)
    {
      s << indent << "  tracking_fmap[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.tracking_fmap[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2_MONO_MESSAGE_OBSTACLE_H
