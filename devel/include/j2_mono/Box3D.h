// Generated by gencpp from file j2_mono/Box3D.msg
// DO NOT EDIT!


#ifndef J2_MONO_MESSAGE_BOX3D_H
#define J2_MONO_MESSAGE_BOX3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2_mono/Point.h>
#include <j2_mono/Point.h>
#include <j2_mono/Point.h>
#include <j2_mono/Point.h>
#include <j2_mono/Point.h>
#include <j2_mono/Point.h>
#include <j2_mono/Point.h>
#include <j2_mono/Point.h>

namespace j2_mono
{
template <class ContainerAllocator>
struct Box3D_
{
  typedef Box3D_<ContainerAllocator> Type;

  Box3D_()
    : lower_lt()
    , lower_lb()
    , lower_rb()
    , lower_rt()
    , upper_lt()
    , upper_lb()
    , upper_rb()
    , upper_rt()
    , conf(0.0)  {
    }
  Box3D_(const ContainerAllocator& _alloc)
    : lower_lt(_alloc)
    , lower_lb(_alloc)
    , lower_rb(_alloc)
    , lower_rt(_alloc)
    , upper_lt(_alloc)
    , upper_lb(_alloc)
    , upper_rb(_alloc)
    , upper_rt(_alloc)
    , conf(0.0)  {
  (void)_alloc;
    }



   typedef  ::j2_mono::Point_<ContainerAllocator>  _lower_lt_type;
  _lower_lt_type lower_lt;

   typedef  ::j2_mono::Point_<ContainerAllocator>  _lower_lb_type;
  _lower_lb_type lower_lb;

   typedef  ::j2_mono::Point_<ContainerAllocator>  _lower_rb_type;
  _lower_rb_type lower_rb;

   typedef  ::j2_mono::Point_<ContainerAllocator>  _lower_rt_type;
  _lower_rt_type lower_rt;

   typedef  ::j2_mono::Point_<ContainerAllocator>  _upper_lt_type;
  _upper_lt_type upper_lt;

   typedef  ::j2_mono::Point_<ContainerAllocator>  _upper_lb_type;
  _upper_lb_type upper_lb;

   typedef  ::j2_mono::Point_<ContainerAllocator>  _upper_rb_type;
  _upper_rb_type upper_rb;

   typedef  ::j2_mono::Point_<ContainerAllocator>  _upper_rt_type;
  _upper_rt_type upper_rt;

   typedef float _conf_type;
  _conf_type conf;




  typedef boost::shared_ptr< ::j2_mono::Box3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2_mono::Box3D_<ContainerAllocator> const> ConstPtr;

}; // struct Box3D_

typedef ::j2_mono::Box3D_<std::allocator<void> > Box3D;

typedef boost::shared_ptr< ::j2_mono::Box3D > Box3DPtr;
typedef boost::shared_ptr< ::j2_mono::Box3D const> Box3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2_mono::Box3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2_mono::Box3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace j2_mono

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'j2_mono': ['/home/riki/AdasWork/catkin_ws/src/j2_mono/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::Box3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::Box3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::Box3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::Box3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::Box3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::Box3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2_mono::Box3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2a4c3bc64f81e95d0c37d470dea3708";
  }

  static const char* value(const ::j2_mono::Box3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2a4c3bc64f81e95ULL;
  static const uint64_t static_value2 = 0xd0c37d470dea3708ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2_mono::Box3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2_mono/Box3D";
  }

  static const char* value(const ::j2_mono::Box3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2_mono::Box3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point lower_lt\n\
Point lower_lb\n\
Point lower_rb\n\
Point lower_rt\n\
Point upper_lt\n\
Point upper_lb\n\
Point upper_rb\n\
Point upper_rt\n\
float32 conf\n\
\n\
================================================================================\n\
MSG: j2_mono/Point\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::j2_mono::Box3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2_mono::Box3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lower_lt);
      stream.next(m.lower_lb);
      stream.next(m.lower_rb);
      stream.next(m.lower_rt);
      stream.next(m.upper_lt);
      stream.next(m.upper_lb);
      stream.next(m.upper_rb);
      stream.next(m.upper_rt);
      stream.next(m.conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Box3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2_mono::Box3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2_mono::Box3D_<ContainerAllocator>& v)
  {
    s << indent << "lower_lt: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_lt);
    s << indent << "lower_lb: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_lb);
    s << indent << "lower_rb: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_rb);
    s << indent << "lower_rt: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_rt);
    s << indent << "upper_lt: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_lt);
    s << indent << "upper_lb: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_lb);
    s << indent << "upper_rb: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_rb);
    s << indent << "upper_rt: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_rt);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2_MONO_MESSAGE_BOX3D_H
