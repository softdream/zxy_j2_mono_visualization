// Generated by gencpp from file j2_mono/Image.msg
// DO NOT EDIT!


#ifndef J2_MONO_MESSAGE_IMAGE_H
#define J2_MONO_MESSAGE_IMAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2_mono
{
template <class ContainerAllocator>
struct Image_
{
  typedef Image_<ContainerAllocator> Type;

  Image_()
    : width(0)
    , height(0)
    , channel(0)
    , time_stamp(0)
    , send_mode(0)
    , format(0)
    , index(0)
    , count(0)
    , depth(0)
    , align(0)
    , image_counter(0)  {
    }
  Image_(const ContainerAllocator& _alloc)
    : width(0)
    , height(0)
    , channel(0)
    , time_stamp(0)
    , send_mode(0)
    , format(0)
    , index(0)
    , count(0)
    , depth(0)
    , align(0)
    , image_counter(0)  {
  (void)_alloc;
    }



   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _channel_type;
  _channel_type channel;

   typedef int64_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _send_mode_type;
  _send_mode_type send_mode;

   typedef int32_t _format_type;
  _format_type format;

   typedef int32_t _index_type;
  _index_type index;

   typedef int32_t _count_type;
  _count_type count;

   typedef int32_t _depth_type;
  _depth_type depth;

   typedef int32_t _align_type;
  _align_type align;

   typedef int32_t _image_counter_type;
  _image_counter_type image_counter;




  typedef boost::shared_ptr< ::j2_mono::Image_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2_mono::Image_<ContainerAllocator> const> ConstPtr;

}; // struct Image_

typedef ::j2_mono::Image_<std::allocator<void> > Image;

typedef boost::shared_ptr< ::j2_mono::Image > ImagePtr;
typedef boost::shared_ptr< ::j2_mono::Image const> ImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2_mono::Image_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2_mono::Image_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace j2_mono

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'j2_mono': ['/home/riki/AdasWork/catkin_ws/src/j2_mono/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::Image_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::Image_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::Image_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::Image_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::Image_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::Image_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2_mono::Image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5423f0f8301d9093d1931c3f216d2abd";
  }

  static const char* value(const ::j2_mono::Image_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5423f0f8301d9093ULL;
  static const uint64_t static_value2 = 0xd1931c3f216d2abdULL;
};

template<class ContainerAllocator>
struct DataType< ::j2_mono::Image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2_mono/Image";
  }

  static const char* value(const ::j2_mono::Image_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2_mono::Image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 width\n\
int32 height\n\
int32 channel\n\
int64 time_stamp\n\
int32 send_mode\n\
int32 format\n\
int32 index\n\
int32 count\n\
int32 depth\n\
int32 align\n\
int32 image_counter\n\
";
  }

  static const char* value(const ::j2_mono::Image_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2_mono::Image_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.channel);
      stream.next(m.time_stamp);
      stream.next(m.send_mode);
      stream.next(m.format);
      stream.next(m.index);
      stream.next(m.count);
      stream.next(m.depth);
      stream.next(m.align);
      stream.next(m.image_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Image_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2_mono::Image_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2_mono::Image_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "channel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel);
    s << indent << "time_stamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "send_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.send_mode);
    s << indent << "format: ";
    Printer<int32_t>::stream(s, indent + "  ", v.format);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "depth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.depth);
    s << indent << "align: ";
    Printer<int32_t>::stream(s, indent + "  ", v.align);
    s << indent << "image_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2_MONO_MESSAGE_IMAGE_H
