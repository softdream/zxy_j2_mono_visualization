// Generated by gencpp from file j2_mono/WorldSpaceInfo.msg
// DO NOT EDIT!


#ifndef J2_MONO_MESSAGE_WORLDSPACEINFO_H
#define J2_MONO_MESSAGE_WORLDSPACEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2_mono/Velocity.h>
#include <j2_mono/Polygon.h>
#include <j2_mono/Point.h>

namespace j2_mono
{
template <class ContainerAllocator>
struct WorldSpaceInfo_
{
  typedef WorldSpaceInfo_<ContainerAllocator> Type;

  WorldSpaceInfo_()
    : yaw(0.0)
    , vel()
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , poly()
    , position()
    , traversable(0)
    , hmw(0.0)
    , ttc(0.0)
    , curr_lane(0)
    , sigma_yaw(0.0)
    , sigma_vel()
    , sigma_width(0.0)
    , sigma_height(0.0)
    , sigma_position()  {
    }
  WorldSpaceInfo_(const ContainerAllocator& _alloc)
    : yaw(0.0)
    , vel(_alloc)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , poly(_alloc)
    , position(_alloc)
    , traversable(0)
    , hmw(0.0)
    , ttc(0.0)
    , curr_lane(0)
    , sigma_yaw(0.0)
    , sigma_vel(_alloc)
    , sigma_width(0.0)
    , sigma_height(0.0)
    , sigma_position(_alloc)  {
  (void)_alloc;
    }



   typedef float _yaw_type;
  _yaw_type yaw;

   typedef  ::j2_mono::Velocity_<ContainerAllocator>  _vel_type;
  _vel_type vel;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef  ::j2_mono::Polygon_<ContainerAllocator>  _poly_type;
  _poly_type poly;

   typedef  ::j2_mono::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef int32_t _traversable_type;
  _traversable_type traversable;

   typedef float _hmw_type;
  _hmw_type hmw;

   typedef float _ttc_type;
  _ttc_type ttc;

   typedef int32_t _curr_lane_type;
  _curr_lane_type curr_lane;

   typedef float _sigma_yaw_type;
  _sigma_yaw_type sigma_yaw;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sigma_vel_type;
  _sigma_vel_type sigma_vel;

   typedef float _sigma_width_type;
  _sigma_width_type sigma_width;

   typedef float _sigma_height_type;
  _sigma_height_type sigma_height;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sigma_position_type;
  _sigma_position_type sigma_position;




  typedef boost::shared_ptr< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> const> ConstPtr;

}; // struct WorldSpaceInfo_

typedef ::j2_mono::WorldSpaceInfo_<std::allocator<void> > WorldSpaceInfo;

typedef boost::shared_ptr< ::j2_mono::WorldSpaceInfo > WorldSpaceInfoPtr;
typedef boost::shared_ptr< ::j2_mono::WorldSpaceInfo const> WorldSpaceInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2_mono::WorldSpaceInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace j2_mono

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'j2_mono': ['/home/riki/AdasWork/catkin_ws/src/j2_mono/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06b0dcae51474264c1f32cddd4cb2623";
  }

  static const char* value(const ::j2_mono::WorldSpaceInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06b0dcae51474264ULL;
  static const uint64_t static_value2 = 0xc1f32cddd4cb2623ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2_mono/WorldSpaceInfo";
  }

  static const char* value(const ::j2_mono::WorldSpaceInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 yaw #rad\n\
Velocity vel #m/s relative velocity\n\
float32 length # real length of the obstacle in world coordinate\n\
float32 width # real width\n\
float32 height # real height\n\
Polygon poly # \n\
Point position # real position of the obstacle in world coordinate\n\
int32 traversable\n\
float32 hmw\n\
float32 ttc\n\
int32 curr_lane\n\
float32 sigma_yaw\n\
float32[] sigma_vel\n\
float32 sigma_width\n\
float32 sigma_height\n\
float32[] sigma_position\n\
\n\
\n\
================================================================================\n\
MSG: j2_mono/Velocity\n\
float32 vx\n\
float32 vy\n\
float32 vz\n\
\n\
================================================================================\n\
MSG: j2_mono/Polygon\n\
Point[] pts\n\
\n\
================================================================================\n\
MSG: j2_mono/Point\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::j2_mono::WorldSpaceInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw);
      stream.next(m.vel);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.poly);
      stream.next(m.position);
      stream.next(m.traversable);
      stream.next(m.hmw);
      stream.next(m.ttc);
      stream.next(m.curr_lane);
      stream.next(m.sigma_yaw);
      stream.next(m.sigma_vel);
      stream.next(m.sigma_width);
      stream.next(m.sigma_height);
      stream.next(m.sigma_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct WorldSpaceInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2_mono::WorldSpaceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2_mono::WorldSpaceInfo_<ContainerAllocator>& v)
  {
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::j2_mono::Velocity_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "poly: ";
    s << std::endl;
    Printer< ::j2_mono::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.poly);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::j2_mono::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "traversable: ";
    Printer<int32_t>::stream(s, indent + "  ", v.traversable);
    s << indent << "hmw: ";
    Printer<float>::stream(s, indent + "  ", v.hmw);
    s << indent << "ttc: ";
    Printer<float>::stream(s, indent + "  ", v.ttc);
    s << indent << "curr_lane: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curr_lane);
    s << indent << "sigma_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_yaw);
    s << indent << "sigma_vel[]" << std::endl;
    for (size_t i = 0; i < v.sigma_vel.size(); ++i)
    {
      s << indent << "  sigma_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sigma_vel[i]);
    }
    s << indent << "sigma_width: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_width);
    s << indent << "sigma_height: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_height);
    s << indent << "sigma_position[]" << std::endl;
    for (size_t i = 0; i < v.sigma_position.size(); ++i)
    {
      s << indent << "  sigma_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sigma_position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2_MONO_MESSAGE_WORLDSPACEINFO_H
