// Generated by gencpp from file j2_mono/ImageSpaceInfo.msg
// DO NOT EDIT!


#ifndef J2_MONO_MESSAGE_IMAGESPACEINFO_H
#define J2_MONO_MESSAGE_IMAGESPACEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2_mono/Rect.h>
#include <j2_mono/Box3D.h>
#include <j2_mono/Polygon.h>

namespace j2_mono
{
template <class ContainerAllocator>
struct ImageSpaceInfo_
{
  typedef ImageSpaceInfo_<ContainerAllocator> Type;

  ImageSpaceInfo_()
    : rect()
    , box()
    , poly()
    , sigma_width(0.0)
    , sigma_height(0.0)
    , sigma_x(0.0)
    , sigma_y(0.0)  {
    }
  ImageSpaceInfo_(const ContainerAllocator& _alloc)
    : rect(_alloc)
    , box(_alloc)
    , poly(_alloc)
    , sigma_width(0.0)
    , sigma_height(0.0)
    , sigma_x(0.0)
    , sigma_y(0.0)  {
  (void)_alloc;
    }



   typedef  ::j2_mono::Rect_<ContainerAllocator>  _rect_type;
  _rect_type rect;

   typedef  ::j2_mono::Box3D_<ContainerAllocator>  _box_type;
  _box_type box;

   typedef  ::j2_mono::Polygon_<ContainerAllocator>  _poly_type;
  _poly_type poly;

   typedef float _sigma_width_type;
  _sigma_width_type sigma_width;

   typedef float _sigma_height_type;
  _sigma_height_type sigma_height;

   typedef float _sigma_x_type;
  _sigma_x_type sigma_x;

   typedef float _sigma_y_type;
  _sigma_y_type sigma_y;




  typedef boost::shared_ptr< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ImageSpaceInfo_

typedef ::j2_mono::ImageSpaceInfo_<std::allocator<void> > ImageSpaceInfo;

typedef boost::shared_ptr< ::j2_mono::ImageSpaceInfo > ImageSpaceInfoPtr;
typedef boost::shared_ptr< ::j2_mono::ImageSpaceInfo const> ImageSpaceInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2_mono::ImageSpaceInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace j2_mono

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'j2_mono': ['/home/riki/AdasWork/catkin_ws/src/j2_mono/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fb215e492dbe974ebabb86f0056d4f6";
  }

  static const char* value(const ::j2_mono::ImageSpaceInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fb215e492dbe974ULL;
  static const uint64_t static_value2 = 0xebabb86f0056d4f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2_mono/ImageSpaceInfo";
  }

  static const char* value(const ::j2_mono::ImageSpaceInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Rect rect\n\
Box3D box\n\
Polygon poly\n\
float32 sigma_width\n\
float32 sigma_height\n\
float32 sigma_x\n\
float32 sigma_y\n\
\n\
================================================================================\n\
MSG: j2_mono/Rect\n\
float32 left\n\
float32 top\n\
float32 right\n\
float32 bottom\n\
\n\
================================================================================\n\
MSG: j2_mono/Box3D\n\
Point lower_lt\n\
Point lower_lb\n\
Point lower_rb\n\
Point lower_rt\n\
Point upper_lt\n\
Point upper_lb\n\
Point upper_rb\n\
Point upper_rt\n\
float32 conf\n\
\n\
================================================================================\n\
MSG: j2_mono/Point\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
================================================================================\n\
MSG: j2_mono/Polygon\n\
Point[] pts\n\
";
  }

  static const char* value(const ::j2_mono::ImageSpaceInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rect);
      stream.next(m.box);
      stream.next(m.poly);
      stream.next(m.sigma_width);
      stream.next(m.sigma_height);
      stream.next(m.sigma_x);
      stream.next(m.sigma_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ImageSpaceInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2_mono::ImageSpaceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2_mono::ImageSpaceInfo_<ContainerAllocator>& v)
  {
    s << indent << "rect: ";
    s << std::endl;
    Printer< ::j2_mono::Rect_<ContainerAllocator> >::stream(s, indent + "  ", v.rect);
    s << indent << "box: ";
    s << std::endl;
    Printer< ::j2_mono::Box3D_<ContainerAllocator> >::stream(s, indent + "  ", v.box);
    s << indent << "poly: ";
    s << std::endl;
    Printer< ::j2_mono::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.poly);
    s << indent << "sigma_width: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_width);
    s << indent << "sigma_height: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_height);
    s << indent << "sigma_x: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_x);
    s << indent << "sigma_y: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2_MONO_MESSAGE_IMAGESPACEINFO_H
