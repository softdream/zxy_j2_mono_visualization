// Generated by gencpp from file localizationSensor/gps.msg
// DO NOT EDIT!


#ifndef LOCALIZATIONSENSOR_MESSAGE_GPS_H
#define LOCALIZATIONSENSOR_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace localizationSensor
{
template <class ContainerAllocator>
struct gps_
{
  typedef gps_<ContainerAllocator> Type;

  gps_()
    : sensorSerial()
    , timeSec(0)
    , timeUsec(0)
    , oritention(0)
    , longitude(0)
    , latitude(0)  {
    }
  gps_(const ContainerAllocator& _alloc)
    : sensorSerial(_alloc)
    , timeSec(0)
    , timeUsec(0)
    , oritention(0)
    , longitude(0)
    , latitude(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensorSerial_type;
  _sensorSerial_type sensorSerial;

   typedef int64_t _timeSec_type;
  _timeSec_type timeSec;

   typedef int64_t _timeUsec_type;
  _timeUsec_type timeUsec;

   typedef int64_t _oritention_type;
  _oritention_type oritention;

   typedef int64_t _longitude_type;
  _longitude_type longitude;

   typedef int64_t _latitude_type;
  _latitude_type latitude;




  typedef boost::shared_ptr< ::localizationSensor::gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localizationSensor::gps_<ContainerAllocator> const> ConstPtr;

}; // struct gps_

typedef ::localizationSensor::gps_<std::allocator<void> > gps;

typedef boost::shared_ptr< ::localizationSensor::gps > gpsPtr;
typedef boost::shared_ptr< ::localizationSensor::gps const> gpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localizationSensor::gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localizationSensor::gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localizationSensor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'localizationSensor': ['/home/riki/AdasWork/catkin_ws/src/localizationSensor/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localizationSensor::gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localizationSensor::gps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localizationSensor::gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localizationSensor::gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localizationSensor::gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localizationSensor::gps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localizationSensor::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2d375cb43251e9d31a674ffc6746d6f";
  }

  static const char* value(const ::localizationSensor::gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2d375cb43251e9dULL;
  static const uint64_t static_value2 = 0x31a674ffc6746d6fULL;
};

template<class ContainerAllocator>
struct DataType< ::localizationSensor::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localizationSensor/gps";
  }

  static const char* value(const ::localizationSensor::gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localizationSensor::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header header\n\
string sensorSerial\n\
int64 timeSec\n\
int64 timeUsec\n\
int64 oritention\n\
int64 longitude\n\
int64 latitude\n\
";
  }

  static const char* value(const ::localizationSensor::gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localizationSensor::gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensorSerial);
      stream.next(m.timeSec);
      stream.next(m.timeUsec);
      stream.next(m.oritention);
      stream.next(m.longitude);
      stream.next(m.latitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localizationSensor::gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localizationSensor::gps_<ContainerAllocator>& v)
  {
    s << indent << "sensorSerial: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensorSerial);
    s << indent << "timeSec: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timeSec);
    s << indent << "timeUsec: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timeUsec);
    s << indent << "oritention: ";
    Printer<int64_t>::stream(s, indent + "  ", v.oritention);
    s << indent << "longitude: ";
    Printer<int64_t>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<int64_t>::stream(s, indent + "  ", v.latitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATIONSENSOR_MESSAGE_GPS_H
